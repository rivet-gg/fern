/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const EnumSchema: core.serialization.ObjectSchema<serializers.EnumSchema.Raw, FernOpenapiIr.EnumSchema> =
    core.serialization
        .objectWithoutOptionalProperties({
            default: core.serialization.lazyObject(async () => (await import("../../..")).EnumValue).optional(),
            values: core.serialization.list(
                core.serialization.lazyObject(async () => (await import("../../..")).EnumValue)
            ),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithDescription))
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithName))
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithSdkGroupName))
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithAvailability));

export declare namespace EnumSchema {
    interface Raw
        extends serializers.WithDescription.Raw,
            serializers.WithName.Raw,
            serializers.WithSdkGroupName.Raw,
            serializers.WithAvailability.Raw {
        default?: serializers.EnumValue.Raw | null;
        values: serializers.EnumValue.Raw[];
    }
}
