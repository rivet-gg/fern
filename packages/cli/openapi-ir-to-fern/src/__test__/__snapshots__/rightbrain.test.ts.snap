// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rightbrain rightbrain docs 1`] = `
{
  "definitionFiles": {
    "chat.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createChat": {
            "auth": true,
            "display-name": "Create Chat",
            "docs": undefined,
            "errors": [
              "root.CreateChatChatPostRequestBadRequestError",
              "root.CreateChatChatPostRequestForbiddenError",
              "root.CreateChatChatPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "collection_id": "collection_id",
                },
                "response": {
                  "body": {
                    "collection_id": "collection_id",
                    "created": "2024-01-15T09:30:00Z",
                    "created_by_user_id": "created_by_user_id",
                    "description": "description",
                    "documents_have_been_modified": true,
                    "id": "id",
                    "last_message": "2024-01-15T09:30:00Z",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat",
            "request": {
              "body": {
                "properties": {
                  "collection_id": {
                    "type": "string",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "description": "optional<string>",
                  "summary": "optional<string>",
                  "title": "optional<string>",
                },
              },
              "headers": undefined,
              "name": "ChatCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Chat",
            },
          },
          "getChat": {
            "auth": true,
            "display-name": "Get Chat",
            "docs": undefined,
            "errors": [
              "root.GetChatChatChatIdGetRequestBadRequestError",
              "root.GetChatChatChatIdGetRequestForbiddenError",
              "root.GetChatChatChatIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "response": {
                  "body": {
                    "collection_id": "collection_id",
                    "created": "2024-01-15T09:30:00Z",
                    "created_by_user_id": "created_by_user_id",
                    "description": "description",
                    "documents_have_been_modified": true,
                    "id": "id",
                    "last_message": "2024-01-15T09:30:00Z",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}",
            "path-parameters": {
              "chat_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Chat",
            },
          },
          "getChatConfig": {
            "auth": true,
            "display-name": "Get Chat Config",
            "docs": undefined,
            "errors": [
              "root.GetChatConfigChatChatIdConfigGetRequestBadRequestError",
              "root.GetChatConfigChatChatIdConfigGetRequestForbiddenError",
              "root.GetChatConfigChatChatIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/config",
            "path-parameters": {
              "chat_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatConfig",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Chat Member",
            "docs": "Retrieve a specific member that has been granted direct access to the chat.",
            "errors": [
              "root.ChatGetMemberRequestBadRequestError",
              "root.ChatGetMemberRequestForbiddenError",
              "root.ChatGetMemberRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                  "member": "member",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/members/{member}",
            "path-parameters": {
              "chat_id": "string",
              "member": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "getRecentChatsForUser": {
            "auth": true,
            "display-name": "Get Recent Chats For User",
            "docs": undefined,
            "errors": [
              "root.GetRecentChatsForUserChatRecentGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "collection_id": "collection_id",
                      "created": "2024-01-15T09:30:00Z",
                      "created_by_user_id": "created_by_user_id",
                      "description": "description",
                      "documents_have_been_modified": true,
                      "id": "id",
                      "last_message": "2024-01-15T09:30:00Z",
                      "summary": "summary",
                      "title": "title",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/recent",
            "request": {
              "name": "GetRecentChatsForUserChatRecentGetRequest",
              "query-parameters": {
                "project_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.Chat>",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Chat Members",
            "docs": "Lists all members that have been granted direct access to the chat.",
            "errors": [
              "root.ChatIamListMembersRequestBadRequestError",
              "root.ChatIamListMembersRequestForbiddenError",
              "root.ChatIamListMembersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/members",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "name": "ChatIamListMembersRequest",
              "query-parameters": {
                "type": "optional<ChatIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Chat Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the chat.",
            "errors": [
              "root.ChatIamTestPermissionsRequestBadRequestError",
              "root.ChatIamTestPermissionsRequestForbiddenError",
              "root.ChatIamTestPermissionsRequestNotFoundError",
              "root.ChatIamTestPermissionsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/test",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the chat.",
                    "type": "list<ChatIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChatIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Chat Member",
            "docs": "Update the roles that a member holds on the chat.",
            "errors": [
              "root.ChatIamUpdateMemberRolesRequestBadRequestError",
              "root.ChatIamUpdateMemberRolesRequestForbiddenError",
              "root.ChatIamUpdateMemberRolesRequestNotFoundError",
              "root.ChatIamUpdateMemberRolesRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                  "member": "member",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/members/{member}",
            "path-parameters": {
              "chat_id": "string",
              "member": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of chat roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<ChatIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of chat roles to revoke from the member.",
                    "type": "optional<list<ChatIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChatIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "queryChat": {
            "auth": true,
            "display-name": "Query Chat",
            "docs": undefined,
            "errors": [
              "root.QueryChatChatChatIdQueryGetRequestBadRequestError",
              "root.QueryChatChatChatIdQueryGetRequestForbiddenError",
              "root.QueryChatChatChatIdQueryGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "query-parameters": {
                  "query": "query",
                },
                "response": {
                  "body": [
                    {
                      "chat_document_id": "chat_document_id",
                      "score": 1.1,
                      "text": "text",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/query",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "name": "QueryChatChatChatIdQueryGetRequest",
              "query-parameters": {
                "query": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatDocumentQueryResult>",
            },
          },
          "setChatConfig": {
            "auth": true,
            "display-name": "Set Chat Config",
            "docs": undefined,
            "errors": [
              "root.SetChatConfigChatChatIdConfigPostRequestBadRequestError",
              "root.SetChatConfigChatChatIdConfigPostRequestForbiddenError",
              "root.SetChatConfigChatChatIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}/config",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "chat_guardrails": {
                    "docs": "Conversational Guardrails can be defined to run against Chat \`input\` (i.e. the users query) or on Chat \`output\` (i.e. the LLM output)",
                    "type": "optional<root.ConversationalGuardrails>",
                  },
                  "chat_system_commands": "optional<list<string>>",
                  "knn": {
                    "default": 5,
                    "type": "optional<integer>",
                  },
                  "llm": {
                    "default": "gpt-3.5-turbo",
                    "type": "optional<Llm>",
                  },
                  "query_expansion": {
                    "default": false,
                    "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                    "type": "optional<boolean>",
                  },
                  "temperature": {
                    "default": 0.5,
                    "type": "optional<double>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1,
                      "min": 0,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ChatConfig",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatConfig",
            },
          },
          "updateChat": {
            "auth": true,
            "display-name": "Update Chat",
            "docs": undefined,
            "errors": [
              "root.UpdateChatChatChatIdPostRequestBadRequestError",
              "root.UpdateChatChatChatIdPostRequestForbiddenError",
              "root.UpdateChatChatChatIdPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "collection_id": "collection_id",
                    "created": "2024-01-15T09:30:00Z",
                    "created_by_user_id": "created_by_user_id",
                    "description": "description",
                    "documents_have_been_modified": true,
                    "id": "id",
                    "last_message": "2024-01-15T09:30:00Z",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "ChatUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Chat",
            },
          },
        },
      },
      "types": {
        "ChatIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "ChatIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "ChatIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "ChatIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "edit",
            "query",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
        "Llm": {
          "default": "gpt-3.5-turbo",
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
      },
    },
    "collection.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "collectionAdd": {
            "auth": true,
            "display-name": "Collection Add",
            "docs": "Add an embedding instance to the collection",
            "errors": [
              "root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestBadRequestError",
              "root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenError",
              "root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "embedding_instance_ids": [
                    "embedding_instance_ids",
                  ],
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/add",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.CollectionEmbeddingUpdate",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "collectionEdit": {
            "auth": true,
            "display-name": "Collection Edit",
            "docs": "Edit collection details",
            "errors": [
              "root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestBadRequestError",
              "root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenError",
              "root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "CollectionUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "collectionRemove": {
            "auth": true,
            "display-name": "Collection Remove",
            "docs": "Remove an embedding instance from the collection",
            "errors": [
              "root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestBadRequestError",
              "root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenError",
              "root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "embedding_instance_ids": [
                    "embedding_instance_ids",
                  ],
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/remove",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.CollectionEmbeddingUpdate",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "collectionStats": {
            "auth": true,
            "display-name": "Collection Stats",
            "docs": undefined,
            "errors": [
              "root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestBadRequestError",
              "root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenError",
              "root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "documents_by_source": [
                      {
                        "count": 1,
                        "source": "upload",
                      },
                    ],
                    "number_of_chats": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/stats",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.CollectionStatsResponse",
            },
          },
          "createCollection": {
            "auth": true,
            "display-name": "Create Collection",
            "docs": undefined,
            "errors": [
              "root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestBadRequestError",
              "root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenError",
              "root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "document_embedding_instance_ids": "optional<list<string>>",
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "CollectionCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "getCollection": {
            "auth": true,
            "display-name": "Get Collection",
            "docs": undefined,
            "errors": [
              "root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestBadRequestError",
              "root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenError",
              "root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Collection Member",
            "docs": "Retrieve a specific member that has been granted direct access to the collection.",
            "errors": [
              "root.CollectionGetMemberRequestBadRequestError",
              "root.CollectionGetMemberRequestForbiddenError",
              "root.CollectionGetMemberRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}",
            "path-parameters": {
              "collection_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Collection Members",
            "docs": "Lists all members that have been granted direct access to the collection.",
            "errors": [
              "root.CollectionIamListMembersRequestBadRequestError",
              "root.CollectionIamListMembersRequestForbiddenError",
              "root.CollectionIamListMembersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CollectionIamListMembersRequest",
              "query-parameters": {
                "type": "optional<CollectionIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Collection Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the collection.",
            "errors": [
              "root.CollectionIamTestPermissionsRequestBadRequestError",
              "root.CollectionIamTestPermissionsRequestForbiddenError",
              "root.CollectionIamTestPermissionsRequestNotFoundError",
              "root.CollectionIamTestPermissionsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "permissions": [
                    "add_document",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/test",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the collection.",
                    "type": "list<CollectionIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "CollectionIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Collection Member",
            "docs": "Update the roles that a member holds on the collection.",
            "errors": [
              "root.CollectionIamUpdateMemberRolesRequestBadRequestError",
              "root.CollectionIamUpdateMemberRolesRequestForbiddenError",
              "root.CollectionIamUpdateMemberRolesRequestNotFoundError",
              "root.CollectionIamUpdateMemberRolesRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}",
            "path-parameters": {
              "collection_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of collection roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<CollectionIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of collection roles to revoke from the member.",
                    "type": "optional<list<CollectionIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "CollectionIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "listChats": {
            "auth": true,
            "display-name": "List Chats",
            "docs": undefined,
            "errors": [
              "root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestBadRequestError",
              "root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenError",
              "root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "collection_id": "collection_id",
                        "created": "2024-01-15T09:30:00Z",
                        "created_by_user_id": "created_by_user_id",
                        "description": "description",
                        "documents_have_been_modified": true,
                        "id": "id",
                        "last_message": "2024-01-15T09:30:00Z",
                        "summary": "summary",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/chat",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "show": "optional<root.CollectionChatShow>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetChat",
            },
          },
          "listCollections": {
            "auth": true,
            "display-name": "List Collections",
            "docs": undefined,
            "errors": [
              "root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestBadRequestError",
              "root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenError",
              "root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "embedding_instances": [
                          {
                            "chat_document_id": "chat_document_id",
                            "id": "id",
                            "is_active": true,
                          },
                        ],
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "project_id": "project_id",
                        "summary": "summary",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "title": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetCollection",
            },
          },
          "queryCollection": {
            "auth": true,
            "display-name": "Query Collection",
            "docs": undefined,
            "errors": [
              "root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestBadRequestError",
              "root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenError",
              "root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "query": "query",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/query",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "query": "string",
                },
              },
              "headers": undefined,
              "name": "CollectionQuery",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "updateSummary": {
            "auth": true,
            "display-name": "Update Summary",
            "docs": "Generate and update the summary for a collection",
            "errors": [
              "root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestBadRequestError",
              "root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenError",
              "root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "status": "status",
                    "task_id": [
                      "task_id",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/update_summary",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.AsyncJobResult",
            },
          },
        },
      },
      "types": {
        "CollectionIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "CollectionIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "CollectionIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "CollectionIamPermissionTestPermissionsItem": {
          "enum": [
            "add_document",
            "add_editor",
            "add_member",
            "add_owner",
            "create_chat",
            "edit",
            "list_chats",
            "query",
            "remove_document",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
      },
    },
    "compose.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "generate": {
            "auth": true,
            "display-name": "Generate",
            "docs": undefined,
            "errors": [
              "root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestBadRequestError",
              "root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenError",
              "root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "compose": {
                    "structure": [
                      {
                        "position": 1,
                        "title": "title",
                      },
                    ],
                  },
                  "context": {
                    "title": "title",
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/generate",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "compose": "root.ComposeGenerate",
                  "context": "root.ComposeInit",
                },
              },
              "headers": undefined,
              "name": "BodyGenerateOrgOrgIdProjectProjectIdComposeGeneratePost",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "initialise": {
            "auth": true,
            "display-name": "Initialise",
            "docs": undefined,
            "errors": [
              "root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestBadRequestError",
              "root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenError",
              "root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.ComposeInit",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "sectionTalkingPoints": {
            "auth": true,
            "display-name": "Section Talking Points",
            "docs": undefined,
            "errors": [
              "root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestBadRequestError",
              "root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenError",
              "root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "context": {
                    "title": "title",
                  },
                  "existing_content": {
                    "existing_content": "existing_content",
                  },
                  "update_instruction": {
                    "section_heading": "section_heading",
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/section_talking_points",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "context": "root.ComposeInit",
                  "existing_content": "root.ComposeContent",
                  "update_instruction": "root.ComposeSectionTalkingPoint",
                },
              },
              "headers": undefined,
              "name": "BodySectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPost",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "topic": {
            "auth": true,
            "display-name": "Topic",
            "docs": undefined,
            "errors": [
              "root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestBadRequestError",
              "root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenError",
              "root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/topic",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "category": {
                    "default": "blog",
                    "type": "optional<string>",
                  },
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "ComposeTopicPoint",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "updateSection": {
            "auth": true,
            "display-name": "Update Section",
            "docs": undefined,
            "errors": [
              "root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestBadRequestError",
              "root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenError",
              "root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "context": {
                    "title": "title",
                  },
                  "existing_content": {
                    "existing_content": "existing_content",
                  },
                  "update_instruction": {
                    "instructions": [
                      "instructions",
                    ],
                    "position": 1,
                    "section_title": "section_title",
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/update_section",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "context": "root.ComposeInit",
                  "existing_content": "root.ComposeContent",
                  "update_instruction": "root.ComposeSectionUpdate",
                },
              },
              "headers": undefined,
              "name": "BodyUpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPost",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceBox.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceBoxCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/box/callback",
            "request": {
              "name": "CallbackDatasourceBoxCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceConfluence.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceConfluenceCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/confluence/callback",
            "request": {
              "name": "CallbackDatasourceConfluenceCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceDropbox.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceDropboxCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/dropbox/callback",
            "request": {
              "name": "CallbackDatasourceDropboxCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceGdrive.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceGdriveCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/gdrive/callback",
            "request": {
              "name": "CallbackDatasourceGdriveCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceNotion.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceNotionCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/notion/callback",
            "request": {
              "name": "CallbackDatasourceNotionCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceOnedrive.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceOnedriveCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/onedrive/callback",
            "request": {
              "name": "CallbackDatasourceOnedriveCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceSharepoint.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestBadRequestError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenError",
              "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.CallbackDatasourceSharepointCallbackGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/sharepoint/callback",
            "request": {
              "name": "CallbackDatasourceSharepointCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestBadRequestError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenError",
              "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestBadRequestError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenError",
              "root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestBadRequestError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenError",
              "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestBadRequestError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenError",
              "root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestBadRequestError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenError",
              "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "document.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "documentCreate": {
            "auth": true,
            "display-name": "Document Create",
            "docs": undefined,
            "errors": [
              "root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestBadRequestError",
              "root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenError",
              "root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "data": "data",
                },
                "response": {
                  "body": {
                    "group_id": "group_id",
                    "task_count": 1,
                    "tasks": [
                      {
                        "info": {
                          "key": "value",
                        },
                        "state": "PENDING",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "data": "string",
                  "files": "optional<list<file>>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_document_create_org__org_id__project__project_id__document_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DocumentStatusResponse",
            },
          },
          "documentDelete": {
            "auth": true,
            "display-name": "Document Delete",
            "docs": undefined,
            "errors": [
              "root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestBadRequestError",
              "root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenError",
              "root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "documentEmbeddingGet": {
            "auth": false,
            "display-name": "Document Embedding Get",
            "docs": "Fetch an individual embedding record by its ID. Useful for examining the source submitted to an LLM",
            "errors": [
              "root.DocumentEmbeddingGetOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingEmbeddingIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "embedding_id": "embedding_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "document": "document",
                    "id": "id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/embedding/{embedding_id}",
            "path-parameters": {
              "document_id": "string",
              "embedding_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatDocumentEmbeddingRecord",
            },
          },
          "documentEmbeddingQuery": {
            "auth": true,
            "display-name": "Document Embedding Query",
            "docs": undefined,
            "errors": [
              "root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestBadRequestError",
              "root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenError",
              "root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "document": "document",
                        "id": "id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/embeddings",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetChatDocumentEmbeddingRecord",
            },
          },
          "documentFetch": {
            "auth": true,
            "display-name": "Document Fetch",
            "docs": undefined,
            "errors": [
              "root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestBadRequestError",
              "root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenError",
              "root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "chunks": 1,
                    "connection_id": "connection_id",
                    "description": "description",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "original_mime": "original_mime",
                    "project_id": "project_id",
                    "source": "upload",
                    "source_meta": {
                      "key": "value",
                    },
                    "strategy": "strategy",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatDocument",
            },
          },
          "documentList": {
            "auth": true,
            "display-name": "Document List",
            "docs": undefined,
            "errors": [
              "root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestBadRequestError",
              "root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenError",
              "root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "chunks": 1,
                        "connection_id": "connection_id",
                        "description": "description",
                        "embedding_instances": [
                          {
                            "chat_document_id": "chat_document_id",
                            "id": "id",
                            "is_active": true,
                          },
                        ],
                        "id": "id",
                        "original_mime": "original_mime",
                        "project_id": "project_id",
                        "source": "upload",
                        "source_meta": {
                          "key": "value",
                        },
                        "strategy": "strategy",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequest",
              "query-parameters": {
                "collection_id": "optional<string>",
                "connection_id": "optional<string>",
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "source": "optional<DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource>",
                "strategy": "optional<string>",
                "title": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetChatDocument",
            },
          },
          "documentQuery": {
            "auth": true,
            "display-name": "Document Query",
            "docs": undefined,
            "errors": [
              "root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestBadRequestError",
              "root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenError",
              "root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "query": "query",
                },
                "response": {
                  "body": [
                    {
                      "chat_document_id": "chat_document_id",
                      "score": 1.1,
                      "text": "text",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/query",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequest",
              "query-parameters": {
                "query": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatDocumentQueryResult>",
            },
          },
          "documentUpdate": {
            "auth": true,
            "display-name": "Document Update",
            "docs": undefined,
            "errors": [
              "root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestBadRequestError",
              "root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenError",
              "root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "chunks": 1,
                    "connection_id": "connection_id",
                    "description": "description",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "original_mime": "original_mime",
                    "project_id": "project_id",
                    "source": "upload",
                    "source_meta": {
                      "key": "value",
                    },
                    "strategy": "strategy",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "description": "optional<string>",
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "ChatDocumentUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatDocument",
            },
          },
          "documentUpload": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Document Upload",
            "docs": undefined,
            "errors": [
              "root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestBadRequestError",
              "root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenError",
              "root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "data": "data",
                },
                "response": {
                  "body": [
                    {
                      "chunks": 1,
                      "connection_id": "connection_id",
                      "description": "description",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "original_mime": "original_mime",
                      "project_id": "project_id",
                      "source": "upload",
                      "source_meta": {
                        "key": "value",
                      },
                      "strategy": "strategy",
                      "title": "title",
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/upload",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "data": "string",
                  "files": "optional<list<file>>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_document_upload_org__org_id__project__project_id__document_upload_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatDocument>",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Document Member",
            "docs": "Retrieve a specific member that has been granted direct access to the document.",
            "errors": [
              "root.DocumentGetMemberRequestBadRequestError",
              "root.DocumentGetMemberRequestForbiddenError",
              "root.DocumentGetMemberRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}",
            "path-parameters": {
              "document_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Document Members",
            "docs": "Lists all members that have been granted direct access to the document.",
            "errors": [
              "root.DocumentIamListMembersRequestBadRequestError",
              "root.DocumentIamListMembersRequestForbiddenError",
              "root.DocumentIamListMembersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentIamListMembersRequest",
              "query-parameters": {
                "type": "optional<DocumentIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Document Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the document.",
            "errors": [
              "root.DocumentIamTestPermissionsRequestBadRequestError",
              "root.DocumentIamTestPermissionsRequestForbiddenError",
              "root.DocumentIamTestPermissionsRequestNotFoundError",
              "root.DocumentIamTestPermissionsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/test",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the document.",
                    "type": "list<DocumentIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "DocumentIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Document Member",
            "docs": "Update the roles that a member holds on the document.",
            "errors": [
              "root.DocumentIamUpdateMemberRolesRequestBadRequestError",
              "root.DocumentIamUpdateMemberRolesRequestForbiddenError",
              "root.DocumentIamUpdateMemberRolesRequestNotFoundError",
              "root.DocumentIamUpdateMemberRolesRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}",
            "path-parameters": {
              "document_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of document roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<DocumentIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of document roles to revoke from the member.",
                    "type": "optional<list<DocumentIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "DocumentIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "taskStatus": {
            "auth": true,
            "display-name": "Task Status",
            "docs": undefined,
            "errors": [
              "root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestBadRequestError",
              "root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenError",
              "root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "group_id": "group_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "group_id": "group_id",
                    "task_count": 1,
                    "tasks": [
                      {
                        "info": {
                          "key": "value",
                        },
                        "state": "PENDING",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/create/status/{group_id}",
            "path-parameters": {
              "group_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DocumentStatusResponse",
            },
          },
        },
      },
      "types": {
        "DocumentIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "DocumentIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "DocumentIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "DocumentIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "edit",
            "query",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
        "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource": {
          "enum": [
            "upload",
            "gdrive",
            "onedrive",
            "web_scrape",
            "notion",
            "confluence",
            "box",
            "dropbox",
            "sharepoint",
          ],
        },
      },
    },
    "internal.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "registerOauthClient": {
            "auth": true,
            "display-name": "Register Oauth Client",
            "docs": undefined,
            "errors": [
              "root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestBadRequestError",
              "root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenError",
              "root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "client_id": "client_id",
                    "client_secret": "client_secret",
                    "name": "name",
                    "redirect_uris": [
                      "redirect_uris",
                    ],
                    "scope": "scope",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/project/{project_id}/register_oauth_client",
            "path-parameters": {
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "profile": "optional<root.OAuthClientProfile>",
                  "redirect_uris": "optional<list<string>>",
                },
              },
              "headers": undefined,
              "name": "OAuthClientCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OAuthClientCreateResponse",
            },
          },
          "webhookHydraTokenHook": {
            "auth": false,
            "display-name": "Webhook Hydra Token Hook",
            "docs": undefined,
            "errors": [
              "root.WebhookHydraTokenHookInternalWebhookHydraTokenHookPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "session": {
                    "client_id": "client_id",
                    "id_token": {
                      "id_token_claims": {
                        "key": "value",
                      },
                    },
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/webhook/hydra/token_hook",
            "request": {
              "body": {
                "properties": {
                  "session": "root.HydraWebhookTokenHookSession",
                },
              },
              "headers": undefined,
              "name": "HydraWebhookTokenHook",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "webhookKratosSignupCheck": {
            "auth": false,
            "display-name": "Webhook Kratos Signup Check",
            "docs": undefined,
            "errors": [
              "root.WebhookKratosSignupCheckInternalWebhookKratosSignupCheckPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "identity_id": "identity_id",
                },
                "response": {
                  "body": {
                    "identity": {
                      "key": "value",
                    },
                    "messages": [
                      {
                        "instance_ptr": "instance_ptr",
                        "messages": [
                          {
                            "id": 1,
                            "text": "text",
                            "type": "info",
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/webhook/kratos/signup_check",
            "request": {
              "body": "root.KratosWebhook",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.KratosWebhookResponse",
            },
          },
          "webhookKratosSignupCommit": {
            "auth": false,
            "display-name": "Webhook Kratos Signup Commit",
            "docs": undefined,
            "errors": [
              "root.WebhookKratosSignupCommitInternalWebhookKratosSignupCommitPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "identity_id": "identity_id",
                },
                "response": {
                  "body": {
                    "identity": {
                      "key": "value",
                    },
                    "messages": [
                      {
                        "instance_ptr": "instance_ptr",
                        "messages": [
                          {
                            "id": 1,
                            "text": "text",
                            "type": "info",
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/webhook/kratos/signup_commit",
            "request": {
              "body": "root.KratosWebhook",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.KratosWebhookResponse",
            },
          },
        },
      },
    },
    "listings.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAllModels": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "List available LLM's",
            "docs": "All supported LLM providers and models. Not all models have the same functionality.",
            "errors": [
              "root.GetAllModelsRequestBadRequestError",
              "root.GetAllModelsRequestForbiddenError",
              "root.GetAllModelsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "01902fbf-6de7-a1cc-fb86-b1230a7af301",
                  "project_id": "01902fc0-a119-26bc-827d-4138841301db",
                },
                "response": {
                  "body": [
                    {
                      "alias": "GPT 3.5 Turbo",
                      "description": "A fast and cost-effective model for a broad range of tasks. 16K context window with training cut off of Sep 2021.",
                      "name": "gpt-3.5-turbo",
                      "provider": "OpenAI",
                      "supports_vision": false,
                    },
                    {
                      "alias": "GPT 4",
                      "description": "The fourth-generation model with advanced reasoning and understanding. 8k context window with training cut off of Sep 2021.",
                      "name": "gpt-4",
                      "provider": "OpenAI",
                      "supports_vision": false,
                    },
                    {
                      "alias": "GPT 4 Turbo",
                      "description": "The latest GPT-4 Turbo model with vision capabilities. 128K context window with training cut off of Dec 2023.",
                      "name": "gpt-4-turbo",
                      "provider": "OpenAI",
                      "supports_vision": true,
                    },
                    {
                      "alias": "GPT 4 Turbo Preview",
                      "description": "GPT-4 Turbo preview model featuring improved instruction following, JSON mode. 128K context window with training cut off of April 2023. Returns a maximum of 4,096 output tokens. This is a preview model.",
                      "name": "gpt-4-turbo-preview",
                      "provider": "OpenAI",
                      "supports_vision": false,
                    },
                    {
                      "alias": "GPT 4o",
                      "description": "GPT-4o ("o" for "omni") is OpenAI's most advanced model. It is multimodal, it has the same high intelligence as GPT-4 Turbo but is much more efficient — it generates text 2x faster and is 50% cheaper.",
                      "name": "gpt-4o",
                      "provider": "OpenAI",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3.5 Sonnet",
                      "description": "Anthropics most intelligent model. 200K context window with 4k max output with training cut off of June 2024.",
                      "name": "claude-3-5-sonnet-20240620",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3 Haiku",
                      "description": "Anthropics fastest and most compact model. 200K context window with 4k max output with training cut off of Aug 2023.",
                      "name": "claude-3-haiku-20240307",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3 Sonnet",
                      "description": "Balanced model between intelligence and speed. 200K context window with 4k max output with training cut off of Aug 2023.",
                      "name": "claude-3-sonnet-20240229",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3 Opus",
                      "description": "Anthropics most powerful model. 200K context window with 4k max output with training cut off of Aug 2023.",
                      "name": "claude-3-opus-20240229",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Gemini 1.5 Pro",
                      "description": "Googles latest gemini model. 100K context window and 8k max output with training cut off in late 2023.",
                      "name": "gemini-1.5-pro-latest",
                      "provider": "Google",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Gemini 1.0 Pro",
                      "description": "Googles 1.0 version gemini model. 30K context window and 2k max output with training cut off in late 2023.",
                      "name": "gemini-pro",
                      "provider": "Google",
                      "supports_vision": false,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/model",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatModel>",
            },
          },
          "listAvailableGuardrails": {
            "auth": false,
            "display-name": "List Available Guardrails",
            "docs": undefined,
            "errors": [
              "root.ListAvailableGuardrailsOrgOrgIdProjectProjectIdGuardrailGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "description": "description",
                      "id": "source_validation",
                      "name": "name",
                      "type": "input",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/guardrail",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatGuardrail>",
            },
          },
        },
      },
    },
    "org.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "orgCreate": {
            "auth": true,
            "display-name": "Org Create",
            "docs": undefined,
            "errors": [
              "root.OrgCreateOrgPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "contact_email": "contact_email",
                  "name": "name",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org",
            "request": {
              "body": {
                "properties": {
                  "contact_email": {
                    "type": "string",
                    "validation": {
                      "format": "email",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "name": "string",
                },
              },
              "headers": undefined,
              "name": "OrgCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "orgDomainDelete": {
            "auth": true,
            "display-name": "Org Domain Delete",
            "docs": undefined,
            "errors": [
              "root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestBadRequestError",
              "root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenError",
              "root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "domain_id": "domain_id",
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "domain": "domain",
                    "id": "id",
                    "status": "unverified",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/domains/{domain_id}",
            "path-parameters": {
              "domain_id": "string",
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationDomain",
            },
          },
          "orgDomainsList": {
            "auth": true,
            "display-name": "Org Domains List",
            "docs": undefined,
            "errors": [
              "root.OrgDomainsListOrgOrgIdDomainsGetRequestBadRequestError",
              "root.OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenError",
              "root.OrgDomainsListOrgOrgIdDomainsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "domain": "domain",
                        "id": "id",
                        "status": "unverified",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/domains",
            "path-parameters": {
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetOrganizationDomain",
            },
          },
          "orgDomainsPost": {
            "auth": true,
            "display-name": "Org Domains Post",
            "docs": undefined,
            "errors": [
              "root.OrgDomainsPostOrgOrgIdDomainsPostRequestBadRequestError",
              "root.OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenError",
              "root.OrgDomainsPostOrgOrgIdDomainsPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "domain": "domain",
                },
                "response": {
                  "body": {
                    "domain": "domain",
                    "id": "id",
                    "status": "unverified",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/domains",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "domain": "string",
                },
              },
              "headers": undefined,
              "name": "OrganizationDomainCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationDomain",
            },
          },
          "orgGet": {
            "auth": true,
            "display-name": "Org Get",
            "docs": undefined,
            "errors": [
              "root.OrgGetOrgOrgIdGetRequestBadRequestError",
              "root.OrgGetOrgOrgIdGetRequestForbiddenError",
              "root.OrgGetOrgOrgIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}",
            "path-parameters": {
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "orgInvitesCreate": {
            "auth": true,
            "display-name": "Org Invites Create",
            "docs": undefined,
            "errors": [
              "root.OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestError",
              "root.OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenError",
              "root.OrgInvitesCreateOrgOrgIdInvitePostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "email_address": "email_address",
                },
                "response": {
                  "body": {
                    "email_address": "email_address",
                    "id": "id",
                    "roles": [
                      "roles",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/invite",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "email_address": {
                    "type": "string",
                    "validation": {
                      "format": "email",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "roles": "optional<list<string>>",
                },
              },
              "headers": undefined,
              "name": "OrgInviteBase",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationInvite",
            },
          },
          "orgInvitesDelete": {
            "auth": true,
            "display-name": "Org Invites Delete",
            "docs": undefined,
            "errors": [
              "root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestBadRequestError",
              "root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenError",
              "root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "org_invite_id": "org_invite_id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/invite/{org_invite_id}",
            "path-parameters": {
              "org_id": "string",
              "org_invite_id": "string",
            },
          },
          "orgInvitesList": {
            "auth": true,
            "display-name": "Org Invites List",
            "docs": undefined,
            "errors": [
              "root.OrgInvitesListOrgOrgIdInviteGetRequestBadRequestError",
              "root.OrgInvitesListOrgOrgIdInviteGetRequestForbiddenError",
              "root.OrgInvitesListOrgOrgIdInviteGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "email_address": "email_address",
                        "id": "id",
                        "roles": [
                          "roles",
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/invite",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "name": "OrgInvitesListOrgOrgIdInviteGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "show": "optional<root.OrgInviteShow>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetOrganizationInvite",
            },
          },
          "orgJoin": {
            "auth": true,
            "display-name": "Org Join",
            "docs": undefined,
            "errors": [
              "root.OrgJoinOrgOrgIdJoinPostRequestBadRequestError",
              "root.OrgJoinOrgOrgIdJoinPostRequestForbiddenError",
              "root.OrgJoinOrgOrgIdJoinPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/join",
            "path-parameters": {
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "orgList": {
            "auth": true,
            "display-name": "Org List",
            "docs": undefined,
            "errors": [
              "root.OrgListOrgGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org",
            "request": {
              "name": "OrgListOrgGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "membership": "optional<root.OrgMembership>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "orgUpdate": {
            "auth": true,
            "display-name": "Org Update",
            "docs": undefined,
            "errors": [
              "root.OrgUpdateOrgOrgIdPostRequestBadRequestError",
              "root.OrgUpdateOrgOrgIdPostRequestForbiddenError",
              "root.OrgUpdateOrgOrgIdPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "contact_email": {
                    "type": "optional<string>",
                    "validation": {
                      "format": "email",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "OrgUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "orgUpdateAvatar": {
            "auth": true,
            "display-name": "Org Update Avatar",
            "docs": undefined,
            "errors": [
              "root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestBadRequestError",
              "root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenError",
              "root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/avatar",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_org_update_avatar_org__org_id__avatar_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "organization_get_member": {
            "auth": true,
            "display-name": "IAM - Lookup Organization Member",
            "docs": "Retrieve a specific member that has been granted direct access to the organization.",
            "errors": [
              "root.OrganizationGetMemberRequestBadRequestError",
              "root.OrganizationGetMemberRequestForbiddenError",
              "root.OrganizationGetMemberRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "organization_iam_list_members": {
            "auth": true,
            "display-name": "IAM - List Organization Members",
            "docs": "Lists all members that have been granted direct access to the organization.",
            "errors": [
              "root.OrganizationIamListMembersRequestBadRequestError",
              "root.OrganizationIamListMembersRequestForbiddenError",
              "root.OrganizationIamListMembersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/members",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "name": "OrganizationIamListMembersRequest",
              "query-parameters": {
                "type": "optional<OrganizationIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "organization_iam_test_permissions": {
            "auth": true,
            "display-name": "IAM - Test Organization Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the organization.",
            "errors": [
              "root.OrganizationIamTestPermissionsRequestBadRequestError",
              "root.OrganizationIamTestPermissionsRequestForbiddenError",
              "root.OrganizationIamTestPermissionsRequestNotFoundError",
              "root.OrganizationIamTestPermissionsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/test",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the organization.",
                    "type": "list<OrganizationIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrganizationIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "organization_iam_update_member_roles": {
            "auth": true,
            "display-name": "IAM - Update Organization Member",
            "docs": "Update the roles that a member holds on the organization.",
            "errors": [
              "root.OrganizationIamUpdateMemberRolesRequestBadRequestError",
              "root.OrganizationIamUpdateMemberRolesRequestForbiddenError",
              "root.OrganizationIamUpdateMemberRolesRequestNotFoundError",
              "root.OrganizationIamUpdateMemberRolesRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of organization roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<OrganizationIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of organization roles to revoke from the member.",
                    "type": "optional<list<OrganizationIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrganizationIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
        },
      },
      "types": {
        "OrganizationIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "OrganizationIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "OrganizationIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "OrganizationIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "create_project",
            "edit",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
      },
    },
    "project.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createProject": {
            "auth": true,
            "display-name": "Create Project",
            "docs": undefined,
            "errors": [
              "root.CreateProjectOrgOrgIdProjectPostRequestBadRequestError",
              "root.CreateProjectOrgOrgIdProjectPostRequestForbiddenError",
              "root.CreateProjectOrgOrgIdProjectPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "name": "string",
                },
              },
              "headers": undefined,
              "name": "ProjectCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Project",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Project Member",
            "docs": "Retrieve a specific member that has been granted direct access to the project.",
            "errors": [
              "root.ProjectGetMemberRequestBadRequestError",
              "root.ProjectGetMemberRequestForbiddenError",
              "root.ProjectGetMemberRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "getProject": {
            "auth": true,
            "display-name": "Get Project",
            "docs": undefined,
            "errors": [
              "root.GetProjectOrgOrgIdProjectProjectIdGetRequestBadRequestError",
              "root.GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenError",
              "root.GetProjectOrgOrgIdProjectProjectIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "datasource_connections": [
                      {
                        "config": {
                          "key": "value",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "datasource": {
                          "id": "id",
                          "name": "name",
                        },
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "private": true,
                        "project_id": "project_id",
                      },
                    ],
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectWithDatasources",
            },
          },
          "getProjectConfig": {
            "auth": false,
            "display-name": "Get Project Config",
            "docs": undefined,
            "errors": [
              "root.GetProjectConfigOrgOrgIdProjectProjectIdConfigGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/config",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectConfig",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Project Members",
            "docs": "Lists all members that have been granted direct access to the project.",
            "errors": [
              "root.ProjectIamListMembersRequestBadRequestError",
              "root.ProjectIamListMembersRequestForbiddenError",
              "root.ProjectIamListMembersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/members",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ProjectIamListMembersRequest",
              "query-parameters": {
                "type": "optional<ProjectIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Project Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the project.",
            "errors": [
              "root.ProjectIamTestPermissionsRequestBadRequestError",
              "root.ProjectIamTestPermissionsRequestForbiddenError",
              "root.ProjectIamTestPermissionsRequestNotFoundError",
              "root.ProjectIamTestPermissionsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/test",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the project.",
                    "type": "list<ProjectIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Project Member",
            "docs": "Update the roles that a member holds on the project.",
            "errors": [
              "root.ProjectIamUpdateMemberRolesRequestBadRequestError",
              "root.ProjectIamUpdateMemberRolesRequestForbiddenError",
              "root.ProjectIamUpdateMemberRolesRequestNotFoundError",
              "root.ProjectIamUpdateMemberRolesRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of project roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<ProjectIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of project roles to revoke from the member.",
                    "type": "optional<list<ProjectIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "listProject": {
            "auth": true,
            "display-name": "List Project",
            "docs": undefined,
            "errors": [
              "root.ListProjectOrgOrgIdProjectGetRequestBadRequestError",
              "root.ListProjectOrgOrgIdProjectGetRequestForbiddenError",
              "root.ListProjectOrgOrgIdProjectGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "id": "id",
                        "name": "name",
                        "org_id": "org_id",
                        "tasks_oauth_client_id": "tasks_oauth_client_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "name": "ListProjectOrgOrgIdProjectGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetProject",
            },
          },
          "projectUpdateAvatar": {
            "auth": true,
            "display-name": "Project Update Avatar",
            "docs": undefined,
            "errors": [
              "root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestBadRequestError",
              "root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenError",
              "root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/avatar",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_project_update_avatar_org__org_id__project__project_id__avatar_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Project",
            },
          },
          "setProjectConfig": {
            "auth": true,
            "display-name": "Set Project Config",
            "docs": undefined,
            "errors": [
              "root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestBadRequestError",
              "root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenError",
              "root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/config",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "chat_guardrails": "optional<root.ConversationalGuardrails>",
                  "chat_system_commands": "optional<list<string>>",
                  "knn": {
                    "default": 4,
                    "type": "optional<integer>",
                  },
                  "llm": {
                    "default": "gpt-3.5-turbo",
                    "type": "optional<Llm>",
                  },
                  "query_expansion": {
                    "default": false,
                    "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                    "type": "optional<boolean>",
                  },
                  "temperature": {
                    "default": 0.5,
                    "type": "optional<double>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1,
                      "min": 0,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectConfig",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectConfig",
            },
          },
          "updateProject": {
            "auth": true,
            "display-name": "Update Project",
            "docs": undefined,
            "errors": [
              "root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestBadRequestError",
              "root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenError",
              "root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "name": "optional<string>",
                },
              },
              "headers": undefined,
              "name": "ProjectUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Project",
            },
          },
        },
      },
      "types": {
        "Llm": {
          "default": "gpt-3.5-turbo",
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
        "ProjectIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "ProjectIamMemberRoleUpdateAddItem": {
          "enum": [
            "data_creator",
            "data_editor",
            "data_viewer",
            "editor",
            "owner",
            "task_creator",
            "task_runner",
            "viewer",
          ],
        },
        "ProjectIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "data_creator",
            "data_editor",
            "data_viewer",
            "editor",
            "owner",
            "task_creator",
            "task_runner",
            "viewer",
          ],
        },
        "ProjectIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "collections_edit",
            "collections_view",
            "create_chat",
            "create_collection",
            "create_compose",
            "create_datasource_connection",
            "create_document",
            "create_task",
            "datasource_connections_edit",
            "datasource_connections_view",
            "documents_edit",
            "documents_view",
            "edit",
            "edit_data",
            "list_documents",
            "query_data",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "run_task",
            "view",
            "view_data",
            "view_members",
          ],
        },
      },
    },
    "scrape.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "checkStatus": {
            "auth": false,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.CheckStatusOrgOrgIdProjectProjectIdScrapeRunSyncRunIdGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape/run/{sync_run_id}",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
              "sync_run_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "enable": {
            "auth": true,
            "display-name": "Enable Web Scrape",
            "docs": undefined,
            "errors": [
              "root.EnableOrgOrgIdProjectProjectIdScrapePostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Initialise Web Scrape",
            "docs": undefined,
            "errors": [
              "root.FetchOrgOrgIdProjectProjectIdScrapeStartPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "urls": [
                    "urls",
                  ],
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape/start",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "max_crawl_depth": {
                    "default": 3,
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 7,
                      "min": undefined,
                      "multipleOf": undefined,
                    },
                  },
                  "urls": "list<string>",
                },
              },
              "headers": undefined,
              "name": "SiteScrapeRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape/runs",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
        },
      },
    },
    "taskForwarders.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createTaskForwarder": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Create a Task Forwarder",
            "docs": "A Task Forwarder will receive the output of a Task and forward it to the specified destination. This can be used to send data to external systems, or to trigger other actions based on the output of a Task.",
            "errors": [
              "root.CreateTaskForwarderRequestBadRequestError",
              "root.CreateTaskForwarderRequestForbiddenError",
              "root.CreateTaskForwarderRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "request": {
                  "config": {
                    "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                  },
                  "config_sensitive": {
                    "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                  },
                  "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                  "name": "Webhook Endpoint",
                },
                "response": {
                  "body": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-01-15T09:30:00Z",
                    "name": "Webhook Endpoint",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "config": {
                    "docs": "Configuration parameters for the Task Forwarder such as a \`destination\` URL.",
                    "type": "optional<root.TaskForwarderConfig>",
                  },
                  "config_sensitive": {
                    "docs": "Sensitive parameters for the Task Forwarder such as a \`signing_key\`.",
                    "type": "optional<root.TaskForwarderSensitiveConfig>",
                  },
                  "description": {
                    "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A descriptive name for the Task Forwarder.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskForwarderCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskForwarder",
            },
          },
          "getAllTaskForwarders": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "List all Task Forwarders",
            "docs": undefined,
            "errors": [
              "root.GetAllTaskForwardersRequestBadRequestError",
              "root.GetAllTaskForwardersRequestForbiddenError",
              "root.GetAllTaskForwardersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "config": {
                          "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                        },
                        "config_sensitive": {
                          "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "modified": "2024-01-15T09:30:00Z",
                        "name": "Webhook Endpoint",
                        "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetAllTaskForwardersRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "A cursor for pagination. Use the \`next_cursor\` value from the previous response to get the next page of results.",
                  "type": "optional<string>",
                },
                "page_limit": {
                  "docs": "The maximum number of items to return per page. Defaults to \`100\` if not specified.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetTaskForwarder",
            },
          },
          "getTaskForwarder": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch a Task Forwarder",
            "docs": undefined,
            "errors": [
              "root.GetTaskForwarderRequestBadRequestError",
              "root.GetTaskForwarderRequestForbiddenError",
              "root.GetTaskForwarderRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_forwarder_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "response": {
                  "body": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-01-15T09:30:00Z",
                    "name": "Webhook Endpoint",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_forwarder_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskForwarder",
            },
          },
          "updateTaskForwarder": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Update a Task Forwarder",
            "docs": undefined,
            "errors": [
              "root.UpdateTaskForwarderRequestBadRequestError",
              "root.UpdateTaskForwarderRequestForbiddenError",
              "root.UpdateTaskForwarderRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_forwarder_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "request": {},
                "response": {
                  "body": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-01-15T09:30:00Z",
                    "name": "Webhook Endpoint",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_forwarder_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "config": {
                    "docs": "Configuration parameters for the Task Forwarder such as a \`destination\` URL.",
                    "type": "optional<root.TaskForwarderConfig>",
                  },
                  "config_sensitive": {
                    "docs": "Sensitive parameters for the Task Forwarder such as a \`signing_key\`.",
                    "type": "optional<root.TaskForwarderSensitiveConfig>",
                  },
                  "description": {
                    "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A descriptive name for the Task Forwarder.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskForwarderUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskForwarder",
            },
          },
        },
      },
    },
    "tasks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Create a Task",
            "docs": "Tasks are the core of the platform and define the prompts and models used to generate responses.",
            "errors": [
              "root.CreateTaskRequestBadRequestError",
              "root.CreateTaskRequestForbiddenError",
              "root.CreateTaskRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "request": {
                  "description": "A task to pre-triage user onboarding before IDV.",
                  "enabled": true,
                  "image_required": true,
                  "llm_model": "gpt-4o",
                  "name": "Fintech Pre-Triage",
                  "output_format": {
                    "compliance": "bool",
                    "hint": "str",
                    "match": "str",
                    "rationale": "str",
                  },
                  "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                  "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                },
                "response": {
                  "body": {
                    "created": "2024-06-13T14:01:03Z",
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-06-13T14:01:03Z",
                    "name": "Fintech Pre-Triage",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    "revisions": [
                      {
                        "active": true,
                        "created": "2024-06-13T14:01:03Z",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "image_required": true,
                        "llm_model": "gpt-4o",
                        "modified": "2024-06-13T14:01:03Z",
                        "output_format": {
                          "compliance": "bool",
                          "hint": "str",
                          "match": "str",
                          "rationale": "str",
                        },
                        "rag": {
                          "collection_id": "collection_id",
                          "rag_param": "rag_param",
                        },
                        "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                        "task_forwarder_id": "task_forwarder_id",
                        "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "A longer description of the Task for internal reference.",
                    "type": "optional<string>",
                  },
                  "enabled": {
                    "docs": "When \`true\` the Task is active and callable. \`false\` denotes the Task is not yet operational.",
                    "type": "boolean",
                  },
                  "image_required": {
                    "default": false,
                    "docs": "When \`true\` it requires an image to be sent in the Task Run request.",
                    "type": "optional<boolean>",
                  },
                  "llm_config": {
                    "docs": "Specific configuration parameters for the LLM model.",
                    "type": "optional<root.TaskLLMConfig>",
                  },
                  "llm_model": {
                    "docs": "The LLM model to use for the Task.",
                    "type": "TaskCreateLlmModel",
                  },
                  "name": {
                    "docs": "A name or reference for the Task.",
                    "type": "string",
                  },
                  "output_format": {
                    "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with \`type\` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional \`description\` can be passed to provide it with additional context.",
                    "type": "map<string, TaskCreateOutputFormatValue>",
                  },
                  "rag": {
                    "audiences": [
                      "paid",
                    ],
                    "availability": "pre-release",
                    "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                    "type": "optional<root.TaskRAG>",
                  },
                  "system_prompt": "unknown",
                  "task_forwarder_id": {
                    "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "user_prompt": "unknown",
                },
              },
              "headers": undefined,
              "name": "TaskCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Task",
            },
          },
          "editTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Update a Task",
            "docs": undefined,
            "errors": [
              "root.EditTaskRequestBadRequestError",
              "root.EditTaskRequestForbiddenError",
              "root.EditTaskRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "request": {},
                "response": {
                  "body": {
                    "created": "2024-06-13T14:01:03Z",
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-06-13T14:01:03Z",
                    "name": "Fintech Pre-Triage",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    "revisions": [
                      {
                        "active": true,
                        "created": "2024-06-13T14:01:03Z",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "image_required": true,
                        "llm_model": "gpt-4o",
                        "modified": "2024-06-13T14:01:03Z",
                        "output_format": {
                          "compliance": "bool",
                          "hint": "str",
                          "match": "str",
                          "rationale": "str",
                        },
                        "rag": {
                          "collection_id": "collection_id",
                          "rag_param": "rag_param",
                        },
                        "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                        "task_forwarder_id": "task_forwarder_id",
                        "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "A longer description of the Task for internal reference.",
                    "type": "optional<string>",
                  },
                  "enabled": {
                    "docs": "When \`true\` the Task is active and callable. \`false\` denotes the Task is not yet operational.",
                    "type": "optional<boolean>",
                  },
                  "image_required": {
                    "docs": "When \`true\` it requires an image to be sent in the Task Run request.",
                    "type": "optional<boolean>",
                  },
                  "llm_config": {
                    "docs": "Specific configuration parameters for the LLM model.",
                    "type": "optional<root.TaskLLMConfig>",
                  },
                  "llm_model": {
                    "docs": "The LLM model to use for the Task.",
                    "type": "optional<TaskUpdateLlmModel>",
                  },
                  "name": {
                    "docs": "A name or reference for the Task.",
                    "type": "optional<string>",
                  },
                  "output_format": {
                    "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with \`type\` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional \`description\` can be passed to provide it with additional context.",
                    "type": "optional<map<string, optional<TaskUpdateOutputFormatValue>>>",
                  },
                  "rag": {
                    "audiences": [
                      "paid",
                    ],
                    "availability": "pre-release",
                    "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                    "type": "optional<root.TaskRAG>",
                  },
                  "system_prompt": "optional<unknown>",
                  "task_forwarder_id": {
                    "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "user_prompt": "optional<unknown>",
                },
              },
              "headers": undefined,
              "name": "TaskUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Task",
            },
          },
          "getAllTasks": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "List all Tasks",
            "docs": undefined,
            "errors": [
              "root.GetAllTasksRequestBadRequestError",
              "root.GetAllTasksRequestForbiddenError",
              "root.GetAllTasksRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-06-13T14:01:03Z",
                        "description": "A task to pre-triage user onboarding before IDV.",
                        "enabled": true,
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "modified": "2024-06-13T14:01:03Z",
                        "name": "Fintech Pre-Triage",
                        "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                        "revisions": [
                          {
                            "created": "2024-06-13T14:01:03Z",
                            "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                            "image_required": true,
                            "llm_model": "gpt-4o",
                            "modified": "2024-06-13T14:01:03Z",
                            "output_format": {
                              "compliance": "bool",
                              "hint": "str",
                              "match": "str",
                              "rationale": "str",
                            },
                            "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                            "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetAllTasksRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "A cursor for pagination. Use the \`next_cursor\` value from the previous response to get the next page of results.",
                  "type": "optional<string>",
                },
                "name": {
                  "docs": "Filter tasks by name. Supports partial matches.",
                  "type": "optional<string>",
                },
                "page_limit": {
                  "docs": "The maximum number of items to return per page. Defaults to \`100\` if not specified.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetTask",
            },
          },
          "getTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch a Task",
            "docs": undefined,
            "errors": [
              "root.GetTaskRequestBadRequestError",
              "root.GetTaskRequestForbiddenError",
              "root.GetTaskRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "response": {
                  "body": {
                    "created": "2024-06-13T14:01:03Z",
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-06-13T14:01:03Z",
                    "name": "Fintech Pre-Triage",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    "revisions": [
                      {
                        "active": true,
                        "created": "2024-06-13T14:01:03Z",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "image_required": true,
                        "llm_model": "gpt-4o",
                        "modified": "2024-06-13T14:01:03Z",
                        "output_format": {
                          "compliance": "bool",
                          "hint": "str",
                          "match": "str",
                          "rationale": "str",
                        },
                        "rag": {
                          "collection_id": "collection_id",
                          "rag_param": "rag_param",
                        },
                        "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                        "task_forwarder_id": "task_forwarder_id",
                        "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Task",
            },
          },
          "getTaskRun": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch Task Run",
            "docs": "Fetch an individual Task Run.",
            "errors": [
              "root.GetTaskRunRequestBadRequestError",
              "root.GetTaskRunRequestForbiddenError",
              "root.GetTaskRunRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                  "task_run_id": "129c78d7-2e1f-4a77-adf3-68d69b0a3c71",
                },
                "response": {
                  "body": {
                    "created": "2024-07-11T14:31:21Z",
                    "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                    "response": {
                      "compliance": false,
                      "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                      "match": false,
                      "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                    },
                    "run_data": {
                      "audit": {
                        "ip": "10.152.3.59",
                        "ua": "Vercel Edge Functions",
                      },
                      "submitted": {
                        "description": "brown hair, blue sweater",
                      },
                    },
                    "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run/{task_run_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
              "task_run_id": {
                "docs": "The specific Task Run to reference.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskRun",
            },
          },
          "getTaskRuns": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch Task Runs",
            "docs": "Individual Task Runs provide an audit trail for all Task executions.",
            "errors": [
              "root.GetTaskRunsRequestBadRequestError",
              "root.GetTaskRunsRequestForbiddenError",
              "root.GetTaskRunsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-07-11T14:31:21Z",
                        "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                        "response": {
                          "compliance": false,
                          "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                          "match": false,
                          "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                        },
                        "run_data": {
                          "audit": {
                            "ip": "10.152.3.59",
                            "ua": "Vercel Edge Functions",
                          },
                          "submitted": {
                            "description": "brown hair, blue sweater",
                          },
                        },
                        "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetTaskRunsRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "A cursor for pagination. Use the \`next_cursor\` value from the previous response to get the next page of results.",
                  "type": "optional<string>",
                },
                "page_limit": {
                  "docs": "The maximum number of items to return per page. Defaults to \`100\` if not specified.",
                  "type": "optional<integer>",
                },
                "task_revision_id": {
                  "docs": "The specific Task Revision to reference.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetTaskRun",
            },
          },
          "runTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Run a Task",
            "docs": "Run a specified Task against provided text and/or image input. The response is controlled by the \`output_format\` of the Task. Note that a Task must be \`enabled\` to be run.",
            "errors": [
              "root.RunTaskRequestBadRequestError",
              "root.RunTaskRequestForbiddenError",
              "root.RunTaskRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "request": {
                  "task_input": {
                    "description": "brown hair, blue sweater",
                  },
                },
                "response": {
                  "body": {
                    "created": "2024-07-11T14:31:21.989219",
                    "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                    "response": {
                      "compliance": false,
                      "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                      "match": false,
                      "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                    },
                    "run_data": {
                      "audit": {
                        "ip": "10.152.3.59",
                        "ua": "Vercel Edge Functions",
                      },
                      "submitted": {
                        "description": "brown hair, blue sweater",
                      },
                    },
                    "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "task_file": "optional<file>",
                  "task_input": {
                    "docs": "The data input to the Task. This should be relevant to the \`user_prompt\` and cover any dynamic \`{...}\` parameters that are referenced in the prompt. Not required if \`image_required\` is set to \`true\` and there are no dynamic parameters in the prompt.",
                    "type": "map<string, unknown>",
                  },
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_Task_Run_Parameters",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskRun",
            },
          },
          "task_get_member": {
            "auth": true,
            "display-name": "IAM - Lookup Task Member",
            "docs": "Retrieve a specific member that has been granted direct access to the task.",
            "errors": [
              "root.TaskGetMemberRequestBadRequestError",
              "root.TaskGetMemberRequestForbiddenError",
              "root.TaskGetMemberRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "task_iam_list_members": {
            "auth": true,
            "display-name": "IAM - List Task Members",
            "docs": "Lists all members that have been granted direct access to the task.",
            "errors": [
              "root.TaskIamListMembersRequestBadRequestError",
              "root.TaskIamListMembersRequestForbiddenError",
              "root.TaskIamListMembersRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "request": {
              "name": "TaskIamListMembersRequest",
              "query-parameters": {
                "type": "optional<TaskIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "task_iam_test_permissions": {
            "auth": true,
            "display-name": "IAM - Test Task Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the task.",
            "errors": [
              "root.TaskIamTestPermissionsRequestBadRequestError",
              "root.TaskIamTestPermissionsRequestForbiddenError",
              "root.TaskIamTestPermissionsRequestNotFoundError",
              "root.TaskIamTestPermissionsRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/test",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the task.",
                    "type": "list<TaskIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "task_iam_update_member_roles": {
            "auth": true,
            "display-name": "IAM - Update Task Member",
            "docs": "Update the roles that a member holds on the task.",
            "errors": [
              "root.TaskIamUpdateMemberRolesRequestBadRequestError",
              "root.TaskIamUpdateMemberRolesRequestForbiddenError",
              "root.TaskIamUpdateMemberRolesRequestNotFoundError",
              "root.TaskIamUpdateMemberRolesRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of task roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<TaskIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of task roles to revoke from the member.",
                    "type": "optional<list<TaskIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
        },
      },
      "types": {
        "TaskCreateLlmModel": {
          "docs": "The LLM model to use for the Task.",
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
        "TaskCreateOutputFormatValue": {
          "enum": [
            "str",
            "string",
            "boolean",
            "bool",
            "int",
            "integer",
            "list",
          ],
        },
        "TaskIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "TaskIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "TaskIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "TaskIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "edit",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "run_task",
            "view",
            "view_members",
          ],
        },
        "TaskUpdateLlmModel": {
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
        "TaskUpdateOutputFormatValue": {
          "enum": [
            "str",
            "string",
            "boolean",
            "bool",
            "int",
            "integer",
            "list",
          ],
        },
      },
    },
    "user.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "userGet": {
            "auth": true,
            "display-name": "User Get",
            "docs": "Retrieve the profile of the current user.",
            "errors": [
              "root.UserGetUserGetRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "bio": "bio",
                    "email": "email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/user",
            "response": {
              "docs": "Successful Response",
              "type": "root.User",
            },
          },
          "userPost": {
            "auth": true,
            "display-name": "User Post",
            "docs": "Update the profile of the current user.",
            "errors": [
              "root.UserPostUserPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "bio": "bio",
                    "email": "email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/user",
            "request": {
              "body": {
                "properties": {
                  "bio": "optional<string>",
                  "name": "optional<string>",
                },
              },
              "headers": undefined,
              "name": "UserProfileUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.User",
            },
          },
          "userUpdateAvatar": {
            "auth": true,
            "display-name": "User Update Avatar",
            "docs": undefined,
            "errors": [
              "root.UserUpdateAvatarUserAvatarPostRequestUnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "bio": "bio",
                    "email": "email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/user/avatar",
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_user_update_avatar_user_avatar_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.User",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenErrorBody",
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceBoxCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceConfluenceCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceDropboxCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceGdriveCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceNotionCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceOnedriveCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CallbackDatasourceSharepointCallbackGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ChatGetMemberRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ChatGetMemberRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ChatGetMemberRequestForbiddenErrorBody",
      },
      "ChatGetMemberRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ChatIamListMembersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ChatIamListMembersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ChatIamListMembersRequestForbiddenErrorBody",
      },
      "ChatIamListMembersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ChatIamTestPermissionsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "ChatIamTestPermissionsRequestBadRequestErrorBody",
      },
      "ChatIamTestPermissionsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ChatIamTestPermissionsRequestForbiddenErrorBody",
      },
      "ChatIamTestPermissionsRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "ChatIamTestPermissionsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ChatIamUpdateMemberRolesRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "ChatIamUpdateMemberRolesRequestBadRequestErrorBody",
      },
      "ChatIamUpdateMemberRolesRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ChatIamUpdateMemberRolesRequestForbiddenErrorBody",
      },
      "ChatIamUpdateMemberRolesRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "ChatIamUpdateMemberRolesRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenErrorBody",
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CheckStatusOrgOrgIdProjectProjectIdScrapeRunSyncRunIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenErrorBody",
      },
      "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenErrorBody",
      },
      "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionGetMemberRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CollectionGetMemberRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionGetMemberRequestForbiddenErrorBody",
      },
      "CollectionGetMemberRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionIamListMembersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CollectionIamListMembersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionIamListMembersRequestForbiddenErrorBody",
      },
      "CollectionIamListMembersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionIamTestPermissionsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "CollectionIamTestPermissionsRequestBadRequestErrorBody",
      },
      "CollectionIamTestPermissionsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionIamTestPermissionsRequestForbiddenErrorBody",
      },
      "CollectionIamTestPermissionsRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "CollectionIamTestPermissionsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionIamUpdateMemberRolesRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "CollectionIamUpdateMemberRolesRequestBadRequestErrorBody",
      },
      "CollectionIamUpdateMemberRolesRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionIamUpdateMemberRolesRequestForbiddenErrorBody",
      },
      "CollectionIamUpdateMemberRolesRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "CollectionIamUpdateMemberRolesRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenErrorBody",
      },
      "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenErrorBody",
      },
      "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CreateChatChatPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CreateChatChatPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CreateChatChatPostRequestForbiddenErrorBody",
      },
      "CreateChatChatPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenErrorBody",
      },
      "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CreateProjectOrgOrgIdProjectPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CreateProjectOrgOrgIdProjectPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CreateProjectOrgOrgIdProjectPostRequestForbiddenErrorBody",
      },
      "CreateProjectOrgOrgIdProjectPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CreateTaskForwarderRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CreateTaskForwarderRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CreateTaskForwarderRequestForbiddenErrorBody",
      },
      "CreateTaskForwarderRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "CreateTaskRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "CreateTaskRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "CreateTaskRequestForbiddenErrorBody",
      },
      "CreateTaskRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenErrorBody",
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenErrorBody",
      },
      "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenErrorBody",
      },
      "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentEmbeddingGetOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingEmbeddingIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenErrorBody",
      },
      "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenErrorBody",
      },
      "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentGetMemberRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentGetMemberRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentGetMemberRequestForbiddenErrorBody",
      },
      "DocumentGetMemberRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentIamListMembersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentIamListMembersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentIamListMembersRequestForbiddenErrorBody",
      },
      "DocumentIamListMembersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentIamTestPermissionsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "DocumentIamTestPermissionsRequestBadRequestErrorBody",
      },
      "DocumentIamTestPermissionsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentIamTestPermissionsRequestForbiddenErrorBody",
      },
      "DocumentIamTestPermissionsRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "DocumentIamTestPermissionsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentIamUpdateMemberRolesRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "DocumentIamUpdateMemberRolesRequestBadRequestErrorBody",
      },
      "DocumentIamUpdateMemberRolesRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentIamUpdateMemberRolesRequestForbiddenErrorBody",
      },
      "DocumentIamUpdateMemberRolesRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "DocumentIamUpdateMemberRolesRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenErrorBody",
      },
      "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenErrorBody",
      },
      "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenErrorBody",
      },
      "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenErrorBody",
      },
      "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "EditTaskRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "EditTaskRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "EditTaskRequestForbiddenErrorBody",
      },
      "EditTaskRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "EnableOrgOrgIdProjectProjectIdScrapePostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "FetchOrgOrgIdProjectProjectIdScrapeStartPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenErrorBody",
      },
      "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetAllModelsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetAllModelsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetAllModelsRequestForbiddenErrorBody",
      },
      "GetAllModelsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetAllTaskForwardersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetAllTaskForwardersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetAllTaskForwardersRequestForbiddenErrorBody",
      },
      "GetAllTaskForwardersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetAllTasksRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetAllTasksRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetAllTasksRequestForbiddenErrorBody",
      },
      "GetAllTasksRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetChatChatChatIdGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetChatChatChatIdGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetChatChatChatIdGetRequestForbiddenErrorBody",
      },
      "GetChatChatChatIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetChatConfigChatChatIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetChatConfigChatChatIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetChatConfigChatChatIdConfigGetRequestForbiddenErrorBody",
      },
      "GetChatConfigChatChatIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenErrorBody",
      },
      "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenErrorBody",
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetProjectConfigOrgOrgIdProjectProjectIdConfigGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetProjectOrgOrgIdProjectProjectIdGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenErrorBody",
      },
      "GetProjectOrgOrgIdProjectProjectIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetRecentChatsForUserChatRecentGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetTaskForwarderRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetTaskForwarderRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetTaskForwarderRequestForbiddenErrorBody",
      },
      "GetTaskForwarderRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetTaskRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetTaskRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetTaskRequestForbiddenErrorBody",
      },
      "GetTaskRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetTaskRunRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetTaskRunRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetTaskRunRequestForbiddenErrorBody",
      },
      "GetTaskRunRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "GetTaskRunsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "GetTaskRunsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "GetTaskRunsRequestForbiddenErrorBody",
      },
      "GetTaskRunsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "InitialiseOrgOrgIdProjectProjectIdComposePostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenErrorBody",
      },
      "InitialiseOrgOrgIdProjectProjectIdComposePostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListAvailableGuardrailsOrgOrgIdProjectProjectIdGuardrailGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenErrorBody",
      },
      "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenErrorBody",
      },
      "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListProjectOrgOrgIdProjectGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListProjectOrgOrgIdProjectGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListProjectOrgOrgIdProjectGetRequestForbiddenErrorBody",
      },
      "ListProjectOrgOrgIdProjectGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenErrorBody",
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgCreateOrgPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenErrorBody",
      },
      "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgDomainsListOrgOrgIdDomainsGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenErrorBody",
      },
      "OrgDomainsListOrgOrgIdDomainsGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgDomainsPostOrgOrgIdDomainsPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenErrorBody",
      },
      "OrgDomainsPostOrgOrgIdDomainsPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgGetOrgOrgIdGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgGetOrgOrgIdGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgGetOrgOrgIdGetRequestForbiddenErrorBody",
      },
      "OrgGetOrgOrgIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestErrorBody",
      },
      "OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenErrorBody",
      },
      "OrgInvitesCreateOrgOrgIdInvitePostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenErrorBody",
      },
      "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgInvitesListOrgOrgIdInviteGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgInvitesListOrgOrgIdInviteGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgInvitesListOrgOrgIdInviteGetRequestForbiddenErrorBody",
      },
      "OrgInvitesListOrgOrgIdInviteGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgJoinOrgOrgIdJoinPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgJoinOrgOrgIdJoinPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgJoinOrgOrgIdJoinPostRequestForbiddenErrorBody",
      },
      "OrgJoinOrgOrgIdJoinPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgListOrgGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgUpdateAvatarOrgOrgIdAvatarPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenErrorBody",
      },
      "OrgUpdateAvatarOrgOrgIdAvatarPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrgUpdateOrgOrgIdPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrgUpdateOrgOrgIdPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrgUpdateOrgOrgIdPostRequestForbiddenErrorBody",
      },
      "OrgUpdateOrgOrgIdPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrganizationGetMemberRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrganizationGetMemberRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrganizationGetMemberRequestForbiddenErrorBody",
      },
      "OrganizationGetMemberRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrganizationIamListMembersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "OrganizationIamListMembersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrganizationIamListMembersRequestForbiddenErrorBody",
      },
      "OrganizationIamListMembersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrganizationIamTestPermissionsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "OrganizationIamTestPermissionsRequestBadRequestErrorBody",
      },
      "OrganizationIamTestPermissionsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrganizationIamTestPermissionsRequestForbiddenErrorBody",
      },
      "OrganizationIamTestPermissionsRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "OrganizationIamTestPermissionsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "OrganizationIamUpdateMemberRolesRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "OrganizationIamUpdateMemberRolesRequestBadRequestErrorBody",
      },
      "OrganizationIamUpdateMemberRolesRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "OrganizationIamUpdateMemberRolesRequestForbiddenErrorBody",
      },
      "OrganizationIamUpdateMemberRolesRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "OrganizationIamUpdateMemberRolesRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ProjectGetMemberRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ProjectGetMemberRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ProjectGetMemberRequestForbiddenErrorBody",
      },
      "ProjectGetMemberRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ProjectIamListMembersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ProjectIamListMembersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ProjectIamListMembersRequestForbiddenErrorBody",
      },
      "ProjectIamListMembersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ProjectIamTestPermissionsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "ProjectIamTestPermissionsRequestBadRequestErrorBody",
      },
      "ProjectIamTestPermissionsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ProjectIamTestPermissionsRequestForbiddenErrorBody",
      },
      "ProjectIamTestPermissionsRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "ProjectIamTestPermissionsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ProjectIamUpdateMemberRolesRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "ProjectIamUpdateMemberRolesRequestBadRequestErrorBody",
      },
      "ProjectIamUpdateMemberRolesRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ProjectIamUpdateMemberRolesRequestForbiddenErrorBody",
      },
      "ProjectIamUpdateMemberRolesRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "ProjectIamUpdateMemberRolesRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenErrorBody",
      },
      "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "QueryChatChatChatIdQueryGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "QueryChatChatChatIdQueryGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "QueryChatChatChatIdQueryGetRequestForbiddenErrorBody",
      },
      "QueryChatChatChatIdQueryGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenErrorBody",
      },
      "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenErrorBody",
      },
      "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "RunTaskRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "RunTaskRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "RunTaskRequestForbiddenErrorBody",
      },
      "RunTaskRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenErrorBody",
      },
      "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetChatConfigChatChatIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetChatConfigChatChatIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetChatConfigChatChatIdConfigPostRequestForbiddenErrorBody",
      },
      "SetChatConfigChatChatIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenErrorBody",
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenErrorBody",
      },
      "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "TaskGetMemberRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "TaskGetMemberRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "TaskGetMemberRequestForbiddenErrorBody",
      },
      "TaskGetMemberRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "TaskIamListMembersRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "TaskIamListMembersRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "TaskIamListMembersRequestForbiddenErrorBody",
      },
      "TaskIamListMembersRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "TaskIamTestPermissionsRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "TaskIamTestPermissionsRequestBadRequestErrorBody",
      },
      "TaskIamTestPermissionsRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "TaskIamTestPermissionsRequestForbiddenErrorBody",
      },
      "TaskIamTestPermissionsRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "TaskIamTestPermissionsRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "TaskIamUpdateMemberRolesRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "TaskIamUpdateMemberRolesRequestBadRequestErrorBody",
      },
      "TaskIamUpdateMemberRolesRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "TaskIamUpdateMemberRolesRequestForbiddenErrorBody",
      },
      "TaskIamUpdateMemberRolesRequestNotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "TaskIamUpdateMemberRolesRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenErrorBody",
      },
      "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenErrorBody",
      },
      "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UpdateChatChatChatIdPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "UpdateChatChatChatIdPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "UpdateChatChatChatIdPostRequestForbiddenErrorBody",
      },
      "UpdateChatChatChatIdPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UpdateProjectOrgOrgIdProjectProjectIdPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenErrorBody",
      },
      "UpdateProjectOrgOrgIdProjectProjectIdPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenErrorBody",
      },
      "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenErrorBody",
      },
      "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UpdateTaskForwarderRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "MalformedResourceIdentifierErrorResponse",
      },
      "UpdateTaskForwarderRequestForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "UpdateTaskForwarderRequestForbiddenErrorBody",
      },
      "UpdateTaskForwarderRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UserGetUserGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UserPostUserPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "UserUpdateAvatarUserAvatarPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "WebhookHydraTokenHookInternalWebhookHydraTokenHookPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "WebhookKratosSignupCheckInternalWebhookKratosSignupCheckPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "WebhookKratosSignupCommitInternalWebhookKratosSignupCommitPostRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
      "WhoamiWhoamiGetRequestUnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
    },
    "service": {
      "auth": false,
      "base-path": "",
      "endpoints": {
        "root_ping_get": {
          "auth": false,
          "display-name": "Root",
          "docs": "Root endpoint that returns a "Hello World" message.",
          "examples": [
            {
              "response": {
                "body": {
                  "key": "value",
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/ping",
          "response": {
            "docs": "Successful Response",
            "type": "unknown",
          },
        },
        "whoami_whoami_get": {
          "auth": true,
          "display-name": "Whoami",
          "docs": undefined,
          "errors": [
            "WhoamiWhoamiGetRequestUnprocessableEntityError",
          ],
          "examples": [
            {
              "response": {
                "body": {
                  "key": "value",
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/whoami",
          "response": {
            "docs": "Successful Response",
            "type": "unknown",
          },
        },
      },
    },
    "types": {
      "AsyncJobResult": {
        "docs": undefined,
        "properties": {
          "status": "string",
          "task_id": "list<string>",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "Chat": {
        "docs": undefined,
        "properties": {
          "collection_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "created": "datetime",
          "created_by_user_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "description": "optional<string>",
          "documents_have_been_modified": {
            "default": false,
            "type": "optional<boolean>",
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "last_message": "optional<datetime>",
          "summary": "optional<string>",
          "title": "optional<string>",
        },
      },
      "ChatConfig": {
        "docs": undefined,
        "properties": {
          "chat_guardrails": {
            "docs": "Conversational Guardrails can be defined to run against Chat \`input\` (i.e. the users query) or on Chat \`output\` (i.e. the LLM output)",
            "type": "optional<ConversationalGuardrails>",
          },
          "chat_system_commands": "optional<list<string>>",
          "knn": {
            "default": 5,
            "type": "optional<integer>",
          },
          "llm": {
            "default": "gpt-3.5-turbo",
            "type": "optional<Llm>",
          },
          "query_expansion": {
            "default": false,
            "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
            "type": "optional<boolean>",
          },
          "temperature": {
            "default": 0.5,
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 1,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "ChatDocument": {
        "docs": undefined,
        "properties": {
          "chunks": "integer",
          "connection_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "description": "optional<string>",
          "embedding_instances": "optional<list<ChatDocumentEmbeddingInstance>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "original_mime": "string",
          "project_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "source": "optional<ChatDocumentSource>",
          "source_meta": "optional<map<string, unknown>>",
          "strategy": "string",
          "title": "string",
        },
      },
      "ChatDocumentEmbeddingInstance": {
        "docs": undefined,
        "properties": {
          "chat_document_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "config": "optional<map<string, unknown>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "is_active": "boolean",
        },
      },
      "ChatDocumentEmbeddingRecord": {
        "docs": undefined,
        "properties": {
          "document": "string",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ChatDocumentQueryResult": {
        "docs": undefined,
        "properties": {
          "chat_document_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "score": "double",
          "text": "string",
        },
      },
      "ChatDocumentSource": {
        "enum": [
          "upload",
          "gdrive",
          "onedrive",
          "web_scrape",
          "notion",
          "confluence",
          "box",
          "dropbox",
          "sharepoint",
        ],
      },
      "ChatGetMemberRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ChatGuardrail": {
        "docs": undefined,
        "properties": {
          "description": "string",
          "id": "Id",
          "name": "string",
          "type": "Type",
        },
      },
      "ChatIamListMembersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ChatIamTestPermissionsRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "ChatIamTestPermissionsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ChatIamUpdateMemberRolesRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "MULTIPLE_ROLES_NOT_ALLOWED": "MultipleRolesNotAllowedErrorResponse",
        },
      },
      "ChatIamUpdateMemberRolesRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ChatModel": {
        "docs": undefined,
        "properties": {
          "alias": {
            "docs": "Human readable name for the LLM.",
            "type": "string",
          },
          "description": {
            "docs": "Key information about the LLM.",
            "type": "string",
          },
          "name": {
            "docs": "LLM reference name.",
            "type": "Name",
          },
          "provider": {
            "docs": "The company that produces the LLM.",
            "type": "string",
          },
          "supports_vision": {
            "default": false,
            "docs": "Whether the LLM is able to see and interpret images.",
            "type": "boolean",
          },
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "Collection": {
        "docs": undefined,
        "properties": {
          "created": "datetime",
          "embedding_instances": "optional<list<ChatDocumentEmbeddingInstance>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": "datetime",
          "project_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "summary": "optional<string>",
          "title": "string",
        },
      },
      "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionChatShow": {
        "enum": [
          "all",
          "viewable",
        ],
      },
      "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionEmbeddingUpdate": {
        "docs": undefined,
        "properties": {
          "embedding_instance_ids": "list<string>",
        },
      },
      "CollectionGetMemberRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionIamListMembersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionIamTestPermissionsRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "CollectionIamTestPermissionsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionIamUpdateMemberRolesRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "MULTIPLE_ROLES_NOT_ALLOWED": "MultipleRolesNotAllowedErrorResponse",
        },
      },
      "CollectionIamUpdateMemberRolesRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CollectionStatsResponse": {
        "docs": undefined,
        "properties": {
          "documents_by_source": "list<SourceRow>",
          "number_of_chats": "integer",
        },
      },
      "ComposeContent": {
        "docs": undefined,
        "properties": {
          "existing_content": "string",
        },
      },
      "ComposeGenerate": {
        "docs": undefined,
        "properties": {
          "structure": "list<InitialComposeSection>",
        },
      },
      "ComposeInit": {
        "docs": undefined,
        "properties": {
          "audience": "optional<string>",
          "content": "optional<string>",
          "cta": "optional<string>",
          "deny_words": "optional<string>",
          "domain": "optional<string>",
          "favourable_words": "optional<string>",
          "keywords": "optional<string>",
          "language": {
            "default": "english_british",
            "type": "optional<Language>",
          },
          "num_sections": "optional<integer>",
          "purpose": "optional<string>",
          "title": "string",
          "tone": "optional<string>",
          "topic": "optional<string>",
          "voice": "optional<string>",
          "word_count": "optional<integer>",
        },
      },
      "ComposeSectionTalkingPoint": {
        "docs": undefined,
        "properties": {
          "section_heading": "string",
        },
      },
      "ComposeSectionUpdate": {
        "docs": undefined,
        "properties": {
          "instructions": "list<string>",
          "position": "integer",
          "section_title": "string",
          "text": "optional<string>",
        },
      },
      "ConversationalGuardrails": {
        "docs": undefined,
        "properties": {
          "input": {
            "docs": "List of valid Input Conversational Guardrails to enable",
            "type": "optional<list<InputConversationalGuardrailDefinition>>",
          },
          "output": {
            "docs": "List of valid Output Conversational Guardrails to enable",
            "type": "optional<list<OutputConversationalGuardrailDefinition>>",
          },
        },
      },
      "CreateChatChatPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CreateProjectOrgOrgIdProjectPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CreateTaskForwarderRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "CreateTaskRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "Datasource": {
        "docs": undefined,
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
        },
      },
      "DatasourceConfiguration": {
        "docs": undefined,
        "properties": {
          "name": "string",
          "private": "boolean",
          "root_folder_id": "optional<string>",
        },
      },
      "DatasourceConnection": {
        "docs": undefined,
        "properties": {
          "config": "optional<map<string, unknown>>",
          "created_by": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "datasource_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "private": "optional<boolean>",
          "project_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "token": {
            "default": "",
            "type": "optional<string>",
          },
        },
      },
      "DatasourceConnectionPublic": {
        "docs": undefined,
        "properties": {
          "config": "optional<map<string, unknown>>",
          "created": "datetime",
          "datasource": "Datasource",
          "datasource_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": "datetime",
          "name": "string",
          "private": "boolean",
          "project_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "DatasourceSyncRun": {
        "docs": undefined,
        "properties": {
          "created": "datetime",
          "datasource_connection": "optional<DatasourceConnection>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": "datetime",
          "run_output": "optional<map<string, unknown>>",
          "status": {
            "default": "pending",
            "type": "optional<Status>",
          },
          "task_id": "optional<string>",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentCreateTask": {
        "docs": undefined,
        "properties": {
          "info": "optional<map<string, unknown>>",
          "state": "State",
          "task_id": "string",
        },
      },
      "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentGetMemberRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentIamListMembersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentIamTestPermissionsRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "DocumentIamTestPermissionsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentIamUpdateMemberRolesRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "MULTIPLE_ROLES_NOT_ALLOWED": "MultipleRolesNotAllowedErrorResponse",
        },
      },
      "DocumentIamUpdateMemberRolesRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentStatusResponse": {
        "docs": undefined,
        "properties": {
          "group_id": "string",
          "task_count": "integer",
          "tasks": "list<DocumentCreateTask>",
        },
      },
      "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "EditTaskRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "EmptyErrorDetails": {
        "docs": undefined,
        "properties": {},
      },
      "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetAllModelsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetAllTaskForwardersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetAllTasksRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetChatChatChatIdGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetChatConfigChatChatIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetTaskForwarderRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetTaskRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetTaskRunRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "GetTaskRunsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "HTTPValidationError": {
        "docs": undefined,
        "properties": {
          "detail": "optional<list<ValidationError>>",
        },
      },
      "HydraWebhookTokenHookSession": {
        "docs": undefined,
        "properties": {
          "client_id": "string",
          "id_token": "HydraWebhookTokenHookSessionIDTokenClaims",
        },
      },
      "HydraWebhookTokenHookSessionIDTokenClaims": {
        "docs": undefined,
        "properties": {
          "id_token_claims": "map<string, unknown>",
        },
      },
      "IAMMember": {
        "docs": undefined,
        "properties": {
          "avatar_url": {
            "docs": "If avatar of the member, if it is supported by their subject type.",
            "type": "optional<string>",
          },
          "member": {
            "docs": "The member identifier string, the format of which is '<subject_type>:<subject_id>'",
            "type": "string",
          },
          "name": {
            "docs": "The name of the member.",
            "type": "optional<string>",
          },
          "roles": {
            "docs": "A list of roles that the member holds on an entity.

Some entities, such as Organizations, may contain members that exist without any roles.",
            "type": "optional<list<string>>",
          },
          "total_subjects": {
            "default": 1,
            "docs": "The total number of subjects that the member represents, which may be a value other than \`1\` if the member is not a User.",
            "type": "optional<integer>",
          },
        },
      },
      "IAMObjectErrorDetails": {
        "docs": undefined,
        "properties": {
          "id": "optional<string>",
          "type": "string",
        },
      },
      "IAMPermissionTest": {
        "docs": undefined,
        "properties": {
          "member": "optional<string>",
          "permissions": "list<string>",
        },
      },
      "Id": {
        "enum": [
          "source_validation",
          "prompt_policy",
          "pii_policy",
        ],
      },
      "Identity": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "map<string, unknown>",
          "KratosIdentity",
        ],
      },
      "InitialComposeSection": {
        "docs": undefined,
        "properties": {
          "ideas": "optional<list<string>>",
          "position": "integer",
          "title": "string",
        },
      },
      "InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "InputConversationalGuardrailDefinition": {
        "docs": undefined,
        "properties": {
          "name": "Name",
        },
      },
      "InvalidMemberErrorDetails": {
        "docs": undefined,
        "properties": {
          "resource": "optional<IAMObjectErrorDetails>",
          "subject": "optional<IAMObjectErrorDetails>",
        },
      },
      "InvalidMemberErrorResponse": {
        "docs": undefined,
        "properties": {
          "invalidMemberError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "InvalidMemberErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "InvalidRoleErrorDetails": {
        "docs": undefined,
        "properties": {
          "resource": "optional<IAMObjectErrorDetails>",
          "role": "string",
        },
      },
      "InvalidRoleErrorResponse": {
        "docs": undefined,
        "properties": {
          "invalidRoleError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "InvalidRoleErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "InvalidSubjectTypeErrorDetails": {
        "docs": undefined,
        "properties": {
          "subject": "optional<IAMObjectErrorDetails>",
        },
      },
      "InvalidSubjectTypeErrorResponse": {
        "docs": undefined,
        "properties": {
          "invalidSubjectTypeError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "InvalidSubjectTypeErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "KratosIdentity": {
        "docs": undefined,
        "extra-properties": true,
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "traits": "optional<KratosIdentityTraits>",
        },
      },
      "KratosIdentityTraits": {
        "docs": undefined,
        "extra-properties": true,
        "properties": {
          "avatar_url": "optional<string>",
          "email": {
            "type": "optional<string>",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "optional<string>",
          "org_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "project_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "sso_email_verified": "optional<boolean>",
        },
      },
      "KratosWebhook": {
        "docs": undefined,
        "properties": {
          "bio": "optional<string>",
          "ctx": "optional<map<string, unknown>>",
          "email": {
            "type": "optional<string>",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "flow_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "flow_type": "optional<string>",
          "identity": "optional<KratosIdentity>",
          "identity_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "KratosWebhookDetailedMessage": {
        "docs": "Sourced from detailedMessage in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
        "properties": {
          "context": "optional<unknown>",
          "id": "integer",
          "text": "string",
          "type": "Type",
        },
      },
      "KratosWebhookErrorMessage": {
        "docs": "Sourced from errorMessage in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
        "properties": {
          "instance_ptr": "string",
          "messages": "optional<list<KratosWebhookDetailedMessage>>",
        },
      },
      "KratosWebhookResponse": {
        "docs": "Sourced from rawHookResponse in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
        "properties": {
          "identity": "optional<Identity>",
          "messages": "optional<list<KratosWebhookErrorMessage>>",
        },
      },
      "Language": {
        "default": "english_british",
        "enum": [
          "english_british",
          "english_american",
          "french",
          "chinese",
          "spanish",
          "korean",
          "italian",
          "german",
        ],
      },
      "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListProjectOrgOrgIdProjectGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "Llm": {
        "default": "gpt-3.5-turbo",
        "enum": [
          {
            "name": "Gpt4O",
            "value": "gpt-4o",
          },
          {
            "name": "Gpt35Turbo",
            "value": "gpt-3.5-turbo",
          },
          {
            "name": "Gpt4",
            "value": "gpt-4",
          },
          {
            "name": "Gpt4Turbo",
            "value": "gpt-4-turbo",
          },
          {
            "name": "Gpt4TurboPreview",
            "value": "gpt-4-turbo-preview",
          },
          {
            "name": "Gpt41106Preview",
            "value": "gpt-4-1106-preview",
          },
          {
            "name": "Claude35Sonnet20240620",
            "value": "claude-3-5-sonnet-20240620",
          },
          {
            "name": "Claude3Haiku20240307",
            "value": "claude-3-haiku-20240307",
          },
          {
            "name": "Claude3Sonnet20240229",
            "value": "claude-3-sonnet-20240229",
          },
          {
            "name": "Claude3Opus20240229",
            "value": "claude-3-opus-20240229",
          },
          {
            "name": "Gemini15ProLatest",
            "value": "gemini-1.5-pro-latest",
          },
          {
            "name": "GeminiPro",
            "value": "gemini-pro",
          },
        ],
      },
      "MalformedResourceIdentifierErrorDetails": {
        "docs": undefined,
        "properties": {
          "expected_format": "string",
          "field": "string",
          "value": "unknown",
        },
      },
      "MalformedResourceIdentifierErrorResponse": {
        "docs": undefined,
        "properties": {
          "malformedResourceIdentifierError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "MalformedResourceIdentifierErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "MissingAuthenticationErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "missingAuthenticationError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "EmptyErrorDetails",
          },
        },
      },
      "MultipleRolesNotAllowedErrorDetails": {
        "docs": undefined,
        "properties": {
          "resource": "optional<IAMObjectErrorDetails>",
          "roles": "list<string>",
        },
      },
      "MultipleRolesNotAllowedErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "multipleRolesNotAllowedError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "MultipleRolesNotAllowedErrorDetails",
          },
        },
      },
      "Name": {
        "enum": [
          "prompt_policy",
          "pii_policy",
        ],
      },
      "OAuthClientCreateResponse": {
        "docs": undefined,
        "properties": {
          "client_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "client_secret": "string",
          "name": "string",
          "redirect_uris": "list<string>",
          "scope": {
            "default": "",
            "type": "optional<string>",
          },
        },
      },
      "OAuthClientProfile": {
        "enum": [
          "rightbrain_docs",
          "rightbrain_tasks",
          "user_defined",
          "zendesk",
        ],
      },
      "Object": {
        "docs": undefined,
        "properties": {
          "createdTime": "optional<string>",
          "id": "string",
          "mimeType": "optional<string>",
          "modifiedTime": "optional<string>",
          "name": "string",
          "size": "optional<string>",
          "synced": {
            "default": false,
            "type": "optional<boolean>",
          },
          "tags": "optional<list<ObjectTags>>",
          "type": "optional<ObjectType>",
        },
      },
      "ObjectList": "list<Object>",
      "ObjectTags": {
        "enum": [
          "no_size",
          "site",
        ],
      },
      "ObjectType": {
        "enum": [
          "file",
          "dir",
        ],
      },
      "Org": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "contact_email": {
            "type": "string",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
        },
      },
      "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgGetOrgOrgIdGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgInviteShow": {
        "enum": [
          "all",
          "pending",
          "accepted",
        ],
      },
      "OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "ORGANIZATION_INVITE_ALREADY_EXISTS": "OrganizationInviteAlreadyExistsErrorResponse",
          "ORGANIZATION_MEMBER_ALREADY_EXISTS": "OrganizationMemberAlreadyExistsErrorResponse",
        },
      },
      "OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgInvitesListOrgOrgIdInviteGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgJoinOrgOrgIdJoinPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgMembership": {
        "enum": [
          "active",
          "joinable",
          "joinable_by_domain",
          "joinable_by_invite",
        ],
      },
      "OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrgUpdateOrgOrgIdPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrganizationDomain": {
        "docs": undefined,
        "properties": {
          "domain": "string",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "status": "Status",
        },
      },
      "OrganizationGetMemberRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrganizationIamListMembersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrganizationIamTestPermissionsRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "OrganizationIamTestPermissionsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrganizationIamUpdateMemberRolesRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "MULTIPLE_ROLES_NOT_ALLOWED": "MultipleRolesNotAllowedErrorResponse",
        },
      },
      "OrganizationIamUpdateMemberRolesRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "OrganizationInvite": {
        "docs": undefined,
        "properties": {
          "email_address": {
            "type": "string",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "roles": "optional<list<string>>",
        },
      },
      "OrganizationInviteAlreadyExistsErrorDetails": {
        "docs": undefined,
        "properties": {
          "email_address": "string",
          "organization_id": "string",
        },
      },
      "OrganizationInviteAlreadyExistsErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "organizationInviteAlreadyExistsError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "OrganizationInviteAlreadyExistsErrorDetails",
          },
        },
      },
      "OrganizationMemberAlreadyExistsErrorDetails": {
        "docs": undefined,
        "properties": {
          "member_id": "string",
          "organization_id": "string",
        },
      },
      "OrganizationMemberAlreadyExistsErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "organizationMemberAlreadyExistsError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "OrganizationMemberAlreadyExistsErrorDetails",
          },
        },
      },
      "OutputConversationalGuardrailDefinition": {
        "docs": undefined,
        "properties": {
          "name": "literal<"source_validation">",
        },
      },
      "PaginatedResultSetChat": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Chat>",
          },
        },
      },
      "PaginatedResultSetChatDocument": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<ChatDocument>",
          },
        },
      },
      "PaginatedResultSetChatDocumentEmbeddingRecord": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<ChatDocumentEmbeddingRecord>",
          },
        },
      },
      "PaginatedResultSetCollection": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Collection>",
          },
        },
      },
      "PaginatedResultSetDatasourceSyncRun": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<DatasourceSyncRun>",
          },
        },
      },
      "PaginatedResultSetIamMember": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<IAMMember>",
          },
        },
      },
      "PaginatedResultSetOrganizationDomain": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<OrganizationDomain>",
          },
        },
      },
      "PaginatedResultSetOrganizationInvite": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<OrganizationInvite>",
          },
        },
      },
      "PaginatedResultSetProject": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Project>",
          },
        },
      },
      "PaginatedResultSetTask": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Task>",
          },
        },
      },
      "PaginatedResultSetTaskForwarder": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<TaskForwarder>",
          },
        },
      },
      "PaginatedResultSetTaskRun": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<TaskRun>",
          },
        },
      },
      "PaginationDetails": {
        "docs": undefined,
        "properties": {
          "has_next": {
            "docs": "Indicates whether there are more results available in the next page.",
            "type": "optional<boolean>",
          },
          "next_cursor": {
            "docs": "A token used to retrieve the next page of results. If \`null\`, there are no more results.",
            "type": "optional<string>",
          },
          "page_limit": {
            "docs": "The maximum number of items returned per page.",
            "type": "optional<integer>",
          },
        },
      },
      "PermissionCheckFailedErrorDetails": {
        "docs": undefined,
        "properties": {
          "permission": "string",
          "resource": "optional<IAMObjectErrorDetails>",
          "subject": "optional<IAMObjectErrorDetails>",
        },
      },
      "PermissionCheckFailedErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "permissionCheckFailedError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "PermissionCheckFailedErrorDetails",
          },
        },
      },
      "Project": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
          "org_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "tasks_oauth_client_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ProjectConfig": {
        "docs": undefined,
        "properties": {
          "chat_guardrails": "optional<ConversationalGuardrails>",
          "chat_system_commands": "optional<list<string>>",
          "knn": {
            "default": 4,
            "type": "optional<integer>",
          },
          "llm": {
            "default": "gpt-3.5-turbo",
            "type": "optional<Llm>",
          },
          "query_expansion": {
            "default": false,
            "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
            "type": "optional<boolean>",
          },
          "temperature": {
            "default": 0.5,
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 1,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "ProjectGetMemberRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ProjectIamListMembersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ProjectIamTestPermissionsRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "ProjectIamTestPermissionsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ProjectIamUpdateMemberRolesRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "MULTIPLE_ROLES_NOT_ALLOWED": "MultipleRolesNotAllowedErrorResponse",
        },
      },
      "ProjectIamUpdateMemberRolesRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "ProjectWithDatasources": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "datasource_connections": "optional<list<DatasourceConnectionPublic>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
          "org_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "tasks_oauth_client_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "QueryChatChatChatIdQueryGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "RunTaskRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetChatConfigChatChatIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "Source": {
        "enum": [
          "upload",
          "gdrive",
          "onedrive",
          "web_scrape",
          "notion",
          "confluence",
          "box",
          "dropbox",
          "sharepoint",
        ],
      },
      "SourceRow": {
        "docs": undefined,
        "properties": {
          "count": "integer",
          "source": "Source",
        },
      },
      "State": {
        "enum": [
          "PENDING",
          "STARTED",
          "SUCCESS",
          "FAILURE",
          "RETRY",
          "PROGRESS",
        ],
      },
      "Status": {
        "enum": [
          "unverified",
          "verified",
        ],
      },
      "Task": {
        "docs": undefined,
        "properties": {
          "created": {
            "docs": "When the Task was created.",
            "type": "datetime",
          },
          "description": {
            "docs": "A longer description of the Task for internal reference.",
            "type": "optional<string>",
          },
          "enabled": {
            "docs": "When \`true\` the Task is active and callable. \`false\` denotes the Task is not yet operational.",
            "type": "boolean",
          },
          "id": {
            "docs": "The unique identifier of the Task.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": {
            "docs": "When the Task was last updated.",
            "type": "datetime",
          },
          "name": {
            "docs": "A name or reference for the Task.",
            "type": "string",
          },
          "project_id": {
            "docs": "The Project that the Task belongs to.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "revisions": {
            "docs": "Each update to a Task results in a new Revision being created. Task Revisions are a powerful concept that can be used to assist with A/B testing, comparing responses from different LLM's, etc.",
            "type": "list<TaskRevision>",
          },
        },
      },
      "TaskForwarder": {
        "docs": undefined,
        "properties": {
          "config": {
            "docs": "Configuration parameters for the Task Forwarder such as a \`destination\` URL.",
            "type": "optional<TaskForwarderConfig>",
          },
          "config_sensitive": {
            "docs": "Sensitive parameters for the Task Forwarder such as a \`signing_key\`.",
            "type": "optional<TaskForwarderSensitiveConfig>",
          },
          "created": {
            "docs": "When the Task Forwarder was created.",
            "type": "datetime",
          },
          "description": {
            "docs": "Additional details about the Task Forwarder's purpose or configuration.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The unique identifier of the Task Forwarder.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": {
            "docs": "When the Task Forwarder was last updated.",
            "type": "datetime",
          },
          "name": {
            "docs": "A descriptive name for the Task Forwarder.",
            "type": "string",
          },
          "project_id": {
            "docs": "The Project that the Task Forwarder belongs to.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "TaskForwarderConfig": {
        "docs": undefined,
        "properties": {
          "destination_url": {
            "docs": "The URL where Task Run result will be forwarded. Must be a valid HTTPS URL.",
            "type": "string",
          },
        },
      },
      "TaskForwarderSensitiveConfig": {
        "docs": undefined,
        "properties": {
          "signing_key": {
            "docs": "A secret key used to sign the forwarded data for verification purposes.",
            "type": "string",
          },
        },
      },
      "TaskGetMemberRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "TaskIamListMembersRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "TaskIamTestPermissionsRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "TaskIamTestPermissionsRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "TaskIamUpdateMemberRolesRequestBadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
          "MULTIPLE_ROLES_NOT_ALLOWED": "MultipleRolesNotAllowedErrorResponse",
        },
      },
      "TaskIamUpdateMemberRolesRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "TaskLLMConfig": {
        "docs": undefined,
        "properties": {
          "temperature": {
            "default": 0.2,
            "docs": "Controls randomness in the output. Lower values make the output more focused and deterministic, while higher values make it more creative and diverse.",
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 1,
              "min": 0,
              "multipleOf": 0.1,
            },
          },
        },
      },
      "TaskRAG": {
        "docs": undefined,
        "properties": {
          "collection_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "rag_param": "string",
        },
      },
      "TaskRevision": {
        "docs": undefined,
        "properties": {
          "active": {
            "default": false,
            "docs": "When \`true\` the Revision is the currently active version and will be activated when the Task Run is executed.",
            "type": "optional<boolean>",
          },
          "created": {
            "docs": "When the Task was created.",
            "type": "datetime",
          },
          "id": {
            "docs": "The unique identifier of the Revision.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "image_required": {
            "default": false,
            "docs": "When \`true\` it requires an image to be sent in the Task Run request.",
            "type": "optional<boolean>",
          },
          "llm_config": {
            "docs": "Specific configuration parameters for the LLM model.",
            "type": "optional<TaskLLMConfig>",
          },
          "llm_model": {
            "docs": "The LLM model to use for the Task.",
            "type": "TaskRevisionLlmModel",
          },
          "modified": {
            "docs": "When the Task was last updated.",
            "type": "datetime",
          },
          "output_format": {
            "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with \`type\` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional \`description\` can be passed to provide it with additional context.",
            "type": "map<string, TaskRevisionOutputFormatValue>",
          },
          "rag": {
            "audiences": [
              "paid",
            ],
            "availability": "pre-release",
            "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
            "type": "optional<TaskRAG>",
          },
          "system_prompt": "unknown",
          "task_forwarder_id": {
            "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "user_prompt": "unknown",
        },
      },
      "TaskRevisionLlmModel": {
        "docs": "The LLM model to use for the Task.",
        "enum": [
          {
            "name": "Gpt4O",
            "value": "gpt-4o",
          },
          {
            "name": "Gpt35Turbo",
            "value": "gpt-3.5-turbo",
          },
          {
            "name": "Gpt4",
            "value": "gpt-4",
          },
          {
            "name": "Gpt4Turbo",
            "value": "gpt-4-turbo",
          },
          {
            "name": "Gpt4TurboPreview",
            "value": "gpt-4-turbo-preview",
          },
          {
            "name": "Gpt41106Preview",
            "value": "gpt-4-1106-preview",
          },
          {
            "name": "Claude35Sonnet20240620",
            "value": "claude-3-5-sonnet-20240620",
          },
          {
            "name": "Claude3Haiku20240307",
            "value": "claude-3-haiku-20240307",
          },
          {
            "name": "Claude3Sonnet20240229",
            "value": "claude-3-sonnet-20240229",
          },
          {
            "name": "Claude3Opus20240229",
            "value": "claude-3-opus-20240229",
          },
          {
            "name": "Gemini15ProLatest",
            "value": "gemini-1.5-pro-latest",
          },
          {
            "name": "GeminiPro",
            "value": "gemini-pro",
          },
        ],
      },
      "TaskRevisionOutputFormatValue": {
        "enum": [
          "str",
          "string",
          "boolean",
          "bool",
          "int",
          "integer",
          "list",
        ],
      },
      "TaskRun": {
        "docs": undefined,
        "properties": {
          "created": {
            "docs": "The timestamp when the Task Run was created.",
            "type": "datetime",
          },
          "id": {
            "docs": "The unique identifier of the Task Run.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "response": {
            "docs": "The structured response from the Task execution.",
            "type": "map<string, unknown>",
          },
          "run_data": {
            "docs": "Additional data about the Task run, including audit information and submitted input.",
            "type": "map<string, unknown>",
          },
          "task_revision_id": {
            "docs": "The unique identifier of the Task Revision associated with this run.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "Type": {
        "enum": [
          "info",
          "error",
          "success",
          "validation",
        ],
      },
      "UpdateChatChatChatIdPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "UpdateTaskForwarderRequestForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "User": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "bio": "optional<string>",
          "email": {
            "type": "string",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "optional<string>",
        },
      },
      "ValidationError": {
        "docs": undefined,
        "properties": {
          "loc": "list<ValidationErrorLocItem>",
          "msg": "string",
          "type": "string",
        },
      },
      "ValidationErrorLocItem": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          "integer",
        ],
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerAuthScheme",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
    },
    "display-name": "brain core api",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`rightbrain rightbrain simple 1`] = `
{
  "definitionFiles": {
    "chat.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createChat": {
            "auth": true,
            "display-name": "Create Chat",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "collection_id": "collection_id",
                },
                "response": {
                  "body": {
                    "collection_id": "collection_id",
                    "created": "2024-01-15T09:30:00Z",
                    "created_by_user_id": "created_by_user_id",
                    "description": "description",
                    "documents_have_been_modified": true,
                    "id": "id",
                    "last_message": "2024-01-15T09:30:00Z",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat",
            "request": {
              "body": {
                "properties": {
                  "collection_id": {
                    "type": "string",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "description": "optional<string>",
                  "summary": "optional<string>",
                  "title": "optional<string>",
                },
              },
              "headers": undefined,
              "name": "ChatCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Chat",
            },
          },
          "getChat": {
            "auth": true,
            "display-name": "Get Chat",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "response": {
                  "body": {
                    "collection_id": "collection_id",
                    "created": "2024-01-15T09:30:00Z",
                    "created_by_user_id": "created_by_user_id",
                    "description": "description",
                    "documents_have_been_modified": true,
                    "id": "id",
                    "last_message": "2024-01-15T09:30:00Z",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}",
            "path-parameters": {
              "chat_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Chat",
            },
          },
          "getChatConfig": {
            "auth": true,
            "display-name": "Get Chat Config",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/config",
            "path-parameters": {
              "chat_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatConfig",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Chat Member",
            "docs": "Retrieve a specific member that has been granted direct access to the chat.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                  "member": "member",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/members/{member}",
            "path-parameters": {
              "chat_id": "string",
              "member": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "getRecentChatsForUser": {
            "auth": true,
            "display-name": "Get Recent Chats For User",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "collection_id": "collection_id",
                      "created": "2024-01-15T09:30:00Z",
                      "created_by_user_id": "created_by_user_id",
                      "description": "description",
                      "documents_have_been_modified": true,
                      "id": "id",
                      "last_message": "2024-01-15T09:30:00Z",
                      "summary": "summary",
                      "title": "title",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/recent",
            "request": {
              "name": "GetRecentChatsForUserChatRecentGetRequest",
              "query-parameters": {
                "project_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.Chat>",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Chat Members",
            "docs": "Lists all members that have been granted direct access to the chat.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/members",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "name": "ChatIamListMembersRequest",
              "query-parameters": {
                "type": "optional<ChatIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Chat Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the chat.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/test",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the chat.",
                    "type": "list<ChatIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChatIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Chat Member",
            "docs": "Update the roles that a member holds on the chat.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                  "member": "member",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}/iam/members/{member}",
            "path-parameters": {
              "chat_id": "string",
              "member": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of chat roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<ChatIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of chat roles to revoke from the member.",
                    "type": "optional<list<ChatIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChatIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "queryChat": {
            "auth": true,
            "display-name": "Query Chat",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "query-parameters": {
                  "query": "query",
                },
                "response": {
                  "body": [
                    {
                      "chat_document_id": "chat_document_id",
                      "score": 1.1,
                      "text": "text",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/chat/{chat_id}/query",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "name": "QueryChatChatChatIdQueryGetRequest",
              "query-parameters": {
                "query": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatDocumentQueryResult>",
            },
          },
          "setChatConfig": {
            "auth": true,
            "display-name": "Set Chat Config",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}/config",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "chat_guardrails": {
                    "docs": "Conversational Guardrails can be defined to run against Chat \`input\` (i.e. the users query) or on Chat \`output\` (i.e. the LLM output)",
                    "type": "optional<root.ConversationalGuardrails>",
                  },
                  "chat_system_commands": "optional<list<string>>",
                  "knn": {
                    "default": 5,
                    "type": "optional<integer>",
                  },
                  "llm": {
                    "default": "gpt-3.5-turbo",
                    "type": "optional<Llm>",
                  },
                  "query_expansion": {
                    "default": false,
                    "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                    "type": "optional<boolean>",
                  },
                  "temperature": {
                    "default": 0.5,
                    "type": "optional<double>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1,
                      "min": 0,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ChatConfig",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatConfig",
            },
          },
          "updateChat": {
            "auth": true,
            "display-name": "Update Chat",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "chat_id": "chat_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "collection_id": "collection_id",
                    "created": "2024-01-15T09:30:00Z",
                    "created_by_user_id": "created_by_user_id",
                    "description": "description",
                    "documents_have_been_modified": true,
                    "id": "id",
                    "last_message": "2024-01-15T09:30:00Z",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/chat/{chat_id}",
            "path-parameters": {
              "chat_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "ChatUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Chat",
            },
          },
        },
      },
      "types": {
        "ChatIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "ChatIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "ChatIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "ChatIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "edit",
            "query",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
        "Llm": {
          "default": "gpt-3.5-turbo",
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
      },
    },
    "collection.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "collectionAdd": {
            "auth": true,
            "display-name": "Collection Add",
            "docs": "Add an embedding instance to the collection",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "embedding_instance_ids": [
                    "embedding_instance_ids",
                  ],
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/add",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.CollectionEmbeddingUpdate",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "collectionEdit": {
            "auth": true,
            "display-name": "Collection Edit",
            "docs": "Edit collection details",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "CollectionUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "collectionRemove": {
            "auth": true,
            "display-name": "Collection Remove",
            "docs": "Remove an embedding instance from the collection",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "embedding_instance_ids": [
                    "embedding_instance_ids",
                  ],
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/remove",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.CollectionEmbeddingUpdate",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "collectionStats": {
            "auth": true,
            "display-name": "Collection Stats",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "documents_by_source": [
                      {
                        "count": 1,
                        "source": "upload",
                      },
                    ],
                    "number_of_chats": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/stats",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.CollectionStatsResponse",
            },
          },
          "createCollection": {
            "auth": true,
            "display-name": "Create Collection",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "document_embedding_instance_ids": "optional<list<string>>",
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "CollectionCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "getCollection": {
            "auth": true,
            "display-name": "Get Collection",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "summary": "summary",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Collection",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Collection Member",
            "docs": "Retrieve a specific member that has been granted direct access to the collection.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}",
            "path-parameters": {
              "collection_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Collection Members",
            "docs": "Lists all members that have been granted direct access to the collection.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CollectionIamListMembersRequest",
              "query-parameters": {
                "type": "optional<CollectionIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Collection Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the collection.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "permissions": [
                    "add_document",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/test",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the collection.",
                    "type": "list<CollectionIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "CollectionIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Collection Member",
            "docs": "Update the roles that a member holds on the collection.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}",
            "path-parameters": {
              "collection_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of collection roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<CollectionIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of collection roles to revoke from the member.",
                    "type": "optional<list<CollectionIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "CollectionIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "listChats": {
            "auth": true,
            "display-name": "List Chats",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "collection_id": "collection_id",
                        "created": "2024-01-15T09:30:00Z",
                        "created_by_user_id": "created_by_user_id",
                        "description": "description",
                        "documents_have_been_modified": true,
                        "id": "id",
                        "last_message": "2024-01-15T09:30:00Z",
                        "summary": "summary",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/chat",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "show": "optional<root.CollectionChatShow>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetChat",
            },
          },
          "listCollections": {
            "auth": true,
            "display-name": "List Collections",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "embedding_instances": [
                          {
                            "chat_document_id": "chat_document_id",
                            "id": "id",
                            "is_active": true,
                          },
                        ],
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "project_id": "project_id",
                        "summary": "summary",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "title": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetCollection",
            },
          },
          "queryCollection": {
            "auth": true,
            "display-name": "Query Collection",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "query": "query",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/query",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "query": "string",
                },
              },
              "headers": undefined,
              "name": "CollectionQuery",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "updateSummary": {
            "auth": true,
            "display-name": "Update Summary",
            "docs": "Generate and update the summary for a collection",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "collection_id": "collection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "status": "status",
                    "task_id": [
                      "task_id",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/update_summary",
            "path-parameters": {
              "collection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.AsyncJobResult",
            },
          },
        },
      },
      "types": {
        "CollectionIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "CollectionIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "CollectionIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "CollectionIamPermissionTestPermissionsItem": {
          "enum": [
            "add_document",
            "add_editor",
            "add_member",
            "add_owner",
            "create_chat",
            "edit",
            "list_chats",
            "query",
            "remove_document",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
      },
    },
    "compose.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "generate": {
            "auth": true,
            "display-name": "Generate",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "compose": {
                    "structure": [
                      {
                        "position": 1,
                        "title": "title",
                      },
                    ],
                  },
                  "context": {
                    "title": "title",
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/generate",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "compose": "root.ComposeGenerate",
                  "context": "root.ComposeInit",
                },
              },
              "headers": undefined,
              "name": "BodyGenerateOrgOrgIdProjectProjectIdComposeGeneratePost",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "initialise": {
            "auth": true,
            "display-name": "Initialise",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.ComposeInit",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "sectionTalkingPoints": {
            "auth": true,
            "display-name": "Section Talking Points",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "context": {
                    "title": "title",
                  },
                  "existing_content": {
                    "existing_content": "existing_content",
                  },
                  "update_instruction": {
                    "section_heading": "section_heading",
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/section_talking_points",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "context": "root.ComposeInit",
                  "existing_content": "root.ComposeContent",
                  "update_instruction": "root.ComposeSectionTalkingPoint",
                },
              },
              "headers": undefined,
              "name": "BodySectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPost",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "topic": {
            "auth": true,
            "display-name": "Topic",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/topic",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "category": {
                    "default": "blog",
                    "type": "optional<string>",
                  },
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "ComposeTopicPoint",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "updateSection": {
            "auth": true,
            "display-name": "Update Section",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "context": {
                    "title": "title",
                  },
                  "existing_content": {
                    "existing_content": "existing_content",
                  },
                  "update_instruction": {
                    "instructions": [
                      "instructions",
                    ],
                    "position": 1,
                    "section_title": "section_title",
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/compose/update_section",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "context": "root.ComposeInit",
                  "existing_content": "root.ComposeContent",
                  "update_instruction": "root.ComposeSectionUpdate",
                },
              },
              "headers": undefined,
              "name": "BodyUpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPost",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceBox.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/box/callback",
            "request": {
              "name": "CallbackDatasourceBoxCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceConfluence.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/confluence/callback",
            "request": {
              "name": "CallbackDatasourceConfluenceCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceDropbox.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/dropbox/callback",
            "request": {
              "name": "CallbackDatasourceDropboxCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceGdrive.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/gdrive/callback",
            "request": {
              "name": "CallbackDatasourceGdriveCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceNotion.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/notion/callback",
            "request": {
              "name": "CallbackDatasourceNotionCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceOnedrive.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/onedrive/callback",
            "request": {
              "name": "CallbackDatasourceOnedriveCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "datasourceSharepoint.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "authorize": {
            "auth": true,
            "display-name": "Authorize",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/authorize",
            "path-parameters": {
              "connection_id": "optional<string>",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequest",
              "query-parameters": {
                "redirect_to": "optional<string>",
              },
            },
          },
          "callback": {
            "auth": true,
            "display-name": "Callback",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/datasource/sharepoint/callback",
            "request": {
              "name": "CallbackDatasourceSharepointCallbackGetRequest",
              "query-parameters": {
                "code": "optional<string>",
                "state": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "checkStatus": {
            "auth": true,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/run",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequest",
              "query-parameters": {
                "sync_run_id": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "delete": {
            "auth": true,
            "display-name": "Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Fetch",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/fetch",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "getConfiguration": {
            "auth": true,
            "display-name": "Get Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "name": "name",
                    "private": true,
                    "root_folder_id": "root_folder_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceConfiguration",
            },
          },
          "listFiles": {
            "auth": true,
            "display-name": "List Files",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "createdTime": "createdTime",
                      "id": "id",
                      "mimeType": "mimeType",
                      "modifiedTime": "modifiedTime",
                      "name": "name",
                      "size": "size",
                      "synced": true,
                      "tags": [
                        "no_size",
                      ],
                      "type": "file",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/list-files",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequest",
              "query-parameters": {
                "parent_id": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ObjectList",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/runs",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
          "setConfiguration": {
            "auth": true,
            "display-name": "Set Configuration",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "connection_id": "connection_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "name": "name",
                  "private": true,
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config",
            "path-parameters": {
              "connection_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": "root.DatasourceConfiguration",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
        },
      },
    },
    "document.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "documentCreate": {
            "auth": true,
            "display-name": "Document Create",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "data": "data",
                },
                "response": {
                  "body": {
                    "group_id": "group_id",
                    "task_count": 1,
                    "tasks": [
                      {
                        "info": {
                          "key": "value",
                        },
                        "state": "PENDING",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "data": "string",
                  "files": "optional<list<file>>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_document_create_org__org_id__project__project_id__document_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DocumentStatusResponse",
            },
          },
          "documentDelete": {
            "auth": true,
            "display-name": "Document Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "documentEmbeddingGet": {
            "auth": false,
            "display-name": "Document Embedding Get",
            "docs": "Fetch an individual embedding record by its ID. Useful for examining the source submitted to an LLM",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "embedding_id": "embedding_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "document": "document",
                    "id": "id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/embedding/{embedding_id}",
            "path-parameters": {
              "document_id": "string",
              "embedding_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatDocumentEmbeddingRecord",
            },
          },
          "documentEmbeddingQuery": {
            "auth": true,
            "display-name": "Document Embedding Query",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "document": "document",
                        "id": "id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/embeddings",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetChatDocumentEmbeddingRecord",
            },
          },
          "documentFetch": {
            "auth": true,
            "display-name": "Document Fetch",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "chunks": 1,
                    "connection_id": "connection_id",
                    "description": "description",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "original_mime": "original_mime",
                    "project_id": "project_id",
                    "source": "upload",
                    "source_meta": {
                      "key": "value",
                    },
                    "strategy": "strategy",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatDocument",
            },
          },
          "documentList": {
            "auth": true,
            "display-name": "Document List",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "chunks": 1,
                        "connection_id": "connection_id",
                        "description": "description",
                        "embedding_instances": [
                          {
                            "chat_document_id": "chat_document_id",
                            "id": "id",
                            "is_active": true,
                          },
                        ],
                        "id": "id",
                        "original_mime": "original_mime",
                        "project_id": "project_id",
                        "source": "upload",
                        "source_meta": {
                          "key": "value",
                        },
                        "strategy": "strategy",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequest",
              "query-parameters": {
                "collection_id": "optional<string>",
                "connection_id": "optional<string>",
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "source": "optional<DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource>",
                "strategy": "optional<string>",
                "title": "optional<string>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetChatDocument",
            },
          },
          "documentQuery": {
            "auth": true,
            "display-name": "Document Query",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "query-parameters": {
                  "query": "query",
                },
                "response": {
                  "body": [
                    {
                      "chat_document_id": "chat_document_id",
                      "score": 1.1,
                      "text": "text",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/query",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequest",
              "query-parameters": {
                "query": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatDocumentQueryResult>",
            },
          },
          "documentUpdate": {
            "auth": true,
            "display-name": "Document Update",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "title": "title",
                },
                "response": {
                  "body": {
                    "chunks": 1,
                    "connection_id": "connection_id",
                    "description": "description",
                    "embedding_instances": [
                      {
                        "chat_document_id": "chat_document_id",
                        "config": {
                          "key": "value",
                        },
                        "id": "id",
                        "is_active": true,
                      },
                    ],
                    "id": "id",
                    "original_mime": "original_mime",
                    "project_id": "project_id",
                    "source": "upload",
                    "source_meta": {
                      "key": "value",
                    },
                    "strategy": "strategy",
                    "title": "title",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "description": "optional<string>",
                  "title": "string",
                },
              },
              "headers": undefined,
              "name": "ChatDocumentUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ChatDocument",
            },
          },
          "documentUpload": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Document Upload",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "data": "data",
                },
                "response": {
                  "body": [
                    {
                      "chunks": 1,
                      "connection_id": "connection_id",
                      "description": "description",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "original_mime": "original_mime",
                      "project_id": "project_id",
                      "source": "upload",
                      "source_meta": {
                        "key": "value",
                      },
                      "strategy": "strategy",
                      "title": "title",
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/upload",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "data": "string",
                  "files": "optional<list<file>>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_document_upload_org__org_id__project__project_id__document_upload_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatDocument>",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Document Member",
            "docs": "Retrieve a specific member that has been granted direct access to the document.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}",
            "path-parameters": {
              "document_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Document Members",
            "docs": "Lists all members that have been granted direct access to the document.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "DocumentIamListMembersRequest",
              "query-parameters": {
                "type": "optional<DocumentIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Document Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the document.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/test",
            "path-parameters": {
              "document_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the document.",
                    "type": "list<DocumentIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "DocumentIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Document Member",
            "docs": "Update the roles that a member holds on the document.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "document_id": "document_id",
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}",
            "path-parameters": {
              "document_id": "string",
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of document roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<DocumentIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of document roles to revoke from the member.",
                    "type": "optional<list<DocumentIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "DocumentIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "taskStatus": {
            "auth": true,
            "display-name": "Task Status",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "group_id": "group_id",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "group_id": "group_id",
                    "task_count": 1,
                    "tasks": [
                      {
                        "info": {
                          "key": "value",
                        },
                        "state": "PENDING",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/document/create/status/{group_id}",
            "path-parameters": {
              "group_id": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DocumentStatusResponse",
            },
          },
        },
      },
      "types": {
        "DocumentIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "DocumentIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "DocumentIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "DocumentIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "edit",
            "query",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
        "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource": {
          "enum": [
            "upload",
            "gdrive",
            "onedrive",
            "web_scrape",
            "notion",
            "confluence",
            "box",
            "dropbox",
            "sharepoint",
          ],
        },
      },
    },
    "internal.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "registerOauthClient": {
            "auth": true,
            "display-name": "Register Oauth Client",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "client_id": "client_id",
                    "client_secret": "client_secret",
                    "name": "name",
                    "redirect_uris": [
                      "redirect_uris",
                    ],
                    "scope": "scope",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/project/{project_id}/register_oauth_client",
            "path-parameters": {
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "profile": "optional<root.OAuthClientProfile>",
                  "redirect_uris": "optional<list<string>>",
                },
              },
              "headers": undefined,
              "name": "OAuthClientCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OAuthClientCreateResponse",
            },
          },
          "webhookHydraTokenHook": {
            "auth": false,
            "display-name": "Webhook Hydra Token Hook",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "session": {
                    "client_id": "client_id",
                    "id_token": {
                      "id_token_claims": {
                        "key": "value",
                      },
                    },
                  },
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/webhook/hydra/token_hook",
            "request": {
              "body": {
                "properties": {
                  "session": "root.HydraWebhookTokenHookSession",
                },
              },
              "headers": undefined,
              "name": "HydraWebhookTokenHook",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "webhookKratosSignupCheck": {
            "auth": false,
            "display-name": "Webhook Kratos Signup Check",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "identity_id": "identity_id",
                },
                "response": {
                  "body": {
                    "identity": {
                      "key": "value",
                    },
                    "messages": [
                      {
                        "instance_ptr": "instance_ptr",
                        "messages": [
                          {
                            "id": 1,
                            "text": "text",
                            "type": "info",
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/webhook/kratos/signup_check",
            "request": {
              "body": "root.KratosWebhook",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.KratosWebhookResponse",
            },
          },
          "webhookKratosSignupCommit": {
            "auth": false,
            "display-name": "Webhook Kratos Signup Commit",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "identity_id": "identity_id",
                },
                "response": {
                  "body": {
                    "identity": {
                      "key": "value",
                    },
                    "messages": [
                      {
                        "instance_ptr": "instance_ptr",
                        "messages": [
                          {
                            "id": 1,
                            "text": "text",
                            "type": "info",
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/internal/webhook/kratos/signup_commit",
            "request": {
              "body": "root.KratosWebhook",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.KratosWebhookResponse",
            },
          },
        },
      },
    },
    "listings.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAllModels": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "List available LLM's",
            "docs": "All supported LLM providers and models. Not all models have the same functionality.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "01902fbf-6de7-a1cc-fb86-b1230a7af301",
                  "project_id": "01902fc0-a119-26bc-827d-4138841301db",
                },
                "response": {
                  "body": [
                    {
                      "alias": "GPT 3.5 Turbo",
                      "description": "A fast and cost-effective model for a broad range of tasks. 16K context window with training cut off of Sep 2021.",
                      "name": "gpt-3.5-turbo",
                      "provider": "OpenAI",
                      "supports_vision": false,
                    },
                    {
                      "alias": "GPT 4",
                      "description": "The fourth-generation model with advanced reasoning and understanding. 8k context window with training cut off of Sep 2021.",
                      "name": "gpt-4",
                      "provider": "OpenAI",
                      "supports_vision": false,
                    },
                    {
                      "alias": "GPT 4 Turbo",
                      "description": "The latest GPT-4 Turbo model with vision capabilities. 128K context window with training cut off of Dec 2023.",
                      "name": "gpt-4-turbo",
                      "provider": "OpenAI",
                      "supports_vision": true,
                    },
                    {
                      "alias": "GPT 4 Turbo Preview",
                      "description": "GPT-4 Turbo preview model featuring improved instruction following, JSON mode. 128K context window with training cut off of April 2023. Returns a maximum of 4,096 output tokens. This is a preview model.",
                      "name": "gpt-4-turbo-preview",
                      "provider": "OpenAI",
                      "supports_vision": false,
                    },
                    {
                      "alias": "GPT 4o",
                      "description": "GPT-4o ("o" for "omni") is OpenAI's most advanced model. It is multimodal, it has the same high intelligence as GPT-4 Turbo but is much more efficient — it generates text 2x faster and is 50% cheaper.",
                      "name": "gpt-4o",
                      "provider": "OpenAI",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3.5 Sonnet",
                      "description": "Anthropics most intelligent model. 200K context window with 4k max output with training cut off of June 2024.",
                      "name": "claude-3-5-sonnet-20240620",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3 Haiku",
                      "description": "Anthropics fastest and most compact model. 200K context window with 4k max output with training cut off of Aug 2023.",
                      "name": "claude-3-haiku-20240307",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3 Sonnet",
                      "description": "Balanced model between intelligence and speed. 200K context window with 4k max output with training cut off of Aug 2023.",
                      "name": "claude-3-sonnet-20240229",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Claude 3 Opus",
                      "description": "Anthropics most powerful model. 200K context window with 4k max output with training cut off of Aug 2023.",
                      "name": "claude-3-opus-20240229",
                      "provider": "Anthropic",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Gemini 1.5 Pro",
                      "description": "Googles latest gemini model. 100K context window and 8k max output with training cut off in late 2023.",
                      "name": "gemini-1.5-pro-latest",
                      "provider": "Google",
                      "supports_vision": true,
                    },
                    {
                      "alias": "Gemini 1.0 Pro",
                      "description": "Googles 1.0 version gemini model. 30K context window and 2k max output with training cut off in late 2023.",
                      "name": "gemini-pro",
                      "provider": "Google",
                      "supports_vision": false,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/model",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatModel>",
            },
          },
          "listAvailableGuardrails": {
            "auth": false,
            "display-name": "List Available Guardrails",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": [
                    {
                      "description": "description",
                      "id": "source_validation",
                      "name": "name",
                      "type": "input",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/guardrail",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ChatGuardrail>",
            },
          },
        },
      },
    },
    "org.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "orgCreate": {
            "auth": true,
            "display-name": "Org Create",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "contact_email": "contact_email",
                  "name": "name",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org",
            "request": {
              "body": {
                "properties": {
                  "contact_email": {
                    "type": "string",
                    "validation": {
                      "format": "email",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "name": "string",
                },
              },
              "headers": undefined,
              "name": "OrgCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "orgDomainDelete": {
            "auth": true,
            "display-name": "Org Domain Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "domain_id": "domain_id",
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "domain": "domain",
                    "id": "id",
                    "status": "unverified",
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/domains/{domain_id}",
            "path-parameters": {
              "domain_id": "string",
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationDomain",
            },
          },
          "orgDomainsList": {
            "auth": true,
            "display-name": "Org Domains List",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "domain": "domain",
                        "id": "id",
                        "status": "unverified",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/domains",
            "path-parameters": {
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetOrganizationDomain",
            },
          },
          "orgDomainsPost": {
            "auth": true,
            "display-name": "Org Domains Post",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "domain": "domain",
                },
                "response": {
                  "body": {
                    "domain": "domain",
                    "id": "id",
                    "status": "unverified",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/domains",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "domain": "string",
                },
              },
              "headers": undefined,
              "name": "OrganizationDomainCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationDomain",
            },
          },
          "orgGet": {
            "auth": true,
            "display-name": "Org Get",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}",
            "path-parameters": {
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "orgInvitesCreate": {
            "auth": true,
            "display-name": "Org Invites Create",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "email_address": "email_address",
                },
                "response": {
                  "body": {
                    "email_address": "email_address",
                    "id": "id",
                    "roles": [
                      "roles",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/invite",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "email_address": {
                    "type": "string",
                    "validation": {
                      "format": "email",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "roles": "optional<list<string>>",
                },
              },
              "headers": undefined,
              "name": "OrgInviteBase",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationInvite",
            },
          },
          "orgInvitesDelete": {
            "auth": true,
            "display-name": "Org Invites Delete",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "org_invite_id": "org_invite_id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/org/{org_id}/invite/{org_invite_id}",
            "path-parameters": {
              "org_id": "string",
              "org_invite_id": "string",
            },
          },
          "orgInvitesList": {
            "auth": true,
            "display-name": "Org Invites List",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "email_address": "email_address",
                        "id": "id",
                        "roles": [
                          "roles",
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/invite",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "name": "OrgInvitesListOrgOrgIdInviteGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
                "show": "optional<root.OrgInviteShow>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetOrganizationInvite",
            },
          },
          "orgJoin": {
            "auth": true,
            "display-name": "Org Join",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/join",
            "path-parameters": {
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "orgList": {
            "auth": true,
            "display-name": "Org List",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org",
            "request": {
              "name": "OrgListOrgGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "membership": "optional<root.OrgMembership>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "orgUpdate": {
            "auth": true,
            "display-name": "Org Update",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "contact_email": {
                    "type": "optional<string>",
                    "validation": {
                      "format": "email",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "OrgUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "orgUpdateAvatar": {
            "auth": true,
            "display-name": "Org Update Avatar",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "contact_email": "contact_email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/avatar",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_org_update_avatar_org__org_id__avatar_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Org",
            },
          },
          "organization_get_member": {
            "auth": true,
            "display-name": "IAM - Lookup Organization Member",
            "docs": "Retrieve a specific member that has been granted direct access to the organization.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "organization_iam_list_members": {
            "auth": true,
            "display-name": "IAM - List Organization Members",
            "docs": "Lists all members that have been granted direct access to the organization.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/members",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "name": "OrganizationIamListMembersRequest",
              "query-parameters": {
                "type": "optional<OrganizationIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "organization_iam_test_permissions": {
            "auth": true,
            "display-name": "IAM - Test Organization Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the organization.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/test",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the organization.",
                    "type": "list<OrganizationIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrganizationIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "organization_iam_update_member_roles": {
            "auth": true,
            "display-name": "IAM - Update Organization Member",
            "docs": "Update the roles that a member holds on the organization.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of organization roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<OrganizationIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of organization roles to revoke from the member.",
                    "type": "optional<list<OrganizationIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrganizationIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
        },
      },
      "types": {
        "OrganizationIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "OrganizationIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "OrganizationIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "OrganizationIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "create_project",
            "edit",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "view",
            "view_members",
          ],
        },
      },
    },
    "project.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createProject": {
            "auth": true,
            "display-name": "Create Project",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "name": "string",
                },
              },
              "headers": undefined,
              "name": "ProjectCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Project",
            },
          },
          "getMember": {
            "auth": true,
            "display-name": "IAM - Lookup Project Member",
            "docs": "Retrieve a specific member that has been granted direct access to the project.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "getProject": {
            "auth": true,
            "display-name": "Get Project",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "datasource_connections": [
                      {
                        "config": {
                          "key": "value",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "datasource": {
                          "id": "id",
                          "name": "name",
                        },
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "private": true,
                        "project_id": "project_id",
                      },
                    ],
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectWithDatasources",
            },
          },
          "getProjectConfig": {
            "auth": false,
            "display-name": "Get Project Config",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/config",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectConfig",
            },
          },
          "iamListMembers": {
            "auth": true,
            "display-name": "IAM - List Project Members",
            "docs": "Lists all members that have been granted direct access to the project.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/members",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ProjectIamListMembersRequest",
              "query-parameters": {
                "type": "optional<ProjectIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "iamTestPermissions": {
            "auth": true,
            "display-name": "IAM - Test Project Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the project.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/test",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the project.",
                    "type": "list<ProjectIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "iamUpdateMemberRoles": {
            "auth": true,
            "display-name": "IAM - Update Project Member",
            "docs": "Update the roles that a member holds on the project.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of project roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<ProjectIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of project roles to revoke from the member.",
                    "type": "optional<list<ProjectIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "listProject": {
            "auth": true,
            "display-name": "List Project",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "id": "id",
                        "name": "name",
                        "org_id": "org_id",
                        "tasks_oauth_client_id": "tasks_oauth_client_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project",
            "path-parameters": {
              "org_id": "string",
            },
            "request": {
              "name": "ListProjectOrgOrgIdProjectGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetProject",
            },
          },
          "projectUpdateAvatar": {
            "auth": true,
            "display-name": "Project Update Avatar",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/avatar",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_project_update_avatar_org__org_id__project__project_id__avatar_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Project",
            },
          },
          "setProjectConfig": {
            "auth": true,
            "display-name": "Set Project Config",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "chat_guardrails": {
                      "input": [
                        {
                          "name": "prompt_policy",
                        },
                      ],
                      "output": [
                        {
                          "name": "source_validation",
                        },
                      ],
                    },
                    "chat_system_commands": [
                      "chat_system_commands",
                    ],
                    "knn": 1,
                    "llm": "gpt-4o",
                    "query_expansion": true,
                    "temperature": 1.1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/config",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "chat_guardrails": "optional<root.ConversationalGuardrails>",
                  "chat_system_commands": "optional<list<string>>",
                  "knn": {
                    "default": 4,
                    "type": "optional<integer>",
                  },
                  "llm": {
                    "default": "gpt-3.5-turbo",
                    "type": "optional<Llm>",
                  },
                  "query_expansion": {
                    "default": false,
                    "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                    "type": "optional<boolean>",
                  },
                  "temperature": {
                    "default": 0.5,
                    "type": "optional<double>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1,
                      "min": 0,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectConfig",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectConfig",
            },
          },
          "updateProject": {
            "auth": true,
            "display-name": "Update Project",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "id": "id",
                    "name": "name",
                    "org_id": "org_id",
                    "tasks_oauth_client_id": "tasks_oauth_client_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "name": "optional<string>",
                },
              },
              "headers": undefined,
              "name": "ProjectUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Project",
            },
          },
        },
      },
      "types": {
        "Llm": {
          "default": "gpt-3.5-turbo",
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
        "ProjectIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "ProjectIamMemberRoleUpdateAddItem": {
          "enum": [
            "data_creator",
            "data_editor",
            "data_viewer",
            "editor",
            "owner",
            "task_creator",
            "task_runner",
            "viewer",
          ],
        },
        "ProjectIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "data_creator",
            "data_editor",
            "data_viewer",
            "editor",
            "owner",
            "task_creator",
            "task_runner",
            "viewer",
          ],
        },
        "ProjectIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "collections_edit",
            "collections_view",
            "create_chat",
            "create_collection",
            "create_compose",
            "create_datasource_connection",
            "create_document",
            "create_task",
            "datasource_connections_edit",
            "datasource_connections_view",
            "documents_edit",
            "documents_view",
            "edit",
            "edit_data",
            "list_documents",
            "query_data",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "run_task",
            "view",
            "view_data",
            "view_members",
          ],
        },
      },
    },
    "scrape.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "checkStatus": {
            "auth": false,
            "display-name": "Check Status",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "sync_run_id": "sync_run_id",
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape/run/{sync_run_id}",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
              "sync_run_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "enable": {
            "auth": true,
            "display-name": "Enable Web Scrape",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "unknown",
            },
          },
          "fetch": {
            "auth": true,
            "display-name": "Initialise Web Scrape",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "request": {
                  "urls": [
                    "urls",
                  ],
                },
                "response": {
                  "body": {
                    "created": "2024-01-15T09:30:00Z",
                    "datasource_connection": {
                      "config": {
                        "key": "value",
                      },
                      "created_by": "created_by",
                      "datasource_id": "datasource_id",
                      "id": "id",
                      "private": true,
                      "project_id": "project_id",
                      "token": "token",
                    },
                    "id": "id",
                    "modified": "2024-01-15T09:30:00Z",
                    "run_output": {
                      "key": "value",
                    },
                    "status": "pending",
                    "task_id": "task_id",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape/start",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "max_crawl_depth": {
                    "default": 3,
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 7,
                      "min": undefined,
                      "multipleOf": undefined,
                    },
                  },
                  "urls": "list<string>",
                },
              },
              "headers": undefined,
              "name": "SiteScrapeRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.DatasourceSyncRun",
            },
          },
          "listRuns": {
            "auth": true,
            "display-name": "List Runs",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-01-15T09:30:00Z",
                        "datasource_connection": {
                          "id": "id",
                        },
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "run_output": {
                          "key": "value",
                        },
                        "status": "pending",
                        "task_id": "task_id",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/scrape/runs",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
            },
            "request": {
              "name": "ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequest",
              "query-parameters": {
                "cursor": "optional<string>",
                "page_limit": "optional<integer>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetDatasourceSyncRun",
            },
          },
        },
      },
    },
    "taskForwarders.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createTaskForwarder": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Create a Task Forwarder",
            "docs": "A Task Forwarder will receive the output of a Task and forward it to the specified destination. This can be used to send data to external systems, or to trigger other actions based on the output of a Task.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "request": {
                  "config": {
                    "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                  },
                  "config_sensitive": {
                    "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                  },
                  "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                  "name": "Webhook Endpoint",
                },
                "response": {
                  "body": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-01-15T09:30:00Z",
                    "name": "Webhook Endpoint",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "config": {
                    "docs": "Configuration parameters for the Task Forwarder such as a \`destination\` URL.",
                    "type": "optional<root.TaskForwarderConfig>",
                  },
                  "config_sensitive": {
                    "docs": "Sensitive parameters for the Task Forwarder such as a \`signing_key\`.",
                    "type": "optional<root.TaskForwarderSensitiveConfig>",
                  },
                  "description": {
                    "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A descriptive name for the Task Forwarder.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskForwarderCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskForwarder",
            },
          },
          "getAllTaskForwarders": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "List all Task Forwarders",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "config": {
                          "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                        },
                        "config_sensitive": {
                          "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "modified": "2024-01-15T09:30:00Z",
                        "name": "Webhook Endpoint",
                        "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetAllTaskForwardersRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "A cursor for pagination. Use the \`next_cursor\` value from the previous response to get the next page of results.",
                  "type": "optional<string>",
                },
                "page_limit": {
                  "docs": "The maximum number of items to return per page. Defaults to \`100\` if not specified.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetTaskForwarder",
            },
          },
          "getTaskForwarder": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch a Task Forwarder",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_forwarder_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "response": {
                  "body": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-01-15T09:30:00Z",
                    "name": "Webhook Endpoint",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_forwarder_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskForwarder",
            },
          },
          "updateTaskForwarder": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Update a Task Forwarder",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_forwarder_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "request": {},
                "response": {
                  "body": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-01-15T09:30:00Z",
                    "name": "Webhook Endpoint",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_forwarder_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "config": {
                    "docs": "Configuration parameters for the Task Forwarder such as a \`destination\` URL.",
                    "type": "optional<root.TaskForwarderConfig>",
                  },
                  "config_sensitive": {
                    "docs": "Sensitive parameters for the Task Forwarder such as a \`signing_key\`.",
                    "type": "optional<root.TaskForwarderSensitiveConfig>",
                  },
                  "description": {
                    "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A descriptive name for the Task Forwarder.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskForwarderUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskForwarder",
            },
          },
        },
      },
    },
    "tasks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Create a Task",
            "docs": "Tasks are the core of the platform and define the prompts and models used to generate responses.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "request": {
                  "description": "A task to pre-triage user onboarding before IDV.",
                  "enabled": true,
                  "image_required": true,
                  "llm_model": "gpt-4o",
                  "name": "Fintech Pre-Triage",
                  "output_format": {
                    "compliance": "bool",
                    "hint": "str",
                    "match": "str",
                    "rationale": "str",
                  },
                  "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                  "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                },
                "response": {
                  "body": {
                    "created": "2024-06-13T14:01:03Z",
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-06-13T14:01:03Z",
                    "name": "Fintech Pre-Triage",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    "revisions": [
                      {
                        "active": true,
                        "created": "2024-06-13T14:01:03Z",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "image_required": true,
                        "llm_model": "gpt-4o",
                        "modified": "2024-06-13T14:01:03Z",
                        "output_format": {
                          "compliance": "bool",
                          "hint": "str",
                          "match": "str",
                          "rationale": "str",
                        },
                        "rag": {
                          "collection_id": "collection_id",
                          "rag_param": "rag_param",
                        },
                        "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                        "task_forwarder_id": "task_forwarder_id",
                        "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "A longer description of the Task for internal reference.",
                    "type": "optional<string>",
                  },
                  "enabled": {
                    "docs": "When \`true\` the Task is active and callable. \`false\` denotes the Task is not yet operational.",
                    "type": "boolean",
                  },
                  "image_required": {
                    "default": false,
                    "docs": "When \`true\` it requires an image to be sent in the Task Run request.",
                    "type": "optional<boolean>",
                  },
                  "llm_config": {
                    "docs": "Specific configuration parameters for the LLM model.",
                    "type": "optional<root.TaskLLMConfig>",
                  },
                  "llm_model": {
                    "docs": "The LLM model to use for the Task.",
                    "type": "TaskCreateLlmModel",
                  },
                  "name": {
                    "docs": "A name or reference for the Task.",
                    "type": "string",
                  },
                  "output_format": {
                    "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with \`type\` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional \`description\` can be passed to provide it with additional context.",
                    "type": "map<string, TaskCreateOutputFormatValue>",
                  },
                  "rag": {
                    "audiences": [
                      "paid",
                    ],
                    "availability": "pre-release",
                    "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                    "type": "optional<root.TaskRAG>",
                  },
                  "system_prompt": "unknown",
                  "task_forwarder_id": {
                    "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "user_prompt": "unknown",
                },
              },
              "headers": undefined,
              "name": "TaskCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Task",
            },
          },
          "editTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Update a Task",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "request": {},
                "response": {
                  "body": {
                    "created": "2024-06-13T14:01:03Z",
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-06-13T14:01:03Z",
                    "name": "Fintech Pre-Triage",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    "revisions": [
                      {
                        "active": true,
                        "created": "2024-06-13T14:01:03Z",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "image_required": true,
                        "llm_model": "gpt-4o",
                        "modified": "2024-06-13T14:01:03Z",
                        "output_format": {
                          "compliance": "bool",
                          "hint": "str",
                          "match": "str",
                          "rationale": "str",
                        },
                        "rag": {
                          "collection_id": "collection_id",
                          "rag_param": "rag_param",
                        },
                        "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                        "task_forwarder_id": "task_forwarder_id",
                        "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "A longer description of the Task for internal reference.",
                    "type": "optional<string>",
                  },
                  "enabled": {
                    "docs": "When \`true\` the Task is active and callable. \`false\` denotes the Task is not yet operational.",
                    "type": "optional<boolean>",
                  },
                  "image_required": {
                    "docs": "When \`true\` it requires an image to be sent in the Task Run request.",
                    "type": "optional<boolean>",
                  },
                  "llm_config": {
                    "docs": "Specific configuration parameters for the LLM model.",
                    "type": "optional<root.TaskLLMConfig>",
                  },
                  "llm_model": {
                    "docs": "The LLM model to use for the Task.",
                    "type": "optional<TaskUpdateLlmModel>",
                  },
                  "name": {
                    "docs": "A name or reference for the Task.",
                    "type": "optional<string>",
                  },
                  "output_format": {
                    "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with \`type\` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional \`description\` can be passed to provide it with additional context.",
                    "type": "optional<map<string, optional<TaskUpdateOutputFormatValue>>>",
                  },
                  "rag": {
                    "audiences": [
                      "paid",
                    ],
                    "availability": "pre-release",
                    "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                    "type": "optional<root.TaskRAG>",
                  },
                  "system_prompt": "optional<unknown>",
                  "task_forwarder_id": {
                    "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "user_prompt": "optional<unknown>",
                },
              },
              "headers": undefined,
              "name": "TaskUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Task",
            },
          },
          "getAllTasks": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "List all Tasks",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-06-13T14:01:03Z",
                        "description": "A task to pre-triage user onboarding before IDV.",
                        "enabled": true,
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "modified": "2024-06-13T14:01:03Z",
                        "name": "Fintech Pre-Triage",
                        "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                        "revisions": [
                          {
                            "created": "2024-06-13T14:01:03Z",
                            "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                            "image_required": true,
                            "llm_model": "gpt-4o",
                            "modified": "2024-06-13T14:01:03Z",
                            "output_format": {
                              "compliance": "bool",
                              "hint": "str",
                              "match": "str",
                              "rationale": "str",
                            },
                            "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                            "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetAllTasksRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "A cursor for pagination. Use the \`next_cursor\` value from the previous response to get the next page of results.",
                  "type": "optional<string>",
                },
                "name": {
                  "docs": "Filter tasks by name. Supports partial matches.",
                  "type": "optional<string>",
                },
                "page_limit": {
                  "docs": "The maximum number of items to return per page. Defaults to \`100\` if not specified.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetTask",
            },
          },
          "getTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch a Task",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "response": {
                  "body": {
                    "created": "2024-06-13T14:01:03Z",
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                    "modified": "2024-06-13T14:01:03Z",
                    "name": "Fintech Pre-Triage",
                    "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    "revisions": [
                      {
                        "active": true,
                        "created": "2024-06-13T14:01:03Z",
                        "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                        "image_required": true,
                        "llm_model": "gpt-4o",
                        "modified": "2024-06-13T14:01:03Z",
                        "output_format": {
                          "compliance": "bool",
                          "hint": "str",
                          "match": "str",
                          "rationale": "str",
                        },
                        "rag": {
                          "collection_id": "collection_id",
                          "rag_param": "rag_param",
                        },
                        "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                        "task_forwarder_id": "task_forwarder_id",
                        "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.Task",
            },
          },
          "getTaskRun": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch Task Run",
            "docs": "Fetch an individual Task Run.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                  "task_run_id": "129c78d7-2e1f-4a77-adf3-68d69b0a3c71",
                },
                "response": {
                  "body": {
                    "created": "2024-07-11T14:31:21Z",
                    "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                    "response": {
                      "compliance": false,
                      "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                      "match": false,
                      "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                    },
                    "run_data": {
                      "audit": {
                        "ip": "10.152.3.59",
                        "ua": "Vercel Edge Functions",
                      },
                      "submitted": {
                        "description": "brown hair, blue sweater",
                      },
                    },
                    "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run/{task_run_id}",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
              "task_run_id": {
                "docs": "The specific Task Run to reference.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskRun",
            },
          },
          "getTaskRuns": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Fetch Task Runs",
            "docs": "Individual Task Runs provide an audit trail for all Task executions.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "123e4567-e89b-12d3-a456-426614174000",
                  "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  "task_id": "01909843-3596-da54-4756-28af46917e74",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "created": "2024-07-11T14:31:21Z",
                        "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                        "response": {
                          "compliance": false,
                          "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                          "match": false,
                          "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                        },
                        "run_data": {
                          "audit": {
                            "ip": "10.152.3.59",
                            "ua": "Vercel Edge Functions",
                          },
                          "submitted": {
                            "description": "brown hair, blue sweater",
                          },
                        },
                        "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetTaskRunsRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "A cursor for pagination. Use the \`next_cursor\` value from the previous response to get the next page of results.",
                  "type": "optional<string>",
                },
                "page_limit": {
                  "docs": "The maximum number of items to return per page. Defaults to \`100\` if not specified.",
                  "type": "optional<integer>",
                },
                "task_revision_id": {
                  "docs": "The specific Task Revision to reference.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetTaskRun",
            },
          },
          "runTask": {
            "audiences": [
              "free",
              "paid",
            ],
            "auth": true,
            "availability": "generally-available",
            "display-name": "Run a Task",
            "docs": "Run a specified Task against provided text and/or image input. The response is controlled by the \`output_format\` of the Task. Note that a Task must be \`enabled\` to be run.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "request": {
                  "task_input": {
                    "description": "brown hair, blue sweater",
                  },
                },
                "response": {
                  "body": {
                    "created": "2024-07-11T14:31:21.989219",
                    "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                    "response": {
                      "compliance": false,
                      "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                      "match": false,
                      "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                    },
                    "run_data": {
                      "audit": {
                        "ip": "10.152.3.59",
                        "ua": "Vercel Edge Functions",
                      },
                      "submitted": {
                        "description": "brown hair, blue sweater",
                      },
                    },
                    "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run",
            "path-parameters": {
              "org_id": {
                "docs": "The unique identifier of the organization.",
                "type": "string",
              },
              "project_id": {
                "docs": "The unique identifier of the project.",
                "type": "string",
              },
              "task_id": {
                "docs": "The specific Task to reference.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "task_file": "optional<file>",
                  "task_input": {
                    "docs": "The data input to the Task. This should be relevant to the \`user_prompt\` and cover any dynamic \`{...}\` parameters that are referenced in the prompt. Not required if \`image_required\` is set to \`true\` and there are no dynamic parameters in the prompt.",
                    "type": "map<string, unknown>",
                  },
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_Task_Run_Parameters",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TaskRun",
            },
          },
          "task_get_member": {
            "auth": true,
            "display-name": "IAM - Lookup Task Member",
            "docs": "Retrieve a specific member that has been granted direct access to the task.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
          "task_iam_list_members": {
            "auth": true,
            "display-name": "IAM - List Task Members",
            "docs": "Lists all members that have been granted direct access to the task.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "response": {
                  "body": {
                    "pagination": {
                      "has_next": true,
                      "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                      "page_limit": 100,
                    },
                    "results": [
                      {
                        "avatar_url": "avatar_url",
                        "member": "member",
                        "name": "name",
                        "roles": [
                          "roles",
                        ],
                        "total_subjects": 1,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "request": {
              "name": "TaskIamListMembersRequest",
              "query-parameters": {
                "type": "optional<TaskIamListMembersRequestType>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultSetIamMember",
            },
          },
          "task_iam_test_permissions": {
            "auth": true,
            "display-name": "IAM - Test Task Permissions",
            "docs": "Test the permissions that the caller (or another subject) holds on the task.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "request": {
                  "permissions": [
                    "add_editor",
                  ],
                },
                "response": {
                  "body": {
                    "member": "member",
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/test",
            "path-parameters": {
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "member": "optional<string>",
                  "permissions": {
                    "docs": "A list of permissions to test on the task.",
                    "type": "list<TaskIamPermissionTestPermissionsItem>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskIAMPermissionTest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMPermissionTest",
            },
          },
          "task_iam_update_member_roles": {
            "auth": true,
            "display-name": "IAM - Update Task Member",
            "docs": "Update the roles that a member holds on the task.",
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "member": "member",
                  "org_id": "org_id",
                  "project_id": "project_id",
                  "task_id": "task_id",
                },
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "member": "member",
                    "name": "name",
                    "roles": [
                      "roles",
                    ],
                    "total_subjects": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}",
            "path-parameters": {
              "member": "string",
              "org_id": "string",
              "project_id": "string",
              "task_id": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "add": {
                    "docs": "A list of task roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in \`remove\`.

This may be combined with \`remove_all\` to replace the member's entire role list.",
                    "type": "optional<list<TaskIamMemberRoleUpdateAddItem>>",
                  },
                  "remove": {
                    "docs": "A list of task roles to revoke from the member.",
                    "type": "optional<list<TaskIamMemberRoleUpdateRemoveItem>>",
                  },
                  "remove_all": {
                    "docs": "Removes all existing roles from the member. This may be combined with \`add\` to replace all existing roles that the member holds.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaskIAMMemberRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.IAMMember",
            },
          },
        },
      },
      "types": {
        "TaskCreateLlmModel": {
          "docs": "The LLM model to use for the Task.",
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
        "TaskCreateOutputFormatValue": {
          "enum": [
            "str",
            "string",
            "boolean",
            "bool",
            "int",
            "integer",
            "list",
          ],
        },
        "TaskIamListMembersRequestType": {
          "enum": [
            "user",
            "organization",
            "project",
          ],
        },
        "TaskIamMemberRoleUpdateAddItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "TaskIamMemberRoleUpdateRemoveItem": {
          "enum": [
            "editor",
            "owner",
            "viewer",
          ],
        },
        "TaskIamPermissionTestPermissionsItem": {
          "enum": [
            "add_editor",
            "add_member",
            "add_owner",
            "edit",
            "remove_editor",
            "remove_member",
            "remove_owner",
            "run_task",
            "view",
            "view_members",
          ],
        },
        "TaskUpdateLlmModel": {
          "enum": [
            {
              "name": "Gpt4O",
              "value": "gpt-4o",
            },
            {
              "name": "Gpt35Turbo",
              "value": "gpt-3.5-turbo",
            },
            {
              "name": "Gpt4",
              "value": "gpt-4",
            },
            {
              "name": "Gpt4Turbo",
              "value": "gpt-4-turbo",
            },
            {
              "name": "Gpt4TurboPreview",
              "value": "gpt-4-turbo-preview",
            },
            {
              "name": "Gpt41106Preview",
              "value": "gpt-4-1106-preview",
            },
            {
              "name": "Claude35Sonnet20240620",
              "value": "claude-3-5-sonnet-20240620",
            },
            {
              "name": "Claude3Haiku20240307",
              "value": "claude-3-haiku-20240307",
            },
            {
              "name": "Claude3Sonnet20240229",
              "value": "claude-3-sonnet-20240229",
            },
            {
              "name": "Claude3Opus20240229",
              "value": "claude-3-opus-20240229",
            },
            {
              "name": "Gemini15ProLatest",
              "value": "gemini-1.5-pro-latest",
            },
            {
              "name": "GeminiPro",
              "value": "gemini-pro",
            },
          ],
        },
        "TaskUpdateOutputFormatValue": {
          "enum": [
            "str",
            "string",
            "boolean",
            "bool",
            "int",
            "integer",
            "list",
          ],
        },
      },
    },
    "user.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "userGet": {
            "auth": true,
            "display-name": "User Get",
            "docs": "Retrieve the profile of the current user.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "bio": "bio",
                    "email": "email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/user",
            "response": {
              "docs": "Successful Response",
              "type": "root.User",
            },
          },
          "userPost": {
            "auth": true,
            "display-name": "User Post",
            "docs": "Update the profile of the current user.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "bio": "bio",
                    "email": "email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/user",
            "request": {
              "body": {
                "properties": {
                  "bio": "optional<string>",
                  "name": "optional<string>",
                },
              },
              "headers": undefined,
              "name": "UserProfileUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.User",
            },
          },
          "userUpdateAvatar": {
            "auth": true,
            "display-name": "User Update Avatar",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "avatar_url": "avatar_url",
                    "bio": "bio",
                    "email": "email",
                    "id": "id",
                    "name": "name",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/user/avatar",
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "Body_user_update_avatar_user_avatar_post",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.User",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "status-code": 400,
        "type": "unknown",
      },
      "ForbiddenError": {
        "docs": "Forbidden",
        "status-code": 403,
        "type": "ForbiddenErrorBody",
      },
      "NotFoundError": {
        "docs": "Not Found",
        "status-code": 404,
        "type": "InvalidMemberErrorResponse",
      },
      "UnprocessableEntityError": {
        "docs": "Validation Error",
        "status-code": 422,
        "type": "HTTPValidationError",
      },
    },
    "service": {
      "auth": false,
      "base-path": "",
      "endpoints": {
        "root_ping_get": {
          "auth": false,
          "display-name": "Root",
          "docs": "Root endpoint that returns a "Hello World" message.",
          "examples": [
            {
              "response": {
                "body": {
                  "key": "value",
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/ping",
          "response": {
            "docs": "Successful Response",
            "type": "unknown",
          },
        },
        "whoami_whoami_get": {
          "auth": true,
          "display-name": "Whoami",
          "docs": undefined,
          "errors": [
            "UnprocessableEntityError",
          ],
          "examples": [
            {
              "response": {
                "body": {
                  "key": "value",
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/whoami",
          "response": {
            "docs": "Successful Response",
            "type": "unknown",
          },
        },
      },
    },
    "types": {
      "AsyncJobResult": {
        "docs": undefined,
        "properties": {
          "status": "string",
          "task_id": "list<string>",
        },
      },
      "BadRequestErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "INVALID_MEMBER": "InvalidMemberErrorResponse",
          "INVALID_ROLE": "InvalidRoleErrorResponse",
          "INVALID_SUBJECT_TYPE": "InvalidSubjectTypeErrorResponse",
          "MALFORMED_RESOURCE_IDENTIFIER": "MalformedResourceIdentifierErrorResponse",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "BodyFetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPost": {
        "docs": undefined,
        "properties": {
          "id": "list<string>",
        },
      },
      "Chat": {
        "docs": undefined,
        "properties": {
          "collection_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "created": "datetime",
          "created_by_user_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "description": "optional<string>",
          "documents_have_been_modified": {
            "default": false,
            "type": "optional<boolean>",
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "last_message": "optional<datetime>",
          "summary": "optional<string>",
          "title": "optional<string>",
        },
      },
      "ChatConfig": {
        "docs": undefined,
        "properties": {
          "chat_guardrails": {
            "docs": "Conversational Guardrails can be defined to run against Chat \`input\` (i.e. the users query) or on Chat \`output\` (i.e. the LLM output)",
            "type": "optional<ConversationalGuardrails>",
          },
          "chat_system_commands": "optional<list<string>>",
          "knn": {
            "default": 5,
            "type": "optional<integer>",
          },
          "llm": {
            "default": "gpt-3.5-turbo",
            "type": "optional<Llm>",
          },
          "query_expansion": {
            "default": false,
            "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
            "type": "optional<boolean>",
          },
          "temperature": {
            "default": 0.5,
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 1,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "ChatDocument": {
        "docs": undefined,
        "properties": {
          "chunks": "integer",
          "connection_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "description": "optional<string>",
          "embedding_instances": "optional<list<ChatDocumentEmbeddingInstance>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "original_mime": "string",
          "project_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "source": "optional<ChatDocumentSource>",
          "source_meta": "optional<map<string, unknown>>",
          "strategy": "string",
          "title": "string",
        },
      },
      "ChatDocumentEmbeddingInstance": {
        "docs": undefined,
        "properties": {
          "chat_document_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "config": "optional<map<string, unknown>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "is_active": "boolean",
        },
      },
      "ChatDocumentEmbeddingRecord": {
        "docs": undefined,
        "properties": {
          "document": "string",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ChatDocumentQueryResult": {
        "docs": undefined,
        "properties": {
          "chat_document_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "score": "double",
          "text": "string",
        },
      },
      "ChatDocumentSource": {
        "enum": [
          "upload",
          "gdrive",
          "onedrive",
          "web_scrape",
          "notion",
          "confluence",
          "box",
          "dropbox",
          "sharepoint",
        ],
      },
      "ChatGuardrail": {
        "docs": undefined,
        "properties": {
          "description": "string",
          "id": "Id",
          "name": "string",
          "type": "Type",
        },
      },
      "ChatModel": {
        "docs": undefined,
        "properties": {
          "alias": {
            "docs": "Human readable name for the LLM.",
            "type": "string",
          },
          "description": {
            "docs": "Key information about the LLM.",
            "type": "string",
          },
          "name": {
            "docs": "LLM reference name.",
            "type": "Name",
          },
          "provider": {
            "docs": "The company that produces the LLM.",
            "type": "string",
          },
          "supports_vision": {
            "default": false,
            "docs": "Whether the LLM is able to see and interpret images.",
            "type": "boolean",
          },
        },
      },
      "Collection": {
        "docs": undefined,
        "properties": {
          "created": "datetime",
          "embedding_instances": "optional<list<ChatDocumentEmbeddingInstance>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": "datetime",
          "project_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "summary": "optional<string>",
          "title": "string",
        },
      },
      "CollectionChatShow": {
        "enum": [
          "all",
          "viewable",
        ],
      },
      "CollectionEmbeddingUpdate": {
        "docs": undefined,
        "properties": {
          "embedding_instance_ids": "list<string>",
        },
      },
      "CollectionStatsResponse": {
        "docs": undefined,
        "properties": {
          "documents_by_source": "list<SourceRow>",
          "number_of_chats": "integer",
        },
      },
      "ComposeContent": {
        "docs": undefined,
        "properties": {
          "existing_content": "string",
        },
      },
      "ComposeGenerate": {
        "docs": undefined,
        "properties": {
          "structure": "list<InitialComposeSection>",
        },
      },
      "ComposeInit": {
        "docs": undefined,
        "properties": {
          "audience": "optional<string>",
          "content": "optional<string>",
          "cta": "optional<string>",
          "deny_words": "optional<string>",
          "domain": "optional<string>",
          "favourable_words": "optional<string>",
          "keywords": "optional<string>",
          "language": {
            "default": "english_british",
            "type": "optional<Language>",
          },
          "num_sections": "optional<integer>",
          "purpose": "optional<string>",
          "title": "string",
          "tone": "optional<string>",
          "topic": "optional<string>",
          "voice": "optional<string>",
          "word_count": "optional<integer>",
        },
      },
      "ComposeSectionTalkingPoint": {
        "docs": undefined,
        "properties": {
          "section_heading": "string",
        },
      },
      "ComposeSectionUpdate": {
        "docs": undefined,
        "properties": {
          "instructions": "list<string>",
          "position": "integer",
          "section_title": "string",
          "text": "optional<string>",
        },
      },
      "ConversationalGuardrails": {
        "docs": undefined,
        "properties": {
          "input": {
            "docs": "List of valid Input Conversational Guardrails to enable",
            "type": "optional<list<InputConversationalGuardrailDefinition>>",
          },
          "output": {
            "docs": "List of valid Output Conversational Guardrails to enable",
            "type": "optional<list<OutputConversationalGuardrailDefinition>>",
          },
        },
      },
      "Datasource": {
        "docs": undefined,
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
        },
      },
      "DatasourceConfiguration": {
        "docs": undefined,
        "properties": {
          "name": "string",
          "private": "boolean",
          "root_folder_id": "optional<string>",
        },
      },
      "DatasourceConnection": {
        "docs": undefined,
        "properties": {
          "config": "optional<map<string, unknown>>",
          "created_by": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "datasource_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "private": "optional<boolean>",
          "project_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "token": {
            "default": "",
            "type": "optional<string>",
          },
        },
      },
      "DatasourceConnectionPublic": {
        "docs": undefined,
        "properties": {
          "config": "optional<map<string, unknown>>",
          "created": "datetime",
          "datasource": "Datasource",
          "datasource_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": "datetime",
          "name": "string",
          "private": "boolean",
          "project_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "DatasourceSyncRun": {
        "docs": undefined,
        "properties": {
          "created": "datetime",
          "datasource_connection": "optional<DatasourceConnection>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": "datetime",
          "run_output": "optional<map<string, unknown>>",
          "status": {
            "default": "pending",
            "type": "optional<Status>",
          },
          "task_id": "optional<string>",
        },
      },
      "DocumentCreateTask": {
        "docs": undefined,
        "properties": {
          "info": "optional<map<string, unknown>>",
          "state": "State",
          "task_id": "string",
        },
      },
      "DocumentStatusResponse": {
        "docs": undefined,
        "properties": {
          "group_id": "string",
          "task_count": "integer",
          "tasks": "list<DocumentCreateTask>",
        },
      },
      "EmptyErrorDetails": {
        "docs": undefined,
        "properties": {},
      },
      "ForbiddenErrorBody": {
        "base-properties": {},
        "discriminant": "reason",
        "docs": undefined,
        "union": {
          "MISSING_AUTHENTICATION": "MissingAuthenticationErrorResponse",
          "PERMISSION_CHECK_FAILED": "PermissionCheckFailedErrorResponse",
        },
      },
      "HTTPValidationError": {
        "docs": undefined,
        "properties": {
          "detail": "optional<list<ValidationError>>",
        },
      },
      "HydraWebhookTokenHookSession": {
        "docs": undefined,
        "properties": {
          "client_id": "string",
          "id_token": "HydraWebhookTokenHookSessionIDTokenClaims",
        },
      },
      "HydraWebhookTokenHookSessionIDTokenClaims": {
        "docs": undefined,
        "properties": {
          "id_token_claims": "map<string, unknown>",
        },
      },
      "IAMMember": {
        "docs": undefined,
        "properties": {
          "avatar_url": {
            "docs": "If avatar of the member, if it is supported by their subject type.",
            "type": "optional<string>",
          },
          "member": {
            "docs": "The member identifier string, the format of which is '<subject_type>:<subject_id>'",
            "type": "string",
          },
          "name": {
            "docs": "The name of the member.",
            "type": "optional<string>",
          },
          "roles": {
            "docs": "A list of roles that the member holds on an entity.

Some entities, such as Organizations, may contain members that exist without any roles.",
            "type": "optional<list<string>>",
          },
          "total_subjects": {
            "default": 1,
            "docs": "The total number of subjects that the member represents, which may be a value other than \`1\` if the member is not a User.",
            "type": "optional<integer>",
          },
        },
      },
      "IAMObjectErrorDetails": {
        "docs": undefined,
        "properties": {
          "id": "optional<string>",
          "type": "string",
        },
      },
      "IAMPermissionTest": {
        "docs": undefined,
        "properties": {
          "member": "optional<string>",
          "permissions": "list<string>",
        },
      },
      "Id": {
        "enum": [
          "source_validation",
          "prompt_policy",
          "pii_policy",
        ],
      },
      "Identity": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "map<string, unknown>",
          "KratosIdentity",
        ],
      },
      "InitialComposeSection": {
        "docs": undefined,
        "properties": {
          "ideas": "optional<list<string>>",
          "position": "integer",
          "title": "string",
        },
      },
      "InputConversationalGuardrailDefinition": {
        "docs": undefined,
        "properties": {
          "name": "Name",
        },
      },
      "InvalidMemberErrorDetails": {
        "docs": undefined,
        "properties": {
          "resource": "optional<IAMObjectErrorDetails>",
          "subject": "optional<IAMObjectErrorDetails>",
        },
      },
      "InvalidMemberErrorResponse": {
        "docs": undefined,
        "properties": {
          "invalidMemberError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "InvalidMemberErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "InvalidRoleErrorDetails": {
        "docs": undefined,
        "properties": {
          "resource": "optional<IAMObjectErrorDetails>",
          "role": "string",
        },
      },
      "InvalidRoleErrorResponse": {
        "docs": undefined,
        "properties": {
          "invalidRoleError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "InvalidRoleErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "InvalidSubjectTypeErrorDetails": {
        "docs": undefined,
        "properties": {
          "subject": "optional<IAMObjectErrorDetails>",
        },
      },
      "InvalidSubjectTypeErrorResponse": {
        "docs": undefined,
        "properties": {
          "invalidSubjectTypeError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "InvalidSubjectTypeErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "KratosIdentity": {
        "docs": undefined,
        "extra-properties": true,
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "traits": "optional<KratosIdentityTraits>",
        },
      },
      "KratosIdentityTraits": {
        "docs": undefined,
        "extra-properties": true,
        "properties": {
          "avatar_url": "optional<string>",
          "email": {
            "type": "optional<string>",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "optional<string>",
          "org_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "project_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "sso_email_verified": "optional<boolean>",
        },
      },
      "KratosWebhook": {
        "docs": undefined,
        "properties": {
          "bio": "optional<string>",
          "ctx": "optional<map<string, unknown>>",
          "email": {
            "type": "optional<string>",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "flow_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "flow_type": "optional<string>",
          "identity": "optional<KratosIdentity>",
          "identity_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "KratosWebhookDetailedMessage": {
        "docs": "Sourced from detailedMessage in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
        "properties": {
          "context": "optional<unknown>",
          "id": "integer",
          "text": "string",
          "type": "Type",
        },
      },
      "KratosWebhookErrorMessage": {
        "docs": "Sourced from errorMessage in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
        "properties": {
          "instance_ptr": "string",
          "messages": "optional<list<KratosWebhookDetailedMessage>>",
        },
      },
      "KratosWebhookResponse": {
        "docs": "Sourced from rawHookResponse in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
        "properties": {
          "identity": "optional<Identity>",
          "messages": "optional<list<KratosWebhookErrorMessage>>",
        },
      },
      "Language": {
        "default": "english_british",
        "enum": [
          "english_british",
          "english_american",
          "french",
          "chinese",
          "spanish",
          "korean",
          "italian",
          "german",
        ],
      },
      "Llm": {
        "default": "gpt-3.5-turbo",
        "enum": [
          {
            "name": "Gpt4O",
            "value": "gpt-4o",
          },
          {
            "name": "Gpt35Turbo",
            "value": "gpt-3.5-turbo",
          },
          {
            "name": "Gpt4",
            "value": "gpt-4",
          },
          {
            "name": "Gpt4Turbo",
            "value": "gpt-4-turbo",
          },
          {
            "name": "Gpt4TurboPreview",
            "value": "gpt-4-turbo-preview",
          },
          {
            "name": "Gpt41106Preview",
            "value": "gpt-4-1106-preview",
          },
          {
            "name": "Claude35Sonnet20240620",
            "value": "claude-3-5-sonnet-20240620",
          },
          {
            "name": "Claude3Haiku20240307",
            "value": "claude-3-haiku-20240307",
          },
          {
            "name": "Claude3Sonnet20240229",
            "value": "claude-3-sonnet-20240229",
          },
          {
            "name": "Claude3Opus20240229",
            "value": "claude-3-opus-20240229",
          },
          {
            "name": "Gemini15ProLatest",
            "value": "gemini-1.5-pro-latest",
          },
          {
            "name": "GeminiPro",
            "value": "gemini-pro",
          },
        ],
      },
      "MalformedResourceIdentifierErrorDetails": {
        "docs": undefined,
        "properties": {
          "expected_format": "string",
          "field": "string",
          "value": "unknown",
        },
      },
      "MalformedResourceIdentifierErrorResponse": {
        "docs": undefined,
        "properties": {
          "malformedResourceIdentifierError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "MalformedResourceIdentifierErrorDetails",
          },
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
        },
      },
      "MissingAuthenticationErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "missingAuthenticationError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "EmptyErrorDetails",
          },
        },
      },
      "MultipleRolesNotAllowedErrorDetails": {
        "docs": undefined,
        "properties": {
          "resource": "optional<IAMObjectErrorDetails>",
          "roles": "list<string>",
        },
      },
      "MultipleRolesNotAllowedErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "multipleRolesNotAllowedError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "MultipleRolesNotAllowedErrorDetails",
          },
        },
      },
      "Name": {
        "enum": [
          "prompt_policy",
          "pii_policy",
        ],
      },
      "OAuthClientCreateResponse": {
        "docs": undefined,
        "properties": {
          "client_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "client_secret": "string",
          "name": "string",
          "redirect_uris": "list<string>",
          "scope": {
            "default": "",
            "type": "optional<string>",
          },
        },
      },
      "OAuthClientProfile": {
        "enum": [
          "rightbrain_docs",
          "rightbrain_tasks",
          "user_defined",
          "zendesk",
        ],
      },
      "Object": {
        "docs": undefined,
        "properties": {
          "createdTime": "optional<string>",
          "id": "string",
          "mimeType": "optional<string>",
          "modifiedTime": "optional<string>",
          "name": "string",
          "size": "optional<string>",
          "synced": {
            "default": false,
            "type": "optional<boolean>",
          },
          "tags": "optional<list<ObjectTags>>",
          "type": "optional<ObjectType>",
        },
      },
      "ObjectList": "list<Object>",
      "ObjectTags": {
        "enum": [
          "no_size",
          "site",
        ],
      },
      "ObjectType": {
        "enum": [
          "file",
          "dir",
        ],
      },
      "Org": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "contact_email": {
            "type": "string",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
        },
      },
      "OrgInviteShow": {
        "enum": [
          "all",
          "pending",
          "accepted",
        ],
      },
      "OrgMembership": {
        "enum": [
          "active",
          "joinable",
          "joinable_by_domain",
          "joinable_by_invite",
        ],
      },
      "OrganizationDomain": {
        "docs": undefined,
        "properties": {
          "domain": "string",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "status": "Status",
        },
      },
      "OrganizationInvite": {
        "docs": undefined,
        "properties": {
          "email_address": {
            "type": "string",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "roles": "optional<list<string>>",
        },
      },
      "OrganizationInviteAlreadyExistsErrorDetails": {
        "docs": undefined,
        "properties": {
          "email_address": "string",
          "organization_id": "string",
        },
      },
      "OrganizationInviteAlreadyExistsErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "organizationInviteAlreadyExistsError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "OrganizationInviteAlreadyExistsErrorDetails",
          },
        },
      },
      "OrganizationMemberAlreadyExistsErrorDetails": {
        "docs": undefined,
        "properties": {
          "member_id": "string",
          "organization_id": "string",
        },
      },
      "OrganizationMemberAlreadyExistsErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "organizationMemberAlreadyExistsError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "OrganizationMemberAlreadyExistsErrorDetails",
          },
        },
      },
      "OutputConversationalGuardrailDefinition": {
        "docs": undefined,
        "properties": {
          "name": "literal<"source_validation">",
        },
      },
      "PaginatedResultSetChat": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Chat>",
          },
        },
      },
      "PaginatedResultSetChatDocument": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<ChatDocument>",
          },
        },
      },
      "PaginatedResultSetChatDocumentEmbeddingRecord": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<ChatDocumentEmbeddingRecord>",
          },
        },
      },
      "PaginatedResultSetCollection": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Collection>",
          },
        },
      },
      "PaginatedResultSetDatasourceSyncRun": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<DatasourceSyncRun>",
          },
        },
      },
      "PaginatedResultSetIamMember": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<IAMMember>",
          },
        },
      },
      "PaginatedResultSetOrganizationDomain": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<OrganizationDomain>",
          },
        },
      },
      "PaginatedResultSetOrganizationInvite": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<OrganizationInvite>",
          },
        },
      },
      "PaginatedResultSetProject": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Project>",
          },
        },
      },
      "PaginatedResultSetTask": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<Task>",
          },
        },
      },
      "PaginatedResultSetTaskForwarder": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<TaskForwarder>",
          },
        },
      },
      "PaginatedResultSetTaskRun": {
        "docs": undefined,
        "properties": {
          "pagination": {
            "docs": "Contains pagination information for the result set.",
            "type": "optional<PaginationDetails>",
          },
          "results": {
            "docs": "The list of items returned for the current page.",
            "type": "list<TaskRun>",
          },
        },
      },
      "PaginationDetails": {
        "docs": undefined,
        "properties": {
          "has_next": {
            "docs": "Indicates whether there are more results available in the next page.",
            "type": "optional<boolean>",
          },
          "next_cursor": {
            "docs": "A token used to retrieve the next page of results. If \`null\`, there are no more results.",
            "type": "optional<string>",
          },
          "page_limit": {
            "docs": "The maximum number of items returned per page.",
            "type": "optional<integer>",
          },
        },
      },
      "PermissionCheckFailedErrorDetails": {
        "docs": undefined,
        "properties": {
          "permission": "string",
          "resource": "optional<IAMObjectErrorDetails>",
          "subject": "optional<IAMObjectErrorDetails>",
        },
      },
      "PermissionCheckFailedErrorResponse": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Human readable representation of the error",
            "type": "string",
          },
          "permissionCheckFailedError": {
            "docs": "Metadata detailing more information about the error.",
            "type": "PermissionCheckFailedErrorDetails",
          },
        },
      },
      "Project": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
          "org_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "tasks_oauth_client_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ProjectConfig": {
        "docs": undefined,
        "properties": {
          "chat_guardrails": "optional<ConversationalGuardrails>",
          "chat_system_commands": "optional<list<string>>",
          "knn": {
            "default": 4,
            "type": "optional<integer>",
          },
          "llm": {
            "default": "gpt-3.5-turbo",
            "type": "optional<Llm>",
          },
          "query_expansion": {
            "default": false,
            "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
            "type": "optional<boolean>",
          },
          "temperature": {
            "default": 0.5,
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 1,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "ProjectWithDatasources": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "datasource_connections": "optional<list<DatasourceConnectionPublic>>",
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "string",
          "org_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "tasks_oauth_client_id": {
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "Source": {
        "enum": [
          "upload",
          "gdrive",
          "onedrive",
          "web_scrape",
          "notion",
          "confluence",
          "box",
          "dropbox",
          "sharepoint",
        ],
      },
      "SourceRow": {
        "docs": undefined,
        "properties": {
          "count": "integer",
          "source": "Source",
        },
      },
      "State": {
        "enum": [
          "PENDING",
          "STARTED",
          "SUCCESS",
          "FAILURE",
          "RETRY",
          "PROGRESS",
        ],
      },
      "Status": {
        "enum": [
          "unverified",
          "verified",
        ],
      },
      "Task": {
        "docs": undefined,
        "properties": {
          "created": {
            "docs": "When the Task was created.",
            "type": "datetime",
          },
          "description": {
            "docs": "A longer description of the Task for internal reference.",
            "type": "optional<string>",
          },
          "enabled": {
            "docs": "When \`true\` the Task is active and callable. \`false\` denotes the Task is not yet operational.",
            "type": "boolean",
          },
          "id": {
            "docs": "The unique identifier of the Task.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": {
            "docs": "When the Task was last updated.",
            "type": "datetime",
          },
          "name": {
            "docs": "A name or reference for the Task.",
            "type": "string",
          },
          "project_id": {
            "docs": "The Project that the Task belongs to.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "revisions": {
            "docs": "Each update to a Task results in a new Revision being created. Task Revisions are a powerful concept that can be used to assist with A/B testing, comparing responses from different LLM's, etc.",
            "type": "list<TaskRevision>",
          },
        },
      },
      "TaskForwarder": {
        "docs": undefined,
        "properties": {
          "config": {
            "docs": "Configuration parameters for the Task Forwarder such as a \`destination\` URL.",
            "type": "optional<TaskForwarderConfig>",
          },
          "config_sensitive": {
            "docs": "Sensitive parameters for the Task Forwarder such as a \`signing_key\`.",
            "type": "optional<TaskForwarderSensitiveConfig>",
          },
          "created": {
            "docs": "When the Task Forwarder was created.",
            "type": "datetime",
          },
          "description": {
            "docs": "Additional details about the Task Forwarder's purpose or configuration.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The unique identifier of the Task Forwarder.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "modified": {
            "docs": "When the Task Forwarder was last updated.",
            "type": "datetime",
          },
          "name": {
            "docs": "A descriptive name for the Task Forwarder.",
            "type": "string",
          },
          "project_id": {
            "docs": "The Project that the Task Forwarder belongs to.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "TaskForwarderConfig": {
        "docs": undefined,
        "properties": {
          "destination_url": {
            "docs": "The URL where Task Run result will be forwarded. Must be a valid HTTPS URL.",
            "type": "string",
          },
        },
      },
      "TaskForwarderSensitiveConfig": {
        "docs": undefined,
        "properties": {
          "signing_key": {
            "docs": "A secret key used to sign the forwarded data for verification purposes.",
            "type": "string",
          },
        },
      },
      "TaskLLMConfig": {
        "docs": undefined,
        "properties": {
          "temperature": {
            "default": 0.2,
            "docs": "Controls randomness in the output. Lower values make the output more focused and deterministic, while higher values make it more creative and diverse.",
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 1,
              "min": 0,
              "multipleOf": 0.1,
            },
          },
        },
      },
      "TaskRAG": {
        "docs": undefined,
        "properties": {
          "collection_id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "rag_param": "string",
        },
      },
      "TaskRevision": {
        "docs": undefined,
        "properties": {
          "active": {
            "default": false,
            "docs": "When \`true\` the Revision is the currently active version and will be activated when the Task Run is executed.",
            "type": "optional<boolean>",
          },
          "created": {
            "docs": "When the Task was created.",
            "type": "datetime",
          },
          "id": {
            "docs": "The unique identifier of the Revision.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "image_required": {
            "default": false,
            "docs": "When \`true\` it requires an image to be sent in the Task Run request.",
            "type": "optional<boolean>",
          },
          "llm_config": {
            "docs": "Specific configuration parameters for the LLM model.",
            "type": "optional<TaskLLMConfig>",
          },
          "llm_model": {
            "docs": "The LLM model to use for the Task.",
            "type": "TaskRevisionLlmModel",
          },
          "modified": {
            "docs": "When the Task was last updated.",
            "type": "datetime",
          },
          "output_format": {
            "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with \`type\` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional \`description\` can be passed to provide it with additional context.",
            "type": "map<string, TaskRevisionOutputFormatValue>",
          },
          "rag": {
            "audiences": [
              "paid",
            ],
            "availability": "pre-release",
            "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
            "type": "optional<TaskRAG>",
          },
          "system_prompt": "unknown",
          "task_forwarder_id": {
            "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
            "type": "optional<string>",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "user_prompt": "unknown",
        },
      },
      "TaskRevisionLlmModel": {
        "docs": "The LLM model to use for the Task.",
        "enum": [
          {
            "name": "Gpt4O",
            "value": "gpt-4o",
          },
          {
            "name": "Gpt35Turbo",
            "value": "gpt-3.5-turbo",
          },
          {
            "name": "Gpt4",
            "value": "gpt-4",
          },
          {
            "name": "Gpt4Turbo",
            "value": "gpt-4-turbo",
          },
          {
            "name": "Gpt4TurboPreview",
            "value": "gpt-4-turbo-preview",
          },
          {
            "name": "Gpt41106Preview",
            "value": "gpt-4-1106-preview",
          },
          {
            "name": "Claude35Sonnet20240620",
            "value": "claude-3-5-sonnet-20240620",
          },
          {
            "name": "Claude3Haiku20240307",
            "value": "claude-3-haiku-20240307",
          },
          {
            "name": "Claude3Sonnet20240229",
            "value": "claude-3-sonnet-20240229",
          },
          {
            "name": "Claude3Opus20240229",
            "value": "claude-3-opus-20240229",
          },
          {
            "name": "Gemini15ProLatest",
            "value": "gemini-1.5-pro-latest",
          },
          {
            "name": "GeminiPro",
            "value": "gemini-pro",
          },
        ],
      },
      "TaskRevisionOutputFormatValue": {
        "enum": [
          "str",
          "string",
          "boolean",
          "bool",
          "int",
          "integer",
          "list",
        ],
      },
      "TaskRun": {
        "docs": undefined,
        "properties": {
          "created": {
            "docs": "The timestamp when the Task Run was created.",
            "type": "datetime",
          },
          "id": {
            "docs": "The unique identifier of the Task Run.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "response": {
            "docs": "The structured response from the Task execution.",
            "type": "map<string, unknown>",
          },
          "run_data": {
            "docs": "Additional data about the Task run, including audit information and submitted input.",
            "type": "map<string, unknown>",
          },
          "task_revision_id": {
            "docs": "The unique identifier of the Task Revision associated with this run.",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "Type": {
        "enum": [
          "info",
          "error",
          "success",
          "validation",
        ],
      },
      "User": {
        "docs": undefined,
        "properties": {
          "avatar_url": "optional<string>",
          "bio": "optional<string>",
          "email": {
            "type": "string",
            "validation": {
              "format": "email",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "name": "optional<string>",
        },
      },
      "ValidationError": {
        "docs": undefined,
        "properties": {
          "loc": "list<ValidationErrorLocItem>",
          "msg": "string",
          "type": "string",
        },
      },
      "ValidationErrorLocItem": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          "integer",
        ],
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerAuthScheme",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
    },
    "display-name": "brain core api",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
