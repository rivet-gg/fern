// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser squidex docs 1`] = `
{
  "definitionFiles": {
    "apps.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteApp": {
            "auth": true,
            "display-name": "Delete the app.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteAppRequestBadRequestError",
              "root.AppsDeleteAppRequestNotFoundError",
              "root.AppsDeleteAppRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to delete.",
                "variable": "$appName",
              },
            },
          },
          "deleteClient": {
            "auth": true,
            "display-name": "Revoke an app client.",
            "docs": "The application that uses this client credentials cannot access the API after it has been revoked.",
            "errors": [
              "root.AppsDeleteClientRequestBadRequestError",
              "root.AppsDeleteClientRequestNotFoundError",
              "root.AppsDeleteClientRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the client that must be deleted.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Client deleted.",
              "type": "root.ClientsDto",
            },
          },
          "deleteContributor": {
            "auth": true,
            "display-name": "Remove contributor.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteContributorRequestBadRequestError",
              "root.AppsDeleteContributorRequestNotFoundError",
              "root.AppsDeleteContributorRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the contributor.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteImage": {
            "auth": true,
            "display-name": "Remove the app image.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteImageRequestBadRequestError",
              "root.AppsDeleteImageRequestNotFoundError",
              "root.AppsDeleteImageRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App image removed.",
              "type": "root.AppDto",
            },
          },
          "deleteLanguage": {
            "auth": true,
            "display-name": "Deletes an app language.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteLanguageRequestBadRequestError",
              "root.AppsDeleteLanguageRequestNotFoundError",
              "root.AppsDeleteLanguageRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "language": "language",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "language": {
                "docs": "The language to delete from the app.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Language deleted.",
              "type": "root.AppLanguagesDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "display-name": "Remove yourself.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteMyselfRequestBadRequestError",
              "root.AppsDeleteMyselfRequestNotFoundError",
              "root.AppsDeleteMyselfRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors/me",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteRole": {
            "auth": true,
            "display-name": "Remove role from app.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteRoleRequestBadRequestError",
              "root.AppsDeleteRoleRequestNotFoundError",
              "root.AppsDeleteRoleRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "roleName": "roleName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "roleName": {
                "docs": "The name of the role.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Role deleted.",
              "type": "root.RolesDto",
            },
          },
          "deleteWorkflow": {
            "auth": true,
            "display-name": "Delete a workflow.",
            "docs": undefined,
            "errors": [
              "root.AppsDeleteWorkflowRequestBadRequestError",
              "root.AppsDeleteWorkflowRequestNotFoundError",
              "root.AppsDeleteWorkflowRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the workflow to update.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Workflow deleted.",
              "type": "root.WorkflowsDto",
            },
          },
          "getApp": {
            "auth": true,
            "display-name": "Get an app by name.",
            "docs": undefined,
            "errors": [
              "root.AppsGetAppRequestNotFoundError",
              "root.AppsGetAppRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "root.AppDto",
            },
          },
          "getApps": {
            "auth": true,
            "display-name": "Get your apps.",
            "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
            "errors": [
              "root.AppsGetAppsRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps",
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getAssetScripts": {
            "auth": true,
            "display-name": "Get the app asset scripts.",
            "docs": undefined,
            "errors": [
              "root.AppsGetAssetScriptsRequestNotFoundError",
              "root.AppsGetAssetScriptsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "annotate": "annotate",
                    "create": "create",
                    "delete": "delete",
                    "move": "move",
                    "query": "query",
                    "queryPre": "queryPre",
                    "update": "update",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to get the asset scripts for.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Asset scripts returned.",
              "type": "root.AssetScriptsDto",
            },
          },
          "getClients": {
            "auth": true,
            "display-name": "Get app clients.",
            "docs": "Gets all configured clients for the app with the specified name.",
            "errors": [
              "root.AppsGetClientsRequestNotFoundError",
              "root.AppsGetClientsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Clients returned.",
              "type": "root.ClientsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "display-name": "Get app contributors.",
            "docs": undefined,
            "errors": [
              "root.AppsGetContributorsRequestNotFoundError",
              "root.AppsGetContributorsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getImage": {
            "auth": true,
            "display-name": "Get the app image.",
            "docs": undefined,
            "errors": [
              "root.AppsGetImageRequestNotFoundError",
              "root.AppsGetImageRequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App image found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getLanguages": {
            "auth": true,
            "display-name": "Get app languages.",
            "docs": undefined,
            "errors": [
              "root.AppsGetLanguagesRequestNotFoundError",
              "root.AppsGetLanguagesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Languages returned.",
              "type": "root.AppLanguagesDto",
            },
          },
          "getPermissions": {
            "auth": true,
            "display-name": "Get app permissions.",
            "docs": undefined,
            "errors": [
              "root.AppsGetPermissionsRequestNotFoundError",
              "root.AppsGetPermissionsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    "string",
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles/permissions",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App permissions returned.",
              "type": "list<string>",
            },
          },
          "getRoles": {
            "auth": true,
            "display-name": "Get app roles.",
            "docs": undefined,
            "errors": [
              "root.AppsGetRolesRequestNotFoundError",
              "root.AppsGetRolesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Roles returned.",
              "type": "root.RolesDto",
            },
          },
          "getSettings": {
            "auth": true,
            "display-name": "Get the app settings.",
            "docs": undefined,
            "errors": [
              "root.AppsGetSettingsRequestNotFoundError",
              "root.AppsGetSettingsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "editors": [
                      {
                        "name": "name",
                        "url": "url",
                      },
                    ],
                    "hideDateTimeModeButton": true,
                    "hideScheduler": true,
                    "patterns": [
                      {
                        "message": "message",
                        "name": "name",
                        "regex": "regex",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to get the settings for.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App settings returned.",
              "type": "root.AppSettingsDto",
            },
          },
          "getTeamApps": {
            "auth": true,
            "display-name": "Get team apps.",
            "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
            "errors": [
              "root.AppsGetTeamAppsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/apps",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getWorkflows": {
            "auth": true,
            "display-name": "Get app workflow.",
            "docs": undefined,
            "errors": [
              "root.AppsGetWorkflowsRequestNotFoundError",
              "root.AppsGetWorkflowsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Workflows returned.",
              "type": "root.WorkflowsDto",
            },
          },
          "postApp": {
            "auth": true,
            "display-name": "Create a new app.",
            "docs": "You can only create an app when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new app automatically.",
            "errors": [
              "root.AppsPostAppRequestBadRequestError",
              "root.AppsPostAppRequestConflictError",
              "root.AppsPostAppRequestInternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                  "template": {
                    "docs": "Initialize the app with the inbuilt template.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App created.",
              "type": "root.AppDto",
            },
          },
          "postClient": {
            "auth": true,
            "display-name": "Create a new app client.",
            "docs": "Create a new client for the app with the specified name.
The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.",
            "errors": [
              "root.AppsPostClientRequestBadRequestError",
              "root.AppsPostClientRequestNotFoundError",
              "root.AppsPostClientRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the client.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "CreateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client created.",
              "type": "root.ClientsDto",
            },
          },
          "postContributor": {
            "auth": true,
            "display-name": "Assign contributor to app.",
            "docs": undefined,
            "errors": [
              "root.AppsPostContributorRequestBadRequestError",
              "root.AppsPostContributorRequestNotFoundError",
              "root.AppsPostContributorRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "contributorId": "contributorId",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.AssignContributorDto",
            },
            "response": {
              "docs": "Contributor assigned to app.",
              "type": "root.ContributorsDto",
            },
          },
          "postLanguage": {
            "auth": true,
            "display-name": "Attaches an app language.",
            "docs": undefined,
            "errors": [
              "root.AppsPostLanguageRequestBadRequestError",
              "root.AppsPostLanguageRequestNotFoundError",
              "root.AppsPostLanguageRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "language": "language",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "language": {
                    "docs": "The language to add.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "AddLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language created.",
              "type": "root.AppLanguagesDto",
            },
          },
          "postRole": {
            "auth": true,
            "display-name": "Add role to app.",
            "docs": undefined,
            "errors": [
              "root.AppsPostRoleRequestBadRequestError",
              "root.AppsPostRoleRequestNotFoundError",
              "root.AppsPostRoleRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The role name.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "AddRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role created.",
              "type": "root.RolesDto",
            },
          },
          "postWorkflow": {
            "auth": true,
            "display-name": "Create a workflow.",
            "docs": undefined,
            "errors": [
              "root.AppsPostWorkflowRequestBadRequestError",
              "root.AppsPostWorkflowRequestNotFoundError",
              "root.AppsPostWorkflowRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "AddWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow created.",
              "type": "root.WorkflowsDto",
            },
          },
          "putApp": {
            "auth": true,
            "display-name": "Update the app.",
            "docs": undefined,
            "errors": [
              "root.AppsPutAppRequestBadRequestError",
              "root.AppsPutAppRequestNotFoundError",
              "root.AppsPutAppRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "The optional description of your app.",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "The optional label of your app.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppDto",
            },
          },
          "putAppTeam": {
            "auth": true,
            "display-name": "Transfer the app.",
            "docs": undefined,
            "errors": [
              "root.AppsPutAppTeamRequestBadRequestError",
              "root.AppsPutAppTeamRequestNotFoundError",
              "root.AppsPutAppTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/team",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "teamId": {
                    "docs": "The ID of the team.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TransferToTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App transferred.",
              "type": "root.AppDto",
            },
          },
          "putAssetScripts": {
            "auth": true,
            "display-name": "Update the app asset scripts.",
            "docs": undefined,
            "errors": [
              "root.AppsPutAssetScriptsRequestBadRequestError",
              "root.AppsPutAssetScriptsRequestNotFoundError",
              "root.AppsPutAssetScriptsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "annotate": "annotate",
                    "create": "create",
                    "delete": "delete",
                    "move": "move",
                    "query": "query",
                    "queryPre": "queryPre",
                    "update": "update",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "annotate": {
                    "docs": "The script that is executed when annotating a content.",
                    "type": "optional<string>",
                  },
                  "create": {
                    "docs": "The script that is executed when creating an asset.",
                    "type": "optional<string>",
                  },
                  "delete": {
                    "docs": "The script that is executed when deleting a content.",
                    "type": "optional<string>",
                  },
                  "move": {
                    "docs": "The script that is executed when moving a content.",
                    "type": "optional<string>",
                  },
                  "query": {
                    "docs": "The script that is executed for each asset when querying assets.",
                    "type": "optional<string>",
                  },
                  "queryPre": {
                    "docs": "The script that is executed for all assets when querying assets.",
                    "type": "optional<string>",
                  },
                  "update": {
                    "docs": "The script that is executed when updating a content.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAssetScriptsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset scripts updated.",
              "type": "root.AssetScriptsDto",
            },
          },
          "putClient": {
            "auth": true,
            "display-name": "Updates an app client.",
            "docs": "Only the display name can be changed, create a new client if necessary.",
            "errors": [
              "root.AppsPutClientRequestBadRequestError",
              "root.AppsPutClientRequestNotFoundError",
              "root.AppsPutClientRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the client that must be updated.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "allowAnonymous": {
                    "docs": "True to allow anonymous access without an access token for this client.",
                    "type": "optional<boolean>",
                  },
                  "apiCallsLimit": {
                    "docs": "The number of allowed api calls per month for this client.",
                    "type": "optional<long>",
                  },
                  "apiTrafficLimit": {
                    "docs": "The number of allowed api traffic bytes per month for this client.",
                    "type": "optional<long>",
                  },
                  "name": {
                    "docs": "The new display name of the client.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 20,
                      "minLength": 0,
                      "pattern": undefined,
                    },
                  },
                  "role": {
                    "docs": "The role of the client.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client updated.",
              "type": "root.ClientsDto",
            },
          },
          "putLanguage": {
            "auth": true,
            "display-name": "Updates an app language.",
            "docs": undefined,
            "errors": [
              "root.AppsPutLanguageRequestBadRequestError",
              "root.AppsPutLanguageRequestNotFoundError",
              "root.AppsPutLanguageRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "language": "language",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "language": {
                "docs": "The language to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fallback": {
                    "docs": "Optional fallback languages.",
                    "type": "optional<list<string>>",
                  },
                  "isMaster": {
                    "docs": "Set the value to true to make the language the master.",
                    "type": "optional<boolean>",
                  },
                  "isOptional": {
                    "docs": "Set the value to true to make the language optional.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language updated.",
              "type": "root.AppLanguagesDto",
            },
          },
          "putRole": {
            "auth": true,
            "display-name": "Update an app role.",
            "docs": undefined,
            "errors": [
              "root.AppsPutRoleRequestBadRequestError",
              "root.AppsPutRoleRequestNotFoundError",
              "root.AppsPutRoleRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "roleName": "roleName",
                },
                "request": {
                  "permissions": [
                    "permissions",
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "roleName": {
                "docs": "The name of the role to be updated.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "permissions": {
                    "docs": "Associated list of permissions.",
                    "type": "list<string>",
                  },
                  "properties": {
                    "docs": "Associated list of UI properties.",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role updated.",
              "type": "root.RolesDto",
            },
          },
          "putSettings": {
            "auth": true,
            "display-name": "Update the app settings.",
            "docs": undefined,
            "errors": [
              "root.AppsPutSettingsRequestBadRequestError",
              "root.AppsPutSettingsRequestNotFoundError",
              "root.AppsPutSettingsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "editors": [
                    {
                      "name": "name",
                      "url": "url",
                    },
                  ],
                  "patterns": [
                    {
                      "name": "name",
                      "regex": "regex",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "editors": [
                      {
                        "name": "name",
                        "url": "url",
                      },
                    ],
                    "hideDateTimeModeButton": true,
                    "hideScheduler": true,
                    "patterns": [
                      {
                        "message": "message",
                        "name": "name",
                        "regex": "regex",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "editors": {
                    "docs": "The configured UI editors.",
                    "type": "list<root.EditorDto>",
                  },
                  "hideDateTimeModeButton": {
                    "docs": "Hide the datetime mode button.",
                    "type": "optional<boolean>",
                  },
                  "hideScheduler": {
                    "docs": "Hide the scheduler for content items.",
                    "type": "optional<boolean>",
                  },
                  "patterns": {
                    "docs": "The configured app patterns.",
                    "type": "list<root.PatternDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppSettingsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppSettingsDto",
            },
          },
          "putWorkflow": {
            "auth": true,
            "display-name": "Update a workflow.",
            "docs": undefined,
            "errors": [
              "root.AppsPutWorkflowRequestBadRequestError",
              "root.AppsPutWorkflowRequestNotFoundError",
              "root.AppsPutWorkflowRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {
                  "initial": "initial",
                  "steps": {
                    "key": {},
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the workflow to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initial": {
                    "docs": "The initial step.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "optional<string>",
                  },
                  "schemaIds": {
                    "docs": "The schema ids.",
                    "type": "optional<list<string>>",
                  },
                  "steps": {
                    "docs": "The workflow steps.",
                    "type": "map<string, root.WorkflowStepDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow updated.",
              "type": "root.WorkflowsDto",
            },
          },
          "uploadImage": {
            "auth": true,
            "display-name": "Upload the app image.",
            "docs": undefined,
            "errors": [
              "root.AppsUploadImageRequestBadRequestError",
              "root.AppsUploadImageRequestNotFoundError",
              "root.AppsUploadImageRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AppsUploadImageRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App image uploaded.",
              "type": "root.AppDto",
            },
          },
        },
      },
    },
    "assets.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateAssets": {
            "auth": true,
            "display-name": "Bulk update assets.",
            "docs": undefined,
            "errors": [
              "root.AssetsBulkUpdateAssetsRequestBadRequestError",
              "root.AssetsBulkUpdateAssetsRequestNotFoundError",
              "root.AssetsBulkUpdateAssetsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": [
                    {
                      "contentId": "contentId",
                      "error": {
                        "details": [
                          "details",
                        ],
                        "errorCode": "errorCode",
                        "message": "message",
                        "statusCode": 1,
                        "traceId": "traceId",
                        "type": "type",
                      },
                      "id": "id",
                      "jobIndex": 1,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/bulk",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted assets.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "optional<list<root.BulkUpdateAssetsJobDto>>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Folder checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateAssetsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Assets created, update or delete.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "deleteAsset": {
            "auth": true,
            "display-name": "Delete an asset.",
            "docs": undefined,
            "errors": [
              "root.AssetsDeleteAssetRequestBadRequestError",
              "root.AssetsDeleteAssetRequestNotFoundError",
              "root.AssetsDeleteAssetRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset to delete.",
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsDeleteAssetRequest",
              "query-parameters": {
                "checkReferrers": {
                  "docs": "True to check referrers of this asset.",
                  "type": "optional<boolean>",
                },
                "permanent": {
                  "docs": "True to delete the asset permanently.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteAssetFolder": {
            "auth": true,
            "display-name": "Delete an asset folder.",
            "docs": undefined,
            "errors": [
              "root.AssetsDeleteAssetFolderRequestBadRequestError",
              "root.AssetsDeleteAssetFolderRequestNotFoundError",
              "root.AssetsDeleteAssetFolderRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder to delete.",
                "type": "string",
              },
            },
          },
          "getAsset": {
            "auth": true,
            "display-name": "Get an asset by id.",
            "docs": undefined,
            "errors": [
              "root.AssetsGetAssetRequestNotFoundError",
              "root.AssetsGetAssetRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset to retrieve.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Asset found.",
              "type": "root.AssetDto",
            },
          },
          "getAssetContent": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Get the asset content.",
            "docs": undefined,
            "errors": [
              "root.AssetsGetAssetContentRequestNotFoundError",
              "root.AssetsGetAssetContentRequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/assets/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentRequest",
              "query-parameters": {
                "auto": {
                  "docs": "True to use auto format.",
                  "type": "optional<boolean>",
                },
                "bg": {
                  "docs": "Optional background color.",
                  "type": "optional<string>",
                },
                "cache": {
                  "docs": "The cache duration in seconds.",
                  "type": "optional<long>",
                },
                "download": {
                  "docs": "Set it to 0 to prevent download.",
                  "type": "optional<integer>",
                },
                "focusX": {
                  "docs": "Override the y focus point.",
                  "type": "optional<float>",
                },
                "focusY": {
                  "docs": "Override the x focus point.",
                  "type": "optional<float>",
                },
                "force": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<boolean>",
                },
                "format": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "docs": "The target height of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The resize mode when the width and height is defined.",
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "docs": "True to ignore the asset focus point if any.",
                  "type": "optional<boolean>",
                },
                "quality": {
                  "docs": "Optional image quality, it is is an jpeg image.",
                  "type": "optional<integer>",
                },
                "version": {
                  "docs": "The optional version of the asset.",
                  "type": "optional<long>",
                },
                "width": {
                  "docs": "The target width of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetContentBySlug": {
            "auth": true,
            "display-name": "Get the asset content.",
            "docs": undefined,
            "errors": [
              "root.AssetsGetAssetContentBySlugRequestNotFoundError",
              "root.AssetsGetAssetContentBySlugRequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/assets/{app}/{idOrSlug}/{more}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "idOrSlug": {
                "docs": "The id or slug of the asset.",
                "type": "string",
              },
              "more": {
                "docs": "Optional suffix that can be used to seo-optimize the link to the image Has not effect.",
                "type": "optional<string>",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentBySlugRequest",
              "query-parameters": {
                "auto": {
                  "docs": "True to use auto format.",
                  "type": "optional<boolean>",
                },
                "bg": {
                  "docs": "Optional background color.",
                  "type": "optional<string>",
                },
                "cache": {
                  "docs": "The cache duration in seconds.",
                  "type": "optional<long>",
                },
                "download": {
                  "docs": "Set it to 0 to prevent download.",
                  "type": "optional<integer>",
                },
                "focusX": {
                  "docs": "Override the y focus point.",
                  "type": "optional<float>",
                },
                "focusY": {
                  "docs": "Override the x focus point.",
                  "type": "optional<float>",
                },
                "force": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<boolean>",
                },
                "format": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "docs": "The target height of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The resize mode when the width and height is defined.",
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "docs": "True to ignore the asset focus point if any.",
                  "type": "optional<boolean>",
                },
                "quality": {
                  "docs": "Optional image quality, it is is an jpeg image.",
                  "type": "optional<integer>",
                },
                "version": {
                  "docs": "The optional version of the asset.",
                  "type": "optional<long>",
                },
                "width": {
                  "docs": "The target width of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetFolders": {
            "auth": true,
            "display-name": "Get asset folders.",
            "docs": "Get all asset folders for the app.",
            "errors": [
              "root.AssetsGetAssetFoldersRequestNotFoundError",
              "root.AssetsGetAssetFoldersRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "folderName": "folderName",
                        "id": "id",
                        "parentId": "parentId",
                        "version": 1000000,
                      },
                    ],
                    "path": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "folderName": "folderName",
                        "id": "id",
                        "parentId": "parentId",
                        "version": 1000000,
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "AssetsGetAssetFoldersRequest",
              "query-parameters": {
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
                "scope": {
                  "docs": "The scope of the query.",
                  "type": "optional<root.AssetFolderScope>",
                },
              },
            },
            "response": {
              "docs": "Asset folders returned.",
              "type": "root.AssetFoldersDto",
            },
          },
          "getAssets": {
            "auth": true,
            "display-name": "Get assets.",
            "docs": "Get all assets for the app.",
            "errors": [
              "root.AssetsGetAssetsRequestNotFoundError",
              "root.AssetsGetAssetsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "_meta": {
                          "isDuplicate": "isDuplicate",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "editToken": "editToken",
                        "fileHash": "fileHash",
                        "fileName": "fileName",
                        "fileSize": 1000000,
                        "fileType": "fileType",
                        "fileVersion": 1000000,
                        "id": "id",
                        "isImage": true,
                        "isProtected": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "metadata": {
                          "key": "value",
                        },
                        "metadataText": "metadataText",
                        "mimeType": "mimeType",
                        "parentId": "parentId",
                        "pixelHeight": 1,
                        "pixelWidth": 1,
                        "slug": "slug",
                        "tags": [
                          "tags",
                        ],
                        "type": "Unknown",
                        "version": 1000000,
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "AssetsGetAssetsRequest",
              "query-parameters": {
                "$filter": {
                  "docs": "Optional OData filter.",
                  "type": "optional<string>",
                },
                "$orderby": {
                  "docs": "Optional OData order definition.",
                  "type": "optional<string>",
                },
                "$skip": {
                  "docs": "Optional number of items to skip.",
                  "type": "optional<double>",
                },
                "$top": {
                  "docs": "Optional number of items to take.",
                  "type": "optional<double>",
                },
                "ids": {
                  "docs": "The optional asset ids.",
                  "type": "optional<string>",
                },
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getAssetsPost": {
            "auth": true,
            "display-name": "Get assets.",
            "docs": "Get all assets for the app.",
            "errors": [
              "root.AssetsGetAssetsPostRequestBadRequestError",
              "root.AssetsGetAssetsPostRequestNotFoundError",
              "root.AssetsGetAssetsPostRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "_meta": {
                          "isDuplicate": "isDuplicate",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "editToken": "editToken",
                        "fileHash": "fileHash",
                        "fileName": "fileName",
                        "fileSize": 1000000,
                        "fileType": "fileType",
                        "fileVersion": 1000000,
                        "id": "id",
                        "isImage": true,
                        "isProtected": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "metadata": {
                          "key": "value",
                        },
                        "metadataText": "metadataText",
                        "mimeType": "mimeType",
                        "parentId": "parentId",
                        "pixelHeight": 1,
                        "pixelWidth": 1,
                        "slug": "slug",
                        "tags": [
                          "tags",
                        ],
                        "type": "Unknown",
                        "version": 1000000,
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/query",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.QueryDto",
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getTags": {
            "auth": true,
            "display-name": "Get assets tags.",
            "docs": "Get all tags for assets.",
            "errors": [
              "root.AssetsGetTagsRequestNotFoundError",
              "root.AssetsGetTagsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "key": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/tags",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Assets tags returned.",
              "type": "map<string, integer>",
            },
          },
          "postAsset": {
            "auth": true,
            "display-name": "Upload a new asset.",
            "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
            "errors": [
              "root.AssetsPostAssetRequestBadRequestError",
              "root.AssetsPostAssetRequestNotFoundError",
              "root.AssetsPostAssetRequestContentTooLargeError",
              "root.AssetsPostAssetRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AssetsPostAssetRequest",
              "query-parameters": {
                "duplicate": {
                  "docs": "True to duplicate the asset, event if the file has been uploaded.",
                  "type": "optional<boolean>",
                },
                "id": {
                  "docs": "The optional custom asset id.",
                  "type": "optional<string>",
                },
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created.",
              "type": "root.AssetDto",
            },
          },
          "postAssetFolder": {
            "auth": true,
            "display-name": "Create an asset folder.",
            "docs": undefined,
            "errors": [
              "root.AssetsPostAssetFolderRequestBadRequestError",
              "root.AssetsPostAssetFolderRequestNotFoundError",
              "root.AssetsPostAssetFolderRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "folderName": "folderName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "folderName": "folderName",
                    "id": "id",
                    "parentId": "parentId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "parentId": {
                    "docs": "The ID of the parent folder.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder created.",
              "type": "root.AssetFolderDto",
            },
          },
          "postUpsertAsset": {
            "auth": true,
            "display-name": "Upsert an asset.",
            "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
            "errors": [
              "root.AssetsPostUpsertAssetRequestBadRequestError",
              "root.AssetsPostUpsertAssetRequestNotFoundError",
              "root.AssetsPostUpsertAssetRequestContentTooLargeError",
              "root.AssetsPostUpsertAssetRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The optional custom asset id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AssetsPostUpsertAssetRequest",
              "query-parameters": {
                "duplicate": {
                  "docs": "True to duplicate the asset, event if the file has been uploaded.",
                  "type": "optional<boolean>",
                },
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created or updated.",
              "type": "root.AssetDto",
            },
          },
          "putAsset": {
            "auth": true,
            "display-name": "Update an asset.",
            "docs": undefined,
            "errors": [
              "root.AssetsPutAssetRequestBadRequestError",
              "root.AssetsPutAssetRequestNotFoundError",
              "root.AssetsPutAssetRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fileName": {
                    "docs": "The new name of the asset.",
                    "type": "optional<string>",
                  },
                  "isProtected": {
                    "docs": "True, when the asset is not public.",
                    "type": "optional<boolean>",
                  },
                  "metadata": {
                    "docs": "The asset metadata.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "slug": {
                    "docs": "The new slug of the asset.",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "The new asset tags.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AnnotateAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetContent": {
            "auth": true,
            "display-name": "Replace asset content.",
            "docs": "Use multipart request to upload an asset.",
            "errors": [
              "root.AssetsPutAssetContentRequestBadRequestError",
              "root.AssetsPutAssetContentRequestNotFoundError",
              "root.AssetsPutAssetContentRequestContentTooLargeError",
              "root.AssetsPutAssetContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}/content",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AssetsPutAssetContentRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetFolder": {
            "auth": true,
            "display-name": "Update an asset folder.",
            "docs": undefined,
            "errors": [
              "root.AssetsPutAssetFolderRequestBadRequestError",
              "root.AssetsPutAssetFolderRequestNotFoundError",
              "root.AssetsPutAssetFolderRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {
                  "folderName": "folderName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "folderName": "folderName",
                    "id": "id",
                    "parentId": "parentId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "RenameAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder updated.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetFolderParent": {
            "auth": true,
            "display-name": "Move an asset folder.",
            "docs": undefined,
            "errors": [
              "root.AssetsPutAssetFolderParentRequestBadRequestError",
              "root.AssetsPutAssetFolderParentRequestNotFoundError",
              "root.AssetsPutAssetFolderParentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "folderName": "folderName",
                    "id": "id",
                    "parentId": "parentId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder moved.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetParent": {
            "auth": true,
            "display-name": "Moves the asset.",
            "docs": undefined,
            "errors": [
              "root.AssetsPutAssetParentRequestBadRequestError",
              "root.AssetsPutAssetParentRequestNotFoundError",
              "root.AssetsPutAssetParentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset moved.",
              "type": "root.AssetDto",
            },
          },
          "putTag": {
            "auth": true,
            "display-name": "Rename an asset tag.",
            "docs": undefined,
            "errors": [
              "root.AssetsPutTagRequestBadRequestError",
              "root.AssetsPutTagRequestNotFoundError",
              "root.AssetsPutTagRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "name": "name",
                },
                "request": {
                  "tagName": "tagName",
                },
                "response": {
                  "body": {
                    "key": 1,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/tags/{name}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "name": {
                "docs": "The tag to return.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "tagName": {
                    "docs": "The new name for the tag.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "RenameTagDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset tag renamed and new tags returned.",
              "type": "map<string, integer>",
            },
          },
        },
      },
    },
    "backups.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteBackup": {
            "auth": true,
            "display-name": "Delete a backup.",
            "docs": undefined,
            "errors": [
              "root.BackupsDeleteBackupRequestBadRequestError",
              "root.BackupsDeleteBackupRequestNotFoundError",
              "root.BackupsDeleteBackupRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the backup to delete.",
                "type": "string",
              },
            },
          },
          "getBackupContent": {
            "auth": true,
            "display-name": "Get the backup content.",
            "docs": undefined,
            "errors": [
              "root.BackupsGetBackupContentRequestNotFoundError",
              "root.BackupsGetBackupContentRequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the backup.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackupContentV2": {
            "auth": true,
            "display-name": "Get the backup content.",
            "docs": undefined,
            "errors": [
              "root.BackupsGetBackupContentV2RequestNotFoundError",
              "root.BackupsGetBackupContentV2RequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/backups/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the backup.",
                "type": "string",
              },
            },
            "request": {
              "name": "BackupsGetBackupContentV2Request",
              "query-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "type": "optional<string>",
                },
                "appId": {
                  "docs": "The ID of the app.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackups": {
            "auth": true,
            "display-name": "Get all backup jobs.",
            "docs": undefined,
            "errors": [
              "root.BackupsGetBackupsRequestNotFoundError",
              "root.BackupsGetBackupsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "handledAssets": 1,
                        "handledEvents": 1,
                        "id": "id",
                        "started": "2024-01-15T09:30:00Z",
                        "status": "Created",
                        "stopped": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Backups returned.",
              "type": "root.BackupJobsDto",
            },
          },
          "getRestoreJob": {
            "auth": true,
            "display-name": "Get current restore status.",
            "docs": undefined,
            "errors": [
              "root.BackupsGetRestoreJobRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "log": [
                      "log",
                    ],
                    "started": "2024-01-15T09:30:00Z",
                    "status": "Created",
                    "stopped": "2024-01-15T09:30:00Z",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/restore",
            "response": {
              "docs": "Status returned.",
              "type": "root.RestoreJobDto",
            },
          },
          "postBackup": {
            "auth": true,
            "display-name": "Start a new backup.",
            "docs": undefined,
            "errors": [
              "root.BackupsPostBackupRequestBadRequestError",
              "root.BackupsPostBackupRequestNotFoundError",
              "root.BackupsPostBackupRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "postRestoreJob": {
            "auth": true,
            "display-name": "Restore a backup.",
            "docs": undefined,
            "errors": [
              "root.BackupsPostRestoreJobRequestBadRequestError",
              "root.BackupsPostRestoreJobRequestInternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "url": "url",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/restore",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                  "url": {
                    "docs": "The url to the restore file.",
                    "type": "string",
                    "validation": {
                      "format": "uri",
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "RestoreRequestDto",
              "query-parameters": undefined,
            },
          },
        },
      },
    },
    "comments.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "display-name": "Delete a comment.",
            "docs": undefined,
            "errors": [
              "root.CommentsDeleteCommentRequestBadRequestError",
              "root.CommentsDeleteCommentRequestNotFoundError",
              "root.CommentsDeleteCommentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentId": "commentId",
                  "commentsId": "commentsId",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
          },
          "getComments": {
            "auth": true,
            "display-name": "Get all comments.",
            "docs": "When passing in a version you can retrieve all updates since then.",
            "errors": [
              "root.CommentsGetCommentsRequestNotFoundError",
              "root.CommentsGetCommentsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentsId": "commentsId",
                },
                "response": {
                  "body": {
                    "createdComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "deletedComments": [
                      "deletedComments",
                    ],
                    "updatedComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "name": "CommentsGetCommentsRequest",
              "query-parameters": {
                "version": {
                  "docs": "The current version.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Comments returned.",
              "type": "root.CommentsDto",
            },
          },
          "getWatchingUsers": {
            "auth": true,
            "display-name": "Get all watching users..",
            "docs": undefined,
            "errors": [
              "root.CommentsGetWatchingUsersRequestNotFoundError",
              "root.CommentsGetWatchingUsersRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    "string",
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/watching/{resource}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "resource": {
                "docs": "The path to the resource.",
                "type": "optional<string>",
              },
            },
            "response": {
              "docs": "Watching users returned.",
              "type": "list<string>",
            },
          },
          "postComment": {
            "auth": true,
            "display-name": "Create a new comment.",
            "docs": undefined,
            "errors": [
              "root.CommentsPostCommentRequestBadRequestError",
              "root.CommentsPostCommentRequestNotFoundError",
              "root.CommentsPostCommentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentsId": "commentsId",
                },
                "request": {
                  "text": "text",
                },
                "response": {
                  "body": {
                    "id": "id",
                    "text": "text",
                    "time": "2024-01-15T09:30:00Z",
                    "url": "url",
                    "user": "user",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpsertCommentDto",
            },
            "response": {
              "docs": "Comment created.",
              "type": "root.CommentDto",
            },
          },
          "putComment": {
            "auth": true,
            "display-name": "Update a comment.",
            "docs": undefined,
            "errors": [
              "root.CommentsPutCommentRequestBadRequestError",
              "root.CommentsPutCommentRequestNotFoundError",
              "root.CommentsPutCommentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentId": "commentId",
                  "commentsId": "commentsId",
                },
                "request": {
                  "text": "text",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpsertCommentDto",
            },
          },
        },
      },
    },
    "contents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateContents": {
            "auth": true,
            "display-name": "Bulk update content items.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsBulkUpdateContentsRequestBadRequestError",
              "root.ContentsBulkUpdateContentsRequestNotFoundError",
              "root.ContentsBulkUpdateContentsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "jobs": [
                    {},
                  ],
                },
                "response": {
                  "body": [
                    {
                      "contentId": "contentId",
                      "error": {
                        "details": [
                          "details",
                        ],
                        "errorCode": "errorCode",
                        "message": "message",
                        "statusCode": 1,
                        "traceId": "traceId",
                        "type": "type",
                      },
                      "id": "id",
                      "jobIndex": 1,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/bulk",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted contents.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidate": {
                    "docs": "True to turn off validation for faster inserts. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidateWorkflow": {
                    "docs": "True to turn off validation of workflow rules. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "list<root.BulkUpdateContentsJobDto>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "availability": "deprecated",
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "list<root.BulkResultDto>",
            },
          },
          "createDraft": {
            "auth": true,
            "display-name": "Create a new draft version.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsCreateDraftRequestBadRequestError",
              "root.ContentsCreateDraftRequestNotFoundError",
              "root.ContentsCreateDraftRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to create the draft for.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft created.",
              "type": "root.ContentsDto",
            },
          },
          "deleteContent": {
            "auth": true,
            "display-name": "Delete a content item.",
            "docs": "You can create an generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsDeleteContentRequestBadRequestError",
              "root.ContentsDeleteContentRequestNotFoundError",
              "root.ContentsDeleteContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to delete.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsDeleteContentRequest",
              "query-parameters": {
                "checkReferrers": {
                  "docs": "True to check referrers of this content.",
                  "type": "optional<boolean>",
                },
                "permanent": {
                  "docs": "True to delete the content permanently.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteContentStatus": {
            "auth": true,
            "display-name": "Cancel status change of a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsDeleteContentStatusRequestBadRequestError",
              "root.ContentsDeleteContentStatusRequestNotFoundError",
              "root.ContentsDeleteContentStatusRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to cancel.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content status change cancelled.",
              "type": "root.ContentsDto",
            },
          },
          "deleteVersion": {
            "auth": true,
            "display-name": "Delete the draft version.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsDeleteVersionRequestBadRequestError",
              "root.ContentsDeleteVersionRequestNotFoundError",
              "root.ContentsDeleteVersionRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to delete the draft from.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft deleted.",
              "type": "root.ContentsDto",
            },
          },
          "getContent": {
            "auth": true,
            "display-name": "Get a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetContentRequestNotFoundError",
              "root.ContentsGetContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "data": {
                      "key": "value",
                    },
                    "editToken": "editToken",
                    "id": "id",
                    "isDeleted": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "newStatus": "newStatus",
                    "newStatusColor": "newStatusColor",
                    "referenceData": {
                      "key": {
                        "key": "value",
                      },
                    },
                    "scheduleJob": {
                      "color": "color",
                      "dueTime": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "scheduledBy": "scheduledBy",
                      "status": "status",
                    },
                    "schemaDisplayName": "schemaDisplayName",
                    "schemaId": "schemaId",
                    "schemaName": "schemaName",
                    "status": "status",
                    "statusColor": "statusColor",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentRequest",
              "query-parameters": {
                "version": {
                  "docs": "The optional version.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentDto",
            },
          },
          "getContentValidity": {
            "auth": true,
            "display-name": "Get a content item validity.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetContentValidityRequestBadRequestError",
              "root.ContentsGetContentValidityRequestNotFoundError",
              "root.ContentsGetContentValidityRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/validity",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
          },
          "getContentVersion": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Get a content by version.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetContentVersionRequestNotFoundError",
              "root.ContentsGetContentVersionRequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/{version}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
              "version": {
                "docs": "The version fo the content to fetch.",
                "type": "integer",
              },
            },
            "response": {
              "docs": "Content version returned.",
              "type": "file",
            },
          },
          "getContents": {
            "auth": true,
            "display-name": "Queries contents.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetContentsRequestNotFoundError",
              "root.ContentsGetContentsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentsRequest",
              "query-parameters": {
                "ids": {
                  "docs": "The optional ids of the content to fetch.",
                  "type": "optional<string>",
                },
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getContentsPost": {
            "auth": true,
            "display-name": "Queries contents.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetContentsPostRequestBadRequestError",
              "root.ContentsGetContentsPostRequestNotFoundError",
              "root.ContentsGetContentsPostRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/query",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.QueryDto",
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferences": {
            "auth": true,
            "display-name": "Get all references of a content.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetReferencesRequestNotFoundError",
              "root.ContentsGetReferencesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/references",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencesRequest",
              "query-parameters": {
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferencing": {
            "auth": true,
            "display-name": "Get a referencing contents of a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsGetReferencingRequestNotFoundError",
              "root.ContentsGetReferencingRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/referencing",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencingRequest",
              "query-parameters": {
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentsDto",
            },
          },
          "patchContent": {
            "auth": true,
            "display-name": "Patchs a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsPatchContentRequestBadRequestError",
              "root.ContentsPatchContentRequestNotFoundError",
              "root.ContentsPatchContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "PATCH",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to patch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
            },
            "response": {
              "docs": "Content patched.",
              "type": "root.ContentsDto",
            },
          },
          "postContent": {
            "auth": true,
            "display-name": "Create a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsPostContentRequestBadRequestError",
              "root.ContentsPostContentRequestNotFoundError",
              "root.ContentsPostContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
              "name": "ContentsPostContentRequest",
              "query-parameters": {
                "id": {
                  "docs": "The optional custom content id.",
                  "type": "optional<string>",
                },
                "publish": {
                  "docs": "True to automatically publish the content.",
                  "type": "optional<boolean>",
                },
                "status": {
                  "docs": "The initial status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created.",
              "type": "root.ContentsDto",
            },
          },
          "postContents": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Import content items.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsPostContentsRequestBadRequestError",
              "root.ContentsPostContentsRequestNotFoundError",
              "root.ContentsPostContentsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "datas": [
                    {
                      "key": {
                        "key": "value",
                      },
                    },
                  ],
                },
                "response": {
                  "body": [
                    {
                      "contentId": "contentId",
                      "error": {
                        "details": [
                          "details",
                        ],
                        "errorCode": "errorCode",
                        "message": "message",
                        "statusCode": 1,
                        "traceId": "traceId",
                        "type": "type",
                      },
                      "id": "id",
                      "jobIndex": 1,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/import",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "datas": {
                    "docs": "The data to import.",
                    "type": "list<root.ContentData>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "availability": "deprecated",
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ImportContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Contents created.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "postUpsertContent": {
            "auth": true,
            "display-name": "Upsert a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsPostUpsertContentRequestBadRequestError",
              "root.ContentsPostUpsertContentRequestNotFoundError",
              "root.ContentsPostUpsertContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to update.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
              "name": "ContentsPostUpsertContentRequest",
              "query-parameters": {
                "patch": {
                  "docs": "Makes the update as patch.",
                  "type": "optional<boolean>",
                },
                "publish": {
                  "docs": "True to automatically publish the content.",
                  "type": "optional<boolean>",
                },
                "status": {
                  "docs": "The initial status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created or updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContent": {
            "auth": true,
            "display-name": "Update a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsPutContentRequestBadRequestError",
              "root.ContentsPutContentRequestNotFoundError",
              "root.ContentsPutContentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to update.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
            },
            "response": {
              "docs": "Content updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContentStatus": {
            "auth": true,
            "display-name": "Change status of a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.ContentsPutContentStatusRequestBadRequestError",
              "root.ContentsPutContentStatusRequestNotFoundError",
              "root.ContentsPutContentStatusRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "status": "status",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to change.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of this content.",
                    "type": "optional<boolean>",
                  },
                  "dueTime": {
                    "docs": "The due time.",
                    "type": "optional<datetime>",
                  },
                  "status": {
                    "docs": "The new status.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeStatusDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Content status changed.",
              "type": "root.ContentsDto",
            },
          },
        },
      },
    },
    "diagnostics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getDump": {
            "auth": true,
            "display-name": "Creates a dump and writes it into storage..",
            "docs": undefined,
            "errors": [
              "root.DiagnosticsGetDumpRequestInternalServerError",
              "root.DiagnosticsGetDumpRequestNotImplementedError",
            ],
            "examples": [
              {},
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/diagnostics/dump",
          },
          "getGCDump": {
            "auth": true,
            "display-name": "Creates a gc dump and writes it into storage.",
            "docs": undefined,
            "errors": [
              "root.DiagnosticsGetGcDumpRequestInternalServerError",
              "root.DiagnosticsGetGcDumpRequestNotImplementedError",
            ],
            "examples": [
              {},
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/diagnostics/gcdump",
          },
        },
      },
    },
    "eventConsumers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getEventConsumers": {
            "auth": true,
            "display-name": "Get event consumers.",
            "docs": undefined,
            "errors": [
              "root.EventConsumersGetEventConsumersRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "count": 1,
                        "error": "error",
                        "isResetting": true,
                        "isStopped": true,
                        "name": "name",
                        "position": "position",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/event-consumers",
            "response": {
              "docs": "Event consumers returned.",
              "type": "root.EventConsumersDto",
            },
          },
          "resetEventConsumer": {
            "auth": true,
            "display-name": "Reset an event consumer.",
            "docs": undefined,
            "errors": [
              "root.EventConsumersResetEventConsumerRequestBadRequestError",
              "root.EventConsumersResetEventConsumerRequestNotFoundError",
              "root.EventConsumersResetEventConsumerRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "consumerName": "consumerName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "count": 1,
                    "error": "error",
                    "isResetting": true,
                    "isStopped": true,
                    "name": "name",
                    "position": "position",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/event-consumers/{consumerName}/reset",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer resetted asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "startEventConsumer": {
            "auth": true,
            "display-name": "Start an event consumer.",
            "docs": undefined,
            "errors": [
              "root.EventConsumersStartEventConsumerRequestBadRequestError",
              "root.EventConsumersStartEventConsumerRequestNotFoundError",
              "root.EventConsumersStartEventConsumerRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "consumerName": "consumerName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "count": 1,
                    "error": "error",
                    "isResetting": true,
                    "isStopped": true,
                    "name": "name",
                    "position": "position",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/event-consumers/{consumerName}/start",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer started asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "stopEventConsumer": {
            "auth": true,
            "display-name": "Stop an event consumer.",
            "docs": undefined,
            "errors": [
              "root.EventConsumersStopEventConsumerRequestBadRequestError",
              "root.EventConsumersStopEventConsumerRequestNotFoundError",
              "root.EventConsumersStopEventConsumerRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "consumerName": "consumerName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "count": 1,
                    "error": "error",
                    "isResetting": true,
                    "isStopped": true,
                    "name": "name",
                    "position": "position",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/event-consumers/{consumerName}/stop",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer stopped asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
        },
      },
    },
    "history.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppHistory": {
            "auth": true,
            "display-name": "Get historical events.",
            "docs": undefined,
            "errors": [
              "root.HistoryGetAppHistoryRequestNotFoundError",
              "root.HistoryGetAppHistoryRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    {
                      "actor": "actor",
                      "created": "2024-01-15T09:30:00Z",
                      "eventId": "eventId",
                      "eventType": "eventType",
                      "message": "message",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/history",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "HistoryGetAppHistoryRequest",
              "query-parameters": {
                "channel": {
                  "docs": "The name of the channel.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
          "getTeamHistory": {
            "auth": true,
            "display-name": "Get historical events for a team.",
            "docs": undefined,
            "errors": [
              "root.HistoryGetTeamHistoryRequestNotFoundError",
              "root.HistoryGetTeamHistoryRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": [
                    {
                      "actor": "actor",
                      "created": "2024-01-15T09:30:00Z",
                      "eventId": "eventId",
                      "eventType": "eventType",
                      "message": "message",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/history",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "request": {
              "name": "HistoryGetTeamHistoryRequest",
              "query-parameters": {
                "channel": {
                  "docs": "The name of the channel.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
        },
      },
    },
    "languages.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getLanguages": {
            "auth": true,
            "display-name": "Get supported languages.",
            "docs": "Provide a list of supported language codes, following the ISO2Code standard.",
            "errors": [
              "root.LanguagesGetLanguagesRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "englishName": "englishName",
                      "iso2Code": "iso2Code",
                      "nativeName": "nativeName",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/languages",
            "response": {
              "docs": "Supported language codes returned.",
              "type": "list<root.LanguageDto>",
            },
          },
        },
      },
    },
    "news.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getNews": {
            "auth": true,
            "display-name": "Get features since version.",
            "docs": undefined,
            "errors": [
              "root.NewsGetNewsRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "features": [
                      {
                        "name": "name",
                        "text": "text",
                      },
                    ],
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/news/features",
            "request": {
              "name": "NewsGetNewsRequest",
              "query-parameters": {
                "version": {
                  "docs": "The latest received version.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Latest features returned.",
              "type": "root.FeaturesDto",
            },
          },
        },
      },
    },
    "notifications.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "display-name": "Delete a notification.",
            "docs": undefined,
            "errors": [
              "root.NotificationsDeleteCommentRequestBadRequestError",
              "root.NotificationsDeleteCommentRequestNotFoundError",
              "root.NotificationsDeleteCommentRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "commentId": "commentId",
                  "userId": "userId",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/users/{userId}/notifications/{commentId}",
            "path-parameters": {
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "userId": {
                "docs": "The user id.",
                "type": "string",
              },
            },
          },
          "getNotifications": {
            "auth": true,
            "display-name": "Get all notifications.",
            "docs": "When passing in a version you can retrieve all updates since then.",
            "errors": [
              "root.NotificationsGetNotificationsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "userId": "userId",
                },
                "response": {
                  "body": {
                    "createdComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "deletedComments": [
                      "deletedComments",
                    ],
                    "updatedComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users/{userId}/notifications",
            "path-parameters": {
              "userId": {
                "docs": "The user id.",
                "type": "string",
              },
            },
            "request": {
              "name": "NotificationsGetNotificationsRequest",
              "query-parameters": {
                "version": {
                  "docs": "The current version.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "All comments returned.",
              "type": "root.CommentsDto",
            },
          },
        },
      },
    },
    "ping.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppPing": {
            "auth": true,
            "display-name": "Get ping status.",
            "docs": "Can be used to test, if the Squidex API is alive and responding.",
            "errors": [
              "root.PingGetAppPingRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/ping/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "getInfo": {
            "auth": true,
            "display-name": "Get API information.",
            "docs": undefined,
            "errors": [
              "root.PingGetInfoRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/info",
            "response": {
              "docs": "Infos returned.",
              "type": "root.ExposedValues",
            },
          },
          "getPing": {
            "auth": true,
            "display-name": "Get ping status of the API.",
            "docs": "Can be used to test, if the Squidex API is alive and responding.",
            "errors": [
              "root.PingGetPingRequestInternalServerError",
            ],
            "examples": [
              {},
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/ping",
          },
        },
      },
    },
    "plans.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getPlans": {
            "auth": true,
            "display-name": "Get app plan information.",
            "docs": undefined,
            "errors": [
              "root.PlansGetPlansRequestNotFoundError",
              "root.PlansGetPlansRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "currentPlanId": "currentPlanId",
                    "locked": "None",
                    "planOwner": "planOwner",
                    "plans": [
                      {
                        "confirmText": "confirmText",
                        "costs": "costs",
                        "id": "id",
                        "maxApiBytes": 1000000,
                        "maxApiCalls": 1000000,
                        "maxAssetSize": 1000000,
                        "maxContributors": 1,
                        "name": "name",
                        "yearlyConfirmText": "yearlyConfirmText",
                        "yearlyCosts": "yearlyCosts",
                        "yearlyId": "yearlyId",
                      },
                    ],
                    "portalLink": "portalLink",
                    "referral": {
                      "code": "code",
                      "condition": "condition",
                      "earned": "earned",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/plans",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "getTeamPlans": {
            "auth": true,
            "display-name": "Get team plan information.",
            "docs": undefined,
            "errors": [
              "root.PlansGetTeamPlansRequestNotFoundError",
              "root.PlansGetTeamPlansRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "currentPlanId": "currentPlanId",
                    "locked": "None",
                    "planOwner": "planOwner",
                    "plans": [
                      {
                        "confirmText": "confirmText",
                        "costs": "costs",
                        "id": "id",
                        "maxApiBytes": 1000000,
                        "maxApiCalls": 1000000,
                        "maxAssetSize": 1000000,
                        "maxContributors": 1,
                        "name": "name",
                        "yearlyConfirmText": "yearlyConfirmText",
                        "yearlyCosts": "yearlyCosts",
                        "yearlyId": "yearlyId",
                      },
                    ],
                    "portalLink": "portalLink",
                    "referral": {
                      "code": "code",
                      "condition": "condition",
                      "earned": "earned",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/plans",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Team plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "putPlan": {
            "auth": true,
            "display-name": "Change the app plan.",
            "docs": undefined,
            "errors": [
              "root.PlansPutPlanRequestBadRequestError",
              "root.PlansPutPlanRequestNotFoundError",
              "root.PlansPutPlanRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "planId": "planId",
                },
                "response": {
                  "body": {
                    "redirectUri": "redirectUri",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/plan",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.ChangePlanDto",
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
          "putTeamPlan": {
            "auth": true,
            "display-name": "Change the team plan.",
            "docs": undefined,
            "errors": [
              "root.PlansPutTeamPlanRequestBadRequestError",
              "root.PlansPutTeamPlanRequestNotFoundError",
              "root.PlansPutTeamPlanRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "request": {
                  "planId": "planId",
                },
                "response": {
                  "body": {
                    "redirectUri": "redirectUri",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/teams/{team}/plan",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ChangePlanDto",
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
        },
      },
    },
    "rules.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteEvent": {
            "auth": true,
            "display-name": "Cancels an event.",
            "docs": undefined,
            "errors": [
              "root.RulesDeleteEventRequestBadRequestError",
              "root.RulesDeleteEventRequestNotFoundError",
              "root.RulesDeleteEventRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The event to enqueue.",
                "type": "string",
              },
            },
          },
          "deleteEvents": {
            "auth": true,
            "display-name": "Cancels all events.",
            "docs": undefined,
            "errors": [
              "root.RulesDeleteEventsRequestBadRequestError",
              "root.RulesDeleteEventsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "deleteRule": {
            "auth": true,
            "display-name": "Delete a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesDeleteRuleRequestBadRequestError",
              "root.RulesDeleteRuleRequestNotFoundError",
              "root.RulesDeleteRuleRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to delete.",
                "type": "string",
              },
            },
          },
          "deleteRuleEvents": {
            "auth": true,
            "display-name": "Cancels all rule events.",
            "docs": undefined,
            "errors": [
              "root.RulesDeleteRuleEventsRequestBadRequestError",
              "root.RulesDeleteRuleEventsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to cancel.",
                "type": "string",
              },
            },
          },
          "deleteRuleRun": {
            "auth": true,
            "display-name": "Cancel the current run.",
            "docs": undefined,
            "errors": [
              "root.RulesDeleteRuleRunRequestBadRequestError",
              "root.RulesDeleteRuleRunRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/run",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "disableRule": {
            "auth": true,
            "display-name": "Disable a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesDisableRuleRequestBadRequestError",
              "root.RulesDisableRuleRequestNotFoundError",
              "root.RulesDisableRuleRequestInternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to disable.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule disabled.",
              "type": "root.RuleDto",
            },
          },
          "enableRule": {
            "auth": true,
            "display-name": "Enable a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesEnableRuleRequestBadRequestError",
              "root.RulesEnableRuleRequestNotFoundError",
              "root.RulesEnableRuleRequestInternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to enable.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule enabled.",
              "type": "root.RuleDto",
            },
          },
          "getActions": {
            "auth": true,
            "display-name": "Get supported rule actions.",
            "docs": undefined,
            "errors": [
              "root.RulesGetActionsRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": {
                      "description": "description",
                      "display": "display",
                      "iconColor": "iconColor",
                      "iconImage": "iconImage",
                      "properties": [
                        {
                          "display": "display",
                          "editor": "Checkbox",
                          "isFormattable": true,
                          "isRequired": true,
                          "name": "name",
                        },
                      ],
                      "readMore": "readMore",
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/rules/actions",
            "response": {
              "docs": "Rule actions returned.",
              "type": "map<string, root.RuleElementDto>",
            },
          },
          "getEventSchema": {
            "auth": true,
            "display-name": "Provide the json schema for the event with the specified name.",
            "docs": undefined,
            "errors": [
              "root.RulesGetEventSchemaRequestNotFoundError",
              "root.RulesGetEventSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "type": "type",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/rules/eventtypes/{type}",
            "path-parameters": {
              "type": {
                "docs": "The type name of the event.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule event type found.",
              "type": "unknown",
            },
          },
          "getEventTypes": {
            "auth": true,
            "display-name": "Provide a list of all event types that are used in rules.",
            "docs": undefined,
            "errors": [
              "root.RulesGetEventTypesRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    "string",
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/rules/eventtypes",
            "response": {
              "docs": "Rule events returned.",
              "type": "list<string>",
            },
          },
          "getEvents": {
            "auth": true,
            "display-name": "Get rule events.",
            "docs": undefined,
            "errors": [
              "root.RulesGetEventsRequestNotFoundError",
              "root.RulesGetEventsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "eventName": "eventName",
                        "id": "id",
                        "jobResult": "Pending",
                        "lastDump": "lastDump",
                        "nextAttempt": "2024-01-15T09:30:00Z",
                        "numCalls": 1,
                        "result": "Pending",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "RulesGetEventsRequest",
              "query-parameters": {
                "ruleId": {
                  "docs": "The optional rule id to filter to events.",
                  "type": "optional<string>",
                },
                "skip": {
                  "docs": "The number of events to skip.",
                  "type": "optional<integer>",
                },
                "take": {
                  "docs": "The number of events to take.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Rule events returned.",
              "type": "root.RuleEventsDto",
            },
          },
          "getRules": {
            "auth": true,
            "display-name": "Get rules.",
            "docs": undefined,
            "errors": [
              "root.RulesGetRulesRequestNotFoundError",
              "root.RulesGetRulesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [],
                    "runningRuleId": "runningRuleId",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Rules returned.",
              "type": "root.RulesDto",
            },
          },
          "postRule": {
            "auth": true,
            "display-name": "Create a new rule.",
            "docs": undefined,
            "errors": [
              "root.RulesPostRuleRequestBadRequestError",
              "root.RulesPostRuleRequestNotFoundError",
              "root.RulesPostRuleRequestInternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.CreateRuleDto",
            },
            "response": {
              "docs": "Rule created.",
              "type": "root.RuleDto",
            },
          },
          "putEvent": {
            "auth": true,
            "display-name": "Retry the event immediately.",
            "docs": undefined,
            "errors": [
              "root.RulesPutEventRequestBadRequestError",
              "root.RulesPutEventRequestNotFoundError",
              "root.RulesPutEventRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The event to enqueue.",
                "type": "string",
              },
            },
          },
          "putRule": {
            "auth": true,
            "display-name": "Update a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesPutRuleRequestBadRequestError",
              "root.RulesPutRuleRequestNotFoundError",
              "root.RulesPutRuleRequestInternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "action": {
                    "docs": "The action properties.",
                    "type": "optional<root.RuleActionDto>",
                  },
                  "isEnabled": {
                    "docs": "Enable or disable the rule.",
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Optional rule name.",
                    "type": "optional<string>",
                  },
                  "trigger": {
                    "docs": "The trigger properties.",
                    "type": "optional<root.RuleTriggerDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRuleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Rule updated.",
              "type": "root.RuleDto",
            },
          },
          "putRuleRun": {
            "auth": true,
            "display-name": "Run a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesPutRuleRunRequestBadRequestError",
              "root.RulesPutRuleRunRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/run",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to run.",
                "type": "string",
              },
            },
            "request": {
              "name": "RulesPutRuleRunRequest",
              "query-parameters": {
                "fromSnapshots": {
                  "docs": "Runs the rule from snapeshots if possible.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "simulateGET": {
            "auth": true,
            "display-name": "Simulate a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesSimulateGetRequestNotFoundError",
              "root.RulesSimulateGetRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "actionData": "actionData",
                        "actionName": "actionName",
                        "enrichedEvent": {
                          "key": "value",
                        },
                        "error": "error",
                        "event": {
                          "key": "value",
                        },
                        "eventId": "eventId",
                        "eventName": "eventName",
                        "skipReasons": [
                          "None",
                        ],
                        "uniqueId": "uniqueId",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/simulate",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to simulate.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "simulatePOST": {
            "auth": true,
            "display-name": "Simulate a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesSimulatePostRequestBadRequestError",
              "root.RulesSimulatePostRequestNotFoundError",
              "root.RulesSimulatePostRequestInternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/simulate",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.CreateRuleDto",
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "triggerRule": {
            "auth": true,
            "display-name": "Trigger a rule.",
            "docs": undefined,
            "errors": [
              "root.RulesTriggerRuleRequestBadRequestError",
              "root.RulesTriggerRuleRequestNotFoundError",
              "root.RulesTriggerRuleRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/trigger",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to disable.",
                "type": "string",
              },
            },
          },
        },
      },
    },
    "schemas.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteField": {
            "auth": true,
            "display-name": "Delete a schema field.",
            "docs": undefined,
            "errors": [
              "root.SchemasDeleteFieldRequestBadRequestError",
              "root.SchemasDeleteFieldRequestNotFoundError",
              "root.SchemasDeleteFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteNestedField": {
            "auth": true,
            "display-name": "Delete a nested field.",
            "docs": undefined,
            "errors": [
              "root.SchemasDeleteNestedFieldRequestBadRequestError",
              "root.SchemasDeleteNestedFieldRequestNotFoundError",
              "root.SchemasDeleteNestedFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteSchema": {
            "auth": true,
            "display-name": "Delete a schema.",
            "docs": undefined,
            "errors": [
              "root.SchemasDeleteSchemaRequestBadRequestError",
              "root.SchemasDeleteSchemaRequestNotFoundError",
              "root.SchemasDeleteSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to delete.",
                "type": "string",
              },
            },
          },
          "disableField": {
            "auth": true,
            "display-name": "Disable a schema field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.SchemasDisableFieldRequestBadRequestError",
              "root.SchemasDisableFieldRequestNotFoundError",
              "root.SchemasDisableFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "disableNestedField": {
            "auth": true,
            "display-name": "Disable a nested field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.SchemasDisableNestedFieldRequestBadRequestError",
              "root.SchemasDisableNestedFieldRequestNotFoundError",
              "root.SchemasDisableNestedFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableField": {
            "auth": true,
            "display-name": "Enable a schema field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.SchemasEnableFieldRequestBadRequestError",
              "root.SchemasEnableFieldRequestNotFoundError",
              "root.SchemasEnableFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to enable.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableNestedField": {
            "auth": true,
            "display-name": "Enable a nested field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.SchemasEnableNestedFieldRequestBadRequestError",
              "root.SchemasEnableNestedFieldRequestNotFoundError",
              "root.SchemasEnableNestedFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to enable.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "getSchema": {
            "auth": true,
            "display-name": "Get a schema by name.",
            "docs": undefined,
            "errors": [
              "root.SchemasGetSchemaRequestNotFoundError",
              "root.SchemasGetSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to retrieve.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema found.",
              "type": "root.SchemaDto",
            },
          },
          "getSchemas": {
            "auth": true,
            "display-name": "Get schemas.",
            "docs": undefined,
            "errors": [
              "root.SchemasGetSchemasRequestNotFoundError",
              "root.SchemasGetSchemasRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "category": "category",
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "fieldRules": [
                          {
                            "action": "Disable",
                            "field": "field",
                          },
                        ],
                        "fields": [],
                        "fieldsInLists": [
                          "fieldsInLists",
                        ],
                        "fieldsInReferences": [
                          "fieldsInReferences",
                        ],
                        "id": "id",
                        "isPublished": true,
                        "isSingleton": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "name": "name",
                        "previewUrls": {
                          "key": "value",
                        },
                        "properties": {
                          "validateOnPublish": true,
                        },
                        "scripts": {},
                        "type": "Default",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Schemas returned.",
              "type": "root.SchemasDto",
            },
          },
          "hideField": {
            "auth": true,
            "display-name": "Hide a schema field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.SchemasHideFieldRequestBadRequestError",
              "root.SchemasHideFieldRequestNotFoundError",
              "root.SchemasHideFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to hide.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "hideNestedField": {
            "auth": true,
            "display-name": "Hide a nested field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.SchemasHideNestedFieldRequestBadRequestError",
              "root.SchemasHideNestedFieldRequestNotFoundError",
              "root.SchemasHideNestedFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to hide.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "lockField": {
            "auth": true,
            "display-name": "Lock a schema field.",
            "docs": "A locked field cannot be updated or deleted.",
            "errors": [
              "root.SchemasLockFieldRequestBadRequestError",
              "root.SchemasLockFieldRequestNotFoundError",
              "root.SchemasLockFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to lock.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "lockNestedField": {
            "auth": true,
            "display-name": "Lock a nested field.",
            "docs": "A locked field cannot be edited or deleted.",
            "errors": [
              "root.SchemasLockNestedFieldRequestBadRequestError",
              "root.SchemasLockNestedFieldRequestNotFoundError",
              "root.SchemasLockNestedFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to lock.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "postField": {
            "auth": true,
            "display-name": "Add a schema field.",
            "docs": undefined,
            "errors": [
              "root.SchemasPostFieldRequestBadRequestError",
              "root.SchemasPostFieldRequestNotFoundError",
              "root.SchemasPostFieldRequestConflictError",
              "root.SchemasPostFieldRequestInternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.AddFieldDto",
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postNestedField": {
            "auth": true,
            "display-name": "Add a nested field.",
            "docs": undefined,
            "errors": [
              "root.SchemasPostNestedFieldRequestBadRequestError",
              "root.SchemasPostNestedFieldRequestNotFoundError",
              "root.SchemasPostNestedFieldRequestConflictError",
              "root.SchemasPostNestedFieldRequestInternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.AddFieldDto",
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postSchema": {
            "auth": true,
            "display-name": "Create a new schema.",
            "docs": undefined,
            "errors": [
              "root.SchemasPostSchemaRequestBadRequestError",
              "root.SchemasPostSchemaRequestConflictError",
              "root.SchemasPostSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "isPublished": true,
                  "isSingleton": true,
                  "name": "name",
                  "type": "Default",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.UpsertSchemaDto",
                ],
                "properties": {
                  "isSingleton": {
                    "availability": "deprecated",
                    "docs": "Set to true to allow a single content item only.",
                    "type": "boolean",
                  },
                  "name": {
                    "docs": "The name of the schema.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                  "type": {
                    "docs": "The type of the schema.",
                    "type": "root.SchemaType",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema created.",
              "type": "root.SchemaDto",
            },
          },
          "publishSchema": {
            "auth": true,
            "display-name": "Publish a schema.",
            "docs": undefined,
            "errors": [
              "root.SchemasPublishSchemaRequestBadRequestError",
              "root.SchemasPublishSchemaRequestNotFoundError",
              "root.SchemasPublishSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/publish",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to publish.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema published.",
              "type": "root.SchemaDto",
            },
          },
          "putCategory": {
            "auth": true,
            "display-name": "Update a schema category.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutCategoryRequestBadRequestError",
              "root.SchemasPutCategoryRequestNotFoundError",
              "root.SchemasPutCategoryRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/category",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the category.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeCategoryDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putField": {
            "auth": true,
            "display-name": "Update a schema field.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutFieldRequestBadRequestError",
              "root.SchemasPutFieldRequestNotFoundError",
              "root.SchemasPutFieldRequestInternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to update.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpdateFieldDto",
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedField": {
            "auth": true,
            "display-name": "Update a nested field.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutNestedFieldRequestBadRequestError",
              "root.SchemasPutNestedFieldRequestNotFoundError",
              "root.SchemasPutNestedFieldRequestInternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to update.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpdateFieldDto",
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedFieldOrdering": {
            "auth": true,
            "display-name": "Reorder all nested fields.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutNestedFieldOrderingRequestBadRequestError",
              "root.SchemasPutNestedFieldOrderingRequestNotFoundError",
              "root.SchemasPutNestedFieldOrderingRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "request": {
                  "fieldIds": [
                    1000000,
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ReorderFieldsDto",
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putPreviewUrls": {
            "auth": true,
            "display-name": "Update the preview urls.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutPreviewUrlsRequestBadRequestError",
              "root.SchemasPutPreviewUrlsRequestNotFoundError",
              "root.SchemasPutPreviewUrlsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "key": "value",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/preview-urls",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ConfigurePreviewUrlsDto",
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putRules": {
            "auth": true,
            "display-name": "Update the rules.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutRulesRequestBadRequestError",
              "root.SchemasPutRulesRequestNotFoundError",
              "root.SchemasPutRulesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldRules": {
                    "docs": "The field rules to configure.",
                    "type": "optional<list<root.FieldRuleDto>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureFieldRulesDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchema": {
            "auth": true,
            "display-name": "Update a schema.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutSchemaRequestBadRequestError",
              "root.SchemasPutSchemaRequestNotFoundError",
              "root.SchemasPutSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "validateOnPublish": true,
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "contentEditorUrl": {
                    "docs": "The url to the editor plugin.",
                    "type": "optional<string>",
                  },
                  "contentSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content items.",
                    "type": "optional<string>",
                  },
                  "contentsSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content lists.",
                    "type": "optional<string>",
                  },
                  "hints": {
                    "docs": "Hints to describe the schema.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 1000,
                      "minLength": 0,
                      "pattern": undefined,
                    },
                  },
                  "label": {
                    "docs": "Optional label for the editor.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 100,
                      "minLength": 0,
                      "pattern": undefined,
                    },
                  },
                  "tags": {
                    "docs": "Tags for automation processes.",
                    "type": "optional<list<string>>",
                  },
                  "validateOnPublish": {
                    "docs": "True to validate the content items on publish.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaFieldOrdering": {
            "auth": true,
            "display-name": "Reorder all fields.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutSchemaFieldOrderingRequestBadRequestError",
              "root.SchemasPutSchemaFieldOrderingRequestNotFoundError",
              "root.SchemasPutSchemaFieldOrderingRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "fieldIds": [
                    1000000,
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/ordering",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ReorderFieldsDto",
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaSync": {
            "auth": true,
            "display-name": "Synchronize a schema.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutSchemaSyncRequestBadRequestError",
              "root.SchemasPutSchemaSyncRequestNotFoundError",
              "root.SchemasPutSchemaSyncRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "isPublished": true,
                  "noFieldDeletion": true,
                  "noFieldRecreation": true,
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/sync",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.UpsertSchemaDto",
                ],
                "properties": {
                  "noFieldDeletion": {
                    "docs": "True, when fields should not be deleted.",
                    "type": "boolean",
                  },
                  "noFieldRecreation": {
                    "docs": "True, when fields with different types should not be recreated.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "SynchronizeSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaUIFields": {
            "auth": true,
            "display-name": "Configure UI fields.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutSchemaUiFieldsRequestBadRequestError",
              "root.SchemasPutSchemaUiFieldsRequestNotFoundError",
              "root.SchemasPutSchemaUiFieldsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/ui",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldsInLists": {
                    "docs": "The name of fields that are used in content lists.",
                    "type": "optional<list<string>>",
                  },
                  "fieldsInReferences": {
                    "docs": "The name of fields that are used in content references.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureUiFieldsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema UI fields defined.",
              "type": "root.SchemaDto",
            },
          },
          "putScripts": {
            "auth": true,
            "display-name": "Update the scripts.",
            "docs": undefined,
            "errors": [
              "root.SchemasPutScriptsRequestBadRequestError",
              "root.SchemasPutScriptsRequestNotFoundError",
              "root.SchemasPutScriptsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.SchemaScriptsDto",
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "showField": {
            "auth": true,
            "display-name": "Show a schema field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.SchemasShowFieldRequestBadRequestError",
              "root.SchemasShowFieldRequestNotFoundError",
              "root.SchemasShowFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/show",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to show.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "showNestedField": {
            "auth": true,
            "display-name": "Show a nested field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.SchemasShowNestedFieldRequestBadRequestError",
              "root.SchemasShowNestedFieldRequestNotFoundError",
              "root.SchemasShowNestedFieldRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to show.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "unpublishSchema": {
            "auth": true,
            "display-name": "Unpublish a schema.",
            "docs": undefined,
            "errors": [
              "root.SchemasUnpublishSchemaRequestBadRequestError",
              "root.SchemasUnpublishSchemaRequestNotFoundError",
              "root.SchemasUnpublishSchemaRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/unpublish",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to unpublish.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema unpublished.",
              "type": "root.SchemaDto",
            },
          },
        },
      },
    },
    "search.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getSearchResults": {
            "auth": true,
            "display-name": "Get search results.",
            "docs": undefined,
            "errors": [
              "root.SearchGetSearchResultsRequestNotFoundError",
              "root.SearchGetSearchResultsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "label": "label",
                      "name": "name",
                      "type": "Asset",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/search",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "SearchGetSearchResultsRequest",
              "query-parameters": {
                "query": {
                  "docs": "The search query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Search results returned.",
              "type": "list<root.SearchResultDto>",
            },
          },
        },
      },
    },
    "statistics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getCurrentStorageSize": {
            "auth": true,
            "display-name": "Get total asset size.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetCurrentStorageSizeRequestNotFoundError",
              "root.StatisticsGetCurrentStorageSizeRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "maxAllowed": 1000000,
                    "size": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/storage/today",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getLog": {
            "auth": true,
            "display-name": "Get api calls as log file.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetLogRequestNotFoundError",
              "root.StatisticsGetLogRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "downloadUrl": "downloadUrl",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/log",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Usage tracking results returned.",
              "type": "root.LogDownloadDto",
            },
          },
          "getStorageSizes": {
            "auth": true,
            "display-name": "Get asset usage by date.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetStorageSizesRequestNotFoundError",
              "root.StatisticsGetStorageSizesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "fromDate": "fromDate",
                  "toDate": "toDate",
                },
                "response": {
                  "body": [
                    {
                      "date": "date",
                      "totalCount": 1000000,
                      "totalSize": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getStorageSizesForTeam": {
            "auth": true,
            "display-name": "Get asset usage by date for team.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetStorageSizesForTeamRequestNotFoundError",
              "root.StatisticsGetStorageSizesForTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "fromDate": "fromDate",
                  "team": "team",
                  "toDate": "toDate",
                },
                "response": {
                  "body": [
                    {
                      "date": "date",
                      "totalCount": 1000000,
                      "totalSize": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getTeamCurrentStorageSizeForTeam": {
            "auth": true,
            "display-name": "Get total asset size by team.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetTeamCurrentStorageSizeForTeamRequestNotFoundError",
              "root.StatisticsGetTeamCurrentStorageSizeForTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "maxAllowed": 1000000,
                    "size": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/usages/storage/today",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getUsages": {
            "auth": true,
            "display-name": "Get api calls in date range.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetUsagesRequestNotFoundError",
              "root.StatisticsGetUsagesRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "fromDate": "fromDate",
                  "toDate": "toDate",
                },
                "response": {
                  "body": {
                    "allowedBytes": 1000000,
                    "allowedCalls": 1000000,
                    "averageElapsedMs": 1.1,
                    "blockingApiCalls": 1000000,
                    "details": {
                      "key": [
                        {
                          "averageElapsedMs": 1.1,
                          "date": "date",
                          "totalBytes": 1000000,
                          "totalCalls": 1000000,
                        },
                      ],
                    },
                    "monthBytes": 1000000,
                    "monthCalls": 1000000,
                    "totalBytes": 1000000,
                    "totalCalls": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
          "getUsagesForTeam": {
            "auth": true,
            "display-name": "Get api calls in date range for team.",
            "docs": undefined,
            "errors": [
              "root.StatisticsGetUsagesForTeamRequestNotFoundError",
              "root.StatisticsGetUsagesForTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "fromDate": "fromDate",
                  "team": "team",
                  "toDate": "toDate",
                },
                "response": {
                  "body": {
                    "allowedBytes": 1000000,
                    "allowedCalls": 1000000,
                    "averageElapsedMs": 1.1,
                    "blockingApiCalls": 1000000,
                    "details": {
                      "key": [
                        {
                          "averageElapsedMs": 1.1,
                          "date": "date",
                          "totalBytes": 1000000,
                          "totalCalls": 1000000,
                        },
                      ],
                    },
                    "monthBytes": 1000000,
                    "monthCalls": 1000000,
                    "totalBytes": 1000000,
                    "totalCalls": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
        },
      },
    },
    "teams.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteContributor": {
            "auth": true,
            "display-name": "Remove contributor.",
            "docs": undefined,
            "errors": [
              "root.TeamsDeleteContributorRequestBadRequestError",
              "root.TeamsDeleteContributorRequestNotFoundError",
              "root.TeamsDeleteContributorRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the contributor.",
                "type": "string",
              },
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "display-name": "Remove yourself.",
            "docs": undefined,
            "errors": [
              "root.TeamsDeleteMyselfRequestBadRequestError",
              "root.TeamsDeleteMyselfRequestNotFoundError",
              "root.TeamsDeleteMyselfRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors/me",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "display-name": "Get team contributors.",
            "docs": undefined,
            "errors": [
              "root.TeamsGetContributorsRequestNotFoundError",
              "root.TeamsGetContributorsRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getTeam": {
            "auth": true,
            "display-name": "Get an team by name.",
            "docs": undefined,
            "errors": [
              "root.TeamsGetTeamRequestNotFoundError",
              "root.TeamsGetTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "roleName": "roleName",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Teams returned.",
              "type": "root.TeamDto",
            },
          },
          "getTeams": {
            "auth": true,
            "display-name": "Get your teams.",
            "docs": "You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow).
You will retrieve all teams, where you are assigned as a contributor.",
            "errors": [
              "root.TeamsGetTeamsRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "roleName": "roleName",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams",
            "response": {
              "docs": "Teams returned.",
              "type": "list<root.TeamDto>",
            },
          },
          "postContributor": {
            "auth": true,
            "display-name": "Assign contributor to team.",
            "docs": undefined,
            "errors": [
              "root.TeamsPostContributorRequestBadRequestError",
              "root.TeamsPostContributorRequestNotFoundError",
              "root.TeamsPostContributorRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "request": {
                  "contributorId": "contributorId",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.AssignContributorDto",
            },
            "response": {
              "docs": "Contributor assigned to team.",
              "type": "root.ContributorsDto",
            },
          },
          "postTeam": {
            "auth": true,
            "display-name": "Create a new team.",
            "docs": "You can only create an team when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new team automatically.",
            "errors": [
              "root.TeamsPostTeamRequestBadRequestError",
              "root.TeamsPostTeamRequestConflictError",
              "root.TeamsPostTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "roleName": "roleName",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/teams",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "CreateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team created.",
              "type": "root.TeamDto",
            },
          },
          "putTeam": {
            "auth": true,
            "display-name": "Update the team.",
            "docs": undefined,
            "errors": [
              "root.TeamsPutTeamRequestBadRequestError",
              "root.TeamsPutTeamRequestNotFoundError",
              "root.TeamsPutTeamRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "roleName": "roleName",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": "The name of the team to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team updated.",
              "type": "root.TeamDto",
            },
          },
        },
      },
    },
    "templates.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getTemplate": {
            "auth": true,
            "display-name": "Get template details.",
            "docs": undefined,
            "errors": [
              "root.TemplatesGetTemplateRequestNotFoundError",
              "root.TemplatesGetTemplateRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "details": "details",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/templates/{name}",
            "path-parameters": {
              "name": {
                "docs": "The name of the template.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Template returned.",
              "type": "root.TemplateDetailsDto",
            },
          },
          "getTemplates": {
            "auth": true,
            "display-name": "Get all templates.",
            "docs": undefined,
            "errors": [
              "root.TemplatesGetTemplatesRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "description": "description",
                        "isStarter": true,
                        "name": "name",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/templates",
            "response": {
              "docs": "Templates returned.",
              "type": "root.TemplatesDto",
            },
          },
        },
      },
    },
    "translations.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "postTranslation": {
            "auth": true,
            "display-name": "Translate a text.",
            "docs": undefined,
            "errors": [
              "root.TranslationsPostTranslationRequestBadRequestError",
              "root.TranslationsPostTranslationRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "targetLanguage": "targetLanguage",
                  "text": "text",
                },
                "response": {
                  "body": {
                    "result": "Translated",
                    "text": "text",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/translations",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "sourceLanguage": {
                    "docs": "The optional source language.",
                    "type": "optional<string>",
                  },
                  "targetLanguage": {
                    "docs": "The target language.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "text": {
                    "docs": "The text to translate.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "TranslateDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Text translated.",
              "type": "root.TranslationDto",
            },
          },
        },
      },
    },
    "userManagement.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteUser": {
            "auth": true,
            "display-name": "Delete a User.",
            "docs": undefined,
            "errors": [
              "root.UserManagementDeleteUserRequestBadRequestError",
              "root.UserManagementDeleteUserRequestForbiddenError",
              "root.UserManagementDeleteUserRequestNotFoundError",
              "root.UserManagementDeleteUserRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to delete.",
                "type": "string",
              },
            },
          },
          "getUser": {
            "auth": true,
            "display-name": "Get a user by ID.",
            "docs": undefined,
            "errors": [
              "root.UserManagementGetUserRequestNotFoundError",
              "root.UserManagementGetUserRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User returned.",
              "type": "root.UserDto",
            },
          },
          "getUsers": {
            "auth": true,
            "display-name": "Get users by query.",
            "docs": undefined,
            "errors": [
              "root.UserManagementGetUsersRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "displayName": "displayName",
                        "email": "email",
                        "id": "id",
                        "isLocked": true,
                        "permissions": [
                          "permissions",
                        ],
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/user-management",
            "request": {
              "name": "UserManagementGetUsersRequest",
              "query-parameters": {
                "query": {
                  "docs": "Optional query to search by email address or username.",
                  "type": "optional<string>",
                },
                "skip": {
                  "docs": "The number of users to skip.",
                  "type": "optional<integer>",
                },
                "take": {
                  "docs": "The number of users to return.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "root.UsersDto",
            },
          },
          "lockUser": {
            "auth": true,
            "display-name": "Lock a user.",
            "docs": undefined,
            "errors": [
              "root.UserManagementLockUserRequestBadRequestError",
              "root.UserManagementLockUserRequestForbiddenError",
              "root.UserManagementLockUserRequestNotFoundError",
              "root.UserManagementLockUserRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/user-management/{id}/lock",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to lock.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User locked.",
              "type": "root.UserDto",
            },
          },
          "postUser": {
            "auth": true,
            "display-name": "Create a new user.",
            "docs": undefined,
            "errors": [
              "root.UserManagementPostUserRequestBadRequestError",
              "root.UserManagementPostUserRequestInternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "displayName": "displayName",
                  "email": "email",
                  "password": "password",
                  "permissions": [
                    "permissions",
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/user-management",
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "putUser": {
            "auth": true,
            "display-name": "Update a user.",
            "docs": undefined,
            "errors": [
              "root.UserManagementPutUserRequestBadRequestError",
              "root.UserManagementPutUserRequestNotFoundError",
              "root.UserManagementPutUserRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "request": {
                  "displayName": "displayName",
                  "email": "email",
                  "permissions": [
                    "permissions",
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "optional<string>",
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "unlockUser": {
            "auth": true,
            "display-name": "Unlock a user.",
            "docs": undefined,
            "errors": [
              "root.UserManagementUnlockUserRequestBadRequestError",
              "root.UserManagementUnlockUserRequestForbiddenError",
              "root.UserManagementUnlockUserRequestNotFoundError",
              "root.UserManagementUnlockUserRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/user-management/{id}/unlock",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to unlock.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User unlocked.",
              "type": "root.UserDto",
            },
          },
        },
      },
    },
    "users.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getUser": {
            "auth": true,
            "display-name": "Get user by id.",
            "docs": undefined,
            "errors": [
              "root.UsersGetUserRequestNotFoundError",
              "root.UsersGetUserRequestInternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user (GUID).",
                "type": "string",
              },
            },
            "response": {
              "docs": "User found.",
              "type": "root.UserDto",
            },
          },
          "getUserPicture": {
            "auth": true,
            "display-name": "Get user picture by id.",
            "docs": undefined,
            "errors": [
              "root.UsersGetUserPictureRequestNotFoundError",
              "root.UsersGetUserPictureRequestInternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users/{id}/picture",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user (GUID).",
                "type": "string",
              },
            },
            "response": {
              "docs": "User found and image or fallback returned.",
              "type": "file",
            },
          },
          "getUserResources": {
            "auth": true,
            "display-name": "Get the user resources.",
            "docs": undefined,
            "errors": [
              "root.UsersGetUserResourcesRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api",
            "response": {
              "docs": "User resources returned.",
              "type": "root.ResourcesDto",
            },
          },
          "getUsers": {
            "auth": true,
            "display-name": "Get users by query.",
            "docs": "Search the user by query that contains the email address or the part of the email address.",
            "errors": [
              "root.UsersGetUsersRequestInternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users",
            "request": {
              "name": "UsersGetUsersRequest",
              "query-parameters": {
                "query": {
                  "docs": "The query to search the user by email address. Case invariant.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "list<root.UserDto>",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "AppsDeleteAppRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteAppRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteAppRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteClientRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteClientRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteClientRequestNotFoundError": {
        "docs": "Client or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteContributorRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteContributorRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteContributorRequestNotFoundError": {
        "docs": "Contributor or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteImageRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteImageRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteImageRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteLanguageRequestBadRequestError": {
        "docs": "Language is master language.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteLanguageRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteLanguageRequestNotFoundError": {
        "docs": "Language or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteMyselfRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteMyselfRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteMyselfRequestNotFoundError": {
        "docs": "Contributor or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteRoleRequestBadRequestError": {
        "docs": "Role is in use by contributor or client or a default role.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteRoleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteRoleRequestNotFoundError": {
        "docs": "Role or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsDeleteWorkflowRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsDeleteWorkflowRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsDeleteWorkflowRequestNotFoundError": {
        "docs": "Workflow or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetAppRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetAppRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetAppsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetAssetScriptsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetAssetScriptsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetClientsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetClientsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetContributorsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetContributorsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetImageRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetImageRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetLanguagesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetLanguagesRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetPermissionsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetPermissionsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetRolesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetRolesRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetSettingsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetSettingsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsGetTeamAppsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetWorkflowsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsGetWorkflowsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPostAppRequestBadRequestError": {
        "docs": "App request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPostAppRequestConflictError": {
        "docs": "App name is already in use.",
        "status-code": 409,
        "type": "ErrorDto",
      },
      "AppsPostAppRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPostClientRequestBadRequestError": {
        "docs": "Client request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPostClientRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPostClientRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPostContributorRequestBadRequestError": {
        "docs": "Contributor request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPostContributorRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPostContributorRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPostLanguageRequestBadRequestError": {
        "docs": "Language request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPostLanguageRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPostLanguageRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPostRoleRequestBadRequestError": {
        "docs": "Role request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPostRoleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPostRoleRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPostWorkflowRequestBadRequestError": {
        "docs": "Workflow request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPostWorkflowRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPostWorkflowRequestNotFoundError": {
        "docs": "Workflow or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutAppRequestBadRequestError": {
        "docs": "App request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutAppRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutAppRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutAppTeamRequestBadRequestError": {
        "docs": "App request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutAppTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutAppTeamRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutAssetScriptsRequestBadRequestError": {
        "docs": "Asset request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutAssetScriptsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutAssetScriptsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutClientRequestBadRequestError": {
        "docs": "Client request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutClientRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutClientRequestNotFoundError": {
        "docs": "Client or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutLanguageRequestBadRequestError": {
        "docs": "Language request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutLanguageRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutLanguageRequestNotFoundError": {
        "docs": "Language or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutRoleRequestBadRequestError": {
        "docs": "Role request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutRoleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutRoleRequestNotFoundError": {
        "docs": "Role or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutSettingsRequestBadRequestError": {
        "docs": "App request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutSettingsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutSettingsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsPutWorkflowRequestBadRequestError": {
        "docs": "Workflow request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsPutWorkflowRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsPutWorkflowRequestNotFoundError": {
        "docs": "Workflow or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AppsUploadImageRequestBadRequestError": {
        "docs": "App request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AppsUploadImageRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AppsUploadImageRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsBulkUpdateAssetsRequestBadRequestError": {
        "docs": "Assets request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsBulkUpdateAssetsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsBulkUpdateAssetsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsDeleteAssetFolderRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsDeleteAssetFolderRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsDeleteAssetFolderRequestNotFoundError": {
        "docs": "Asset folder or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsDeleteAssetRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsDeleteAssetRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsDeleteAssetRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetAssetContentBySlugRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetAssetContentBySlugRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetAssetContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetAssetContentRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetAssetFoldersRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetAssetFoldersRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetAssetRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetAssetRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetAssetsPostRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsGetAssetsPostRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetAssetsPostRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetAssetsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetAssetsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsGetTagsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsGetTagsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPostAssetFolderRequestBadRequestError": {
        "docs": "Asset folder request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPostAssetFolderRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPostAssetFolderRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPostAssetRequestBadRequestError": {
        "docs": "Asset request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPostAssetRequestContentTooLargeError": {
        "docs": "Asset exceeds the maximum upload size.",
        "status-code": 413,
        "type": "ErrorDto",
      },
      "AssetsPostAssetRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPostAssetRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPostUpsertAssetRequestBadRequestError": {
        "docs": "Asset request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPostUpsertAssetRequestContentTooLargeError": {
        "docs": "Asset exceeds the maximum upload size.",
        "status-code": 413,
        "type": "ErrorDto",
      },
      "AssetsPostUpsertAssetRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPostUpsertAssetRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPutAssetContentRequestBadRequestError": {
        "docs": "Asset request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPutAssetContentRequestContentTooLargeError": {
        "docs": "Asset exceeds the maximum upload size.",
        "status-code": 413,
        "type": "ErrorDto",
      },
      "AssetsPutAssetContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPutAssetContentRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPutAssetFolderParentRequestBadRequestError": {
        "docs": "Asset folder request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPutAssetFolderParentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPutAssetFolderParentRequestNotFoundError": {
        "docs": "Asset folder or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPutAssetFolderRequestBadRequestError": {
        "docs": "Asset folder request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPutAssetFolderRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPutAssetFolderRequestNotFoundError": {
        "docs": "Asset folder or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPutAssetParentRequestBadRequestError": {
        "docs": "Asset request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPutAssetParentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPutAssetParentRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPutAssetRequestBadRequestError": {
        "docs": "Asset request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPutAssetRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPutAssetRequestNotFoundError": {
        "docs": "Asset or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "AssetsPutTagRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "AssetsPutTagRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "AssetsPutTagRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "BackupsDeleteBackupRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "BackupsDeleteBackupRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "BackupsDeleteBackupRequestNotFoundError": {
        "docs": "Backup or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "BackupsGetBackupContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "BackupsGetBackupContentRequestNotFoundError": {
        "docs": "Backup or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "BackupsGetBackupContentV2RequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "BackupsGetBackupContentV2RequestNotFoundError": {
        "docs": "Backup or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "BackupsGetBackupsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "BackupsGetBackupsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "BackupsGetRestoreJobRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "BackupsPostBackupRequestBadRequestError": {
        "docs": "Backup contingent reached.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "BackupsPostBackupRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "BackupsPostBackupRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "BackupsPostRestoreJobRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "BackupsPostRestoreJobRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "CommentsDeleteCommentRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "CommentsDeleteCommentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "CommentsDeleteCommentRequestNotFoundError": {
        "docs": "Comment or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "CommentsGetCommentsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "CommentsGetCommentsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "CommentsGetWatchingUsersRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "CommentsGetWatchingUsersRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "CommentsPostCommentRequestBadRequestError": {
        "docs": "Comment request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "CommentsPostCommentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "CommentsPostCommentRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "CommentsPutCommentRequestBadRequestError": {
        "docs": "Comment request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "CommentsPutCommentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "CommentsPutCommentRequestNotFoundError": {
        "docs": "Comment or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsBulkUpdateContentsRequestBadRequestError": {
        "docs": "Contents request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsBulkUpdateContentsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsBulkUpdateContentsRequestNotFoundError": {
        "docs": "Contents references, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsCreateDraftRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsCreateDraftRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsCreateDraftRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsDeleteContentRequestBadRequestError": {
        "docs": "Content cannot be deleted.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsDeleteContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsDeleteContentRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsDeleteContentStatusRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsDeleteContentStatusRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsDeleteContentStatusRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsDeleteVersionRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsDeleteVersionRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsDeleteVersionRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetContentRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetContentValidityRequestBadRequestError": {
        "docs": "Content not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsGetContentValidityRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetContentValidityRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetContentVersionRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetContentVersionRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetContentsPostRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsGetContentsPostRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetContentsPostRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetContentsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetContentsRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetReferencesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetReferencesRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsGetReferencingRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsGetReferencingRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsPatchContentRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsPatchContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsPatchContentRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsPostContentRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsPostContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsPostContentRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsPostContentsRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsPostContentsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsPostContentsRequestNotFoundError": {
        "docs": "Content references, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsPostUpsertContentRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsPostUpsertContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsPostUpsertContentRequestNotFoundError": {
        "docs": "Content references, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsPutContentRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsPutContentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsPutContentRequestNotFoundError": {
        "docs": "Content references, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "ContentsPutContentStatusRequestBadRequestError": {
        "docs": "Content request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ContentsPutContentStatusRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "ContentsPutContentStatusRequestNotFoundError": {
        "docs": "Content, schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "DiagnosticsGetDumpRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "DiagnosticsGetDumpRequestNotImplementedError": {
        "docs": "Not configured.",
        "status-code": 501,
        "type": "ErrorDto",
      },
      "DiagnosticsGetGcDumpRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "DiagnosticsGetGcDumpRequestNotImplementedError": {
        "docs": "Not configured.",
        "status-code": 501,
        "type": "ErrorDto",
      },
      "EventConsumersGetEventConsumersRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "EventConsumersResetEventConsumerRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "EventConsumersResetEventConsumerRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "EventConsumersResetEventConsumerRequestNotFoundError": {
        "docs": "Event consumer not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "EventConsumersStartEventConsumerRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "EventConsumersStartEventConsumerRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "EventConsumersStartEventConsumerRequestNotFoundError": {
        "docs": "Event consumer not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "EventConsumersStopEventConsumerRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "EventConsumersStopEventConsumerRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "EventConsumersStopEventConsumerRequestNotFoundError": {
        "docs": "Event consumer not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "HistoryGetAppHistoryRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "HistoryGetAppHistoryRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "HistoryGetTeamHistoryRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "HistoryGetTeamHistoryRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "LanguagesGetLanguagesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "NewsGetNewsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "NotificationsDeleteCommentRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "NotificationsDeleteCommentRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "NotificationsDeleteCommentRequestNotFoundError": {
        "docs": "Comment not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "NotificationsGetNotificationsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PingGetAppPingRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PingGetInfoRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PingGetPingRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PlansGetPlansRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PlansGetPlansRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "PlansGetTeamPlansRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PlansGetTeamPlansRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "PlansPutPlanRequestBadRequestError": {
        "docs": "Plan not owned by user.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "PlansPutPlanRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PlansPutPlanRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "PlansPutTeamPlanRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "PlansPutTeamPlanRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "PlansPutTeamPlanRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesDeleteEventRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesDeleteEventRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesDeleteEventRequestNotFoundError": {
        "docs": "App or rule event not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesDeleteEventsRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesDeleteEventsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesDeleteRuleEventsRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesDeleteRuleEventsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesDeleteRuleRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesDeleteRuleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesDeleteRuleRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesDeleteRuleRunRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesDeleteRuleRunRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesDisableRuleRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesDisableRuleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesDisableRuleRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesEnableRuleRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesEnableRuleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesEnableRuleRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesGetActionsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesGetEventSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesGetEventSchemaRequestNotFoundError": {
        "docs": "Rule event not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesGetEventTypesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesGetEventsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesGetEventsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesGetRulesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesGetRulesRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesPostRuleRequestBadRequestError": {
        "docs": "Rule request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesPostRuleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesPostRuleRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesPutEventRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesPutEventRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesPutEventRequestNotFoundError": {
        "docs": "App or rule event not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesPutRuleRequestBadRequestError": {
        "docs": "Rule request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesPutRuleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesPutRuleRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesPutRuleRunRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesPutRuleRunRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesSimulateGetRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesSimulateGetRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesSimulatePostRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesSimulatePostRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesSimulatePostRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "RulesTriggerRuleRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "RulesTriggerRuleRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "RulesTriggerRuleRequestNotFoundError": {
        "docs": "Rule or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasDeleteFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasDeleteFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasDeleteFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasDeleteNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasDeleteNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasDeleteNestedFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasDeleteSchemaRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasDeleteSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasDeleteSchemaRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasDisableFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasDisableFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasDisableFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasDisableNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasDisableNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasDisableNestedFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasEnableFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasEnableFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasEnableFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasEnableNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasEnableNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasEnableNestedFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasGetSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasGetSchemaRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasGetSchemasRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasGetSchemasRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasHideFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasHideFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasHideFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasHideNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasHideNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasHideNestedFieldRequestNotFoundError": {
        "docs": "Field, schema, or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasLockFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasLockFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasLockFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasLockNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasLockNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasLockNestedFieldRequestNotFoundError": {
        "docs": "Field, schema, or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPostFieldRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPostFieldRequestConflictError": {
        "docs": "Schema field name already in use.",
        "status-code": 409,
        "type": "ErrorDto",
      },
      "SchemasPostFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPostFieldRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPostNestedFieldRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPostNestedFieldRequestConflictError": {
        "docs": "Schema field name already in use.",
        "status-code": 409,
        "type": "ErrorDto",
      },
      "SchemasPostNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPostNestedFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPostSchemaRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPostSchemaRequestConflictError": {
        "docs": "Schema name already in use.",
        "status-code": 409,
        "type": "ErrorDto",
      },
      "SchemasPostSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPublishSchemaRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPublishSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPublishSchemaRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutCategoryRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutCategoryRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutCategoryRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutFieldRequestBadRequestError": {
        "docs": "Schema field request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutNestedFieldOrderingRequestBadRequestError": {
        "docs": "Schema field request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutNestedFieldOrderingRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutNestedFieldOrderingRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutNestedFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutPreviewUrlsRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutPreviewUrlsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutPreviewUrlsRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutRulesRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutRulesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutRulesRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutSchemaFieldOrderingRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaFieldOrderingRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaFieldOrderingRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutSchemaRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutSchemaSyncRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaSyncRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaSyncRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutSchemaUiFieldsRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaUiFieldsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutSchemaUiFieldsRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasPutScriptsRequestBadRequestError": {
        "docs": "Schema request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasPutScriptsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasPutScriptsRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasShowFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasShowFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasShowFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasShowNestedFieldRequestBadRequestError": {
        "docs": "Schema field request not valid or field locked.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasShowNestedFieldRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasShowNestedFieldRequestNotFoundError": {
        "docs": "Schema, field or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SchemasUnpublishSchemaRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "SchemasUnpublishSchemaRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SchemasUnpublishSchemaRequestNotFoundError": {
        "docs": "Schema or app not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "SearchGetSearchResultsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "SearchGetSearchResultsRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetCurrentStorageSizeRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetCurrentStorageSizeRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetLogRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetLogRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetStorageSizesForTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetStorageSizesForTeamRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetStorageSizesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetStorageSizesRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetTeamCurrentStorageSizeForTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetTeamCurrentStorageSizeForTeamRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetUsagesForTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetUsagesForTeamRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "StatisticsGetUsagesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "StatisticsGetUsagesRequestNotFoundError": {
        "docs": "App not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TeamsDeleteContributorRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "TeamsDeleteContributorRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsDeleteContributorRequestNotFoundError": {
        "docs": "Contributor or team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TeamsDeleteMyselfRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "TeamsDeleteMyselfRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsDeleteMyselfRequestNotFoundError": {
        "docs": "Contributor or team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TeamsGetContributorsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsGetContributorsRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TeamsGetTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsGetTeamRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TeamsGetTeamsRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsPostContributorRequestBadRequestError": {
        "docs": "Contributor request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "TeamsPostContributorRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsPostContributorRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TeamsPostTeamRequestBadRequestError": {
        "docs": "Team request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "TeamsPostTeamRequestConflictError": {
        "docs": "Team name is already in use.",
        "status-code": 409,
        "type": "ErrorDto",
      },
      "TeamsPostTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsPutTeamRequestBadRequestError": {
        "docs": "Team request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "TeamsPutTeamRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TeamsPutTeamRequestNotFoundError": {
        "docs": "Team not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TemplatesGetTemplateRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TemplatesGetTemplateRequestNotFoundError": {
        "docs": "Template not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "TemplatesGetTemplatesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "TranslationsPostTranslationRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "TranslationsPostTranslationRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementDeleteUserRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "UserManagementDeleteUserRequestForbiddenError": {
        "docs": "User is the current user.",
        "status-code": 403,
        "type": "ErrorDto",
      },
      "UserManagementDeleteUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementDeleteUserRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UserManagementGetUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementGetUserRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UserManagementGetUsersRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementLockUserRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "UserManagementLockUserRequestForbiddenError": {
        "docs": "User is the current user.",
        "status-code": 403,
        "type": "ErrorDto",
      },
      "UserManagementLockUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementLockUserRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UserManagementPostUserRequestBadRequestError": {
        "docs": "User request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "UserManagementPostUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementPutUserRequestBadRequestError": {
        "docs": "User request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "UserManagementPutUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementPutUserRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UserManagementUnlockUserRequestBadRequestError": {
        "docs": "Validation error.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "UserManagementUnlockUserRequestForbiddenError": {
        "docs": "User is the current user.",
        "status-code": 403,
        "type": "ErrorDto",
      },
      "UserManagementUnlockUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UserManagementUnlockUserRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UsersGetUserPictureRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UsersGetUserPictureRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UsersGetUserRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UsersGetUserRequestNotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "UsersGetUserResourcesRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "UsersGetUsersRequestInternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
    },
    "types": {
      "ActionTypeEnum": {
        "docs": "",
        "enum": [
          "Broadcast",
          "User",
          "Group",
        ],
      },
      "AddFieldDto": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
            },
          },
          "partitioning": {
            "docs": "Determines the optional partitioning of the field.",
            "type": "optional<string>",
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "AlgoliaRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The API key to grant access to Squidex.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "appId": {
            "docs": "The application ID.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "delete": {
            "docs": "The condition when to delete the entry.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "AllContentsByPostDto": {
        "docs": undefined,
        "properties": {
          "ids": {
            "docs": "The list of ids to query.",
            "type": "optional<list<string>>",
          },
          "oData": {
            "docs": "The optional odata query.",
            "type": "optional<string>",
          },
          "q": "optional<unknown>",
          "references": {
            "docs": "The ID of the reference content item.",
            "type": "optional<string>",
          },
          "referencing": {
            "docs": "The ID of the referencing content item.",
            "type": "optional<string>",
          },
          "scheduledFrom": {
            "docs": "The start of the schedule.",
            "type": "optional<datetime>",
          },
          "scheduledTo": {
            "docs": "The end of the schedule.",
            "type": "optional<datetime>",
          },
        },
      },
      "AppDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "canAccessApi": {
            "availability": "deprecated",
            "docs": "Indicates if the user can access the api.",
            "type": "boolean",
          },
          "canAccessContent": {
            "docs": "Indicates if the user can access at least one content.",
            "type": "boolean",
          },
          "created": {
            "docs": "The timestamp when the app has been created.",
            "type": "datetime",
          },
          "description": {
            "docs": "The optional description of the app.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of the app.",
            "type": "string",
          },
          "label": {
            "docs": "The optional label of the app.",
            "type": "optional<string>",
          },
          "lastModified": {
            "docs": "The timestamp when the app has been modified last.",
            "type": "datetime",
          },
          "name": {
            "docs": "The name of the app.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "permissions": {
            "docs": "The permission level of the user.",
            "type": "list<string>",
          },
          "roleName": {
            "docs": "The role name of the user.",
            "type": "optional<string>",
          },
          "roleProperties": {
            "docs": "The properties from the role.",
            "type": "map<string, unknown>",
          },
          "teamId": {
            "docs": "The ID of the team.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The version of the app.",
            "type": "long",
          },
        },
      },
      "AppLanguageDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "englishName": {
            "docs": "The english name of the language.",
            "type": "string",
          },
          "fallback": {
            "docs": "The fallback languages.",
            "type": "list<string>",
          },
          "isMaster": {
            "docs": "Indicates if the language is the master language.",
            "type": "boolean",
          },
          "isOptional": {
            "docs": "Indicates if the language is optional.",
            "type": "boolean",
          },
          "iso2Code": {
            "docs": "The iso code of the language.",
            "type": "string",
          },
        },
      },
      "AppLanguagesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The languages.",
            "type": "list<AppLanguageDto>",
          },
        },
      },
      "AppSettingsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "editors": {
            "docs": "The configured UI editors.",
            "type": "list<EditorDto>",
          },
          "hideDateTimeModeButton": {
            "docs": "Hide the datetime mode button.",
            "type": "boolean",
          },
          "hideScheduler": {
            "docs": "Hide the scheduler for content items.",
            "type": "boolean",
          },
          "patterns": {
            "docs": "The configured app patterns.",
            "type": "list<PatternDto>",
          },
          "version": {
            "docs": "The version of the app.",
            "type": "long",
          },
        },
      },
      "ArrayFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "uniqueFields": {
            "docs": "The fields that must be unique.",
            "type": "optional<list<string>>",
          },
        },
      },
      "AssetChangedRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "condition": {
            "docs": "Javascript condition when to trigger.",
            "type": "optional<string>",
          },
        },
      },
      "AssetDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "_meta": {
            "docs": "The metadata.",
            "type": "optional<AssetMeta>",
          },
          "created": {
            "docs": "The date and time when the asset has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the schema.",
            "type": "string",
          },
          "editToken": {
            "docs": "The UI token.",
            "type": "optional<string>",
          },
          "fileHash": {
            "docs": "The file hash.",
            "type": "optional<string>",
          },
          "fileName": {
            "docs": "The file name.",
            "type": "string",
          },
          "fileSize": {
            "docs": "The size of the file in bytes.",
            "type": "long",
          },
          "fileType": {
            "docs": "The file type.",
            "type": "string",
          },
          "fileVersion": {
            "docs": "The version of the file.",
            "type": "long",
          },
          "id": {
            "docs": "The ID of the asset.",
            "type": "string",
          },
          "isImage": {
            "availability": "deprecated",
            "docs": "Determines of the created file is an image.",
            "type": "boolean",
          },
          "isProtected": {
            "docs": "True, when the asset is not public.",
            "type": "boolean",
          },
          "lastModified": {
            "docs": "The date and time when the asset has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the asset.",
            "type": "string",
          },
          "metadata": {
            "docs": "The asset metadata.",
            "type": "map<string, unknown>",
          },
          "metadataText": {
            "docs": "The formatted text representation of the metadata.",
            "type": "string",
          },
          "mimeType": {
            "docs": "The mime type.",
            "type": "string",
          },
          "parentId": {
            "docs": "The ID of the parent folder. Empty for files without parent.",
            "type": "string",
          },
          "pixelHeight": {
            "availability": "deprecated",
            "docs": "The height of the image in pixels if the asset is an image.",
            "type": "optional<integer>",
          },
          "pixelWidth": {
            "availability": "deprecated",
            "docs": "The width of the image in pixels if the asset is an image.",
            "type": "optional<integer>",
          },
          "slug": {
            "docs": "The slug.",
            "type": "string",
          },
          "tags": {
            "docs": "The asset tags.",
            "type": "optional<list<string>>",
          },
          "type": {
            "docs": "The type of the asset.",
            "type": "AssetType",
          },
          "version": {
            "docs": "The version of the asset.",
            "type": "long",
          },
        },
      },
      "AssetFolderDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "folderName": {
            "docs": "The folder name.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the asset.",
            "type": "string",
          },
          "parentId": {
            "docs": "The ID of the parent folder. Empty for files without parent.",
            "type": "string",
          },
          "version": {
            "docs": "The version of the asset folder.",
            "type": "long",
          },
        },
      },
      "AssetFolderScope": {
        "docs": "",
        "enum": [
          "PathAndItems",
          "Path",
          "Items",
        ],
      },
      "AssetFoldersDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The assets folders.",
            "type": "list<AssetFolderDto>",
          },
          "path": {
            "docs": "The path to the current folder.",
            "type": "list<AssetFolderDto>",
          },
          "total": {
            "docs": "The total number of assets.",
            "type": "long",
          },
        },
      },
      "AssetMeta": {
        "docs": undefined,
        "properties": {
          "isDuplicate": {
            "docs": "Indicates whether the asset is a duplicate.",
            "type": "string",
          },
        },
      },
      "AssetPreviewMode": {
        "docs": "",
        "enum": [
          "ImageAndFileName",
          "Image",
          "FileName",
        ],
      },
      "AssetScriptsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "annotate": {
            "docs": "The script that is executed when annotating a content.",
            "type": "optional<string>",
          },
          "create": {
            "docs": "The script that is executed when creating an asset.",
            "type": "optional<string>",
          },
          "delete": {
            "docs": "The script that is executed when deleting a content.",
            "type": "optional<string>",
          },
          "move": {
            "docs": "The script that is executed when moving a content.",
            "type": "optional<string>",
          },
          "query": {
            "docs": "The script that is executed for each asset when querying assets.",
            "type": "optional<string>",
          },
          "queryPre": {
            "docs": "The script that is executed for all assets when querying assets.",
            "type": "optional<string>",
          },
          "update": {
            "docs": "The script that is executed when updating a content.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The version of the app.",
            "type": "long",
          },
        },
      },
      "AssetType": {
        "docs": "",
        "enum": [
          "Unknown",
          "Image",
          "Audio",
          "Video",
        ],
      },
      "AssetsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The assets.",
            "type": "list<AssetDto>",
          },
          "total": {
            "docs": "The total number of assets.",
            "type": "long",
          },
        },
      },
      "AssetsFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowDuplicates": {
            "docs": "True, if duplicate values are allowed.",
            "type": "boolean",
          },
          "allowedExtensions": {
            "docs": "The allowed file extensions.",
            "type": "optional<list<string>>",
          },
          "aspectHeight": {
            "docs": "The image aspect height in pixels.",
            "type": "optional<integer>",
          },
          "aspectWidth": {
            "docs": "The image aspect width in pixels.",
            "type": "optional<integer>",
          },
          "defaultValue": {
            "docs": "The default value as a list of asset ids.",
            "type": "optional<list<string>>",
          },
          "defaultValues": {
            "docs": "The language specific default value as a list of asset ids.",
            "type": "optional<LocalizedValueOfReadonlyListOfString>",
          },
          "expectedType": {
            "docs": "The expected type.",
            "type": "optional<AssetType>",
          },
          "folderId": {
            "docs": "The initial id to the folder.",
            "type": "optional<string>",
          },
          "maxHeight": {
            "docs": "The maximum image height in pixels.",
            "type": "optional<integer>",
          },
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "maxSize": {
            "docs": "The maximum file size in bytes.",
            "type": "optional<integer>",
          },
          "maxWidth": {
            "docs": "The maximum image width in pixels.",
            "type": "optional<integer>",
          },
          "minHeight": {
            "docs": "The minimum image height in pixels.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minSize": {
            "docs": "The minimum file size in bytes.",
            "type": "optional<integer>",
          },
          "minWidth": {
            "docs": "The minimum image width in pixels.",
            "type": "optional<integer>",
          },
          "mustBeImage": {
            "availability": "deprecated",
            "docs": "True to resolve first image in the content list.",
            "type": "boolean",
          },
          "previewFormat": {
            "docs": "The preview format.",
            "type": "optional<string>",
          },
          "previewMode": {
            "docs": "The preview mode for the asset.",
            "type": "AssetPreviewMode",
          },
          "resolveFirst": {
            "docs": "True to resolve first asset in the content list.",
            "type": "boolean",
          },
          "resolveImage": {
            "availability": "deprecated",
            "docs": "True to resolve first image in the content list.",
            "type": "boolean",
          },
        },
      },
      "AssignContributorDto": {
        "docs": undefined,
        "properties": {
          "contributorId": {
            "docs": "The id or email of the user to add to the app.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "invite": {
            "docs": "Set to true to invite the user if he does not exist.",
            "type": "optional<boolean>",
          },
          "role": {
            "docs": "The role of the contributor.",
            "type": "optional<string>",
          },
        },
      },
      "AzureQueueRuleActionDto": {
        "docs": undefined,
        "properties": {
          "connectionString": {
            "docs": "The connection string to the storage account.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "payload": {
            "docs": "Leave it empty to use the full event as body.",
            "type": "string",
          },
          "queue": {
            "docs": "The name of the queue.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "BackupJobDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "handledAssets": {
            "docs": "The number of handled assets.",
            "type": "integer",
          },
          "handledEvents": {
            "docs": "The number of handled events.",
            "type": "integer",
          },
          "id": {
            "docs": "The ID of the backup job.",
            "type": "string",
          },
          "started": {
            "docs": "The time when the job has been started.",
            "type": "datetime",
          },
          "status": {
            "docs": "The status of the operation.",
            "type": "JobStatus",
          },
          "stopped": {
            "docs": "The time when the job has been stopped.",
            "type": "optional<datetime>",
          },
        },
      },
      "BackupJobsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The backups.",
            "type": "list<BackupJobDto>",
          },
        },
      },
      "BooleanFieldEditor": {
        "docs": "",
        "enum": [
          "Checkbox",
          "Toggle",
        ],
      },
      "BooleanFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<boolean>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfNullableBoolean>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "BooleanFieldEditor",
          },
          "inlineEditable": {
            "docs": "Indicates that the inline editor is enabled for this field.",
            "type": "boolean",
          },
        },
      },
      "BulkResultDto": {
        "docs": undefined,
        "properties": {
          "contentId": {
            "availability": "deprecated",
            "docs": "The ID of the entity that has been handled successfully or not.",
            "type": "optional<string>",
          },
          "error": {
            "docs": "The error when the bulk job failed.",
            "type": "optional<ErrorDto>",
          },
          "id": {
            "docs": "The ID of the entity that has been handled successfully or not.",
            "type": "optional<string>",
          },
          "jobIndex": {
            "docs": "The index of the bulk job where the result belongs to. The order can change.",
            "type": "integer",
          },
        },
      },
      "BulkUpdateAssetType": {
        "docs": "",
        "enum": [
          "Annotate",
          "Move",
          "Delete",
        ],
      },
      "BulkUpdateAssetsJobDto": {
        "docs": undefined,
        "properties": {
          "expectedVersion": {
            "docs": "The expected version.",
            "type": "optional<long>",
          },
          "fileName": {
            "docs": "The new name of the asset.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "An optional ID of the asset to update.",
            "type": "optional<string>",
          },
          "isProtected": {
            "docs": "True, when the asset is not public.",
            "type": "optional<boolean>",
          },
          "metadata": {
            "docs": "The asset metadata.",
            "type": "optional<map<string, unknown>>",
          },
          "parentId": {
            "docs": "The parent folder id.",
            "type": "optional<string>",
          },
          "permanent": {
            "docs": "True to delete the asset permanently.",
            "type": "optional<boolean>",
          },
          "slug": {
            "docs": "The new slug of the asset.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "The new asset tags.",
            "type": "optional<list<string>>",
          },
          "type": {
            "docs": "The update type.",
            "type": "optional<BulkUpdateAssetType>",
          },
        },
      },
      "BulkUpdateContentType": {
        "docs": "",
        "enum": [
          "Upsert",
          "ChangeStatus",
          "Create",
          "Delete",
          "Patch",
          "Update",
          "Validate",
        ],
      },
      "BulkUpdateContentsJobDto": {
        "docs": undefined,
        "properties": {
          "data": {
            "docs": "The data of the content when type is set to 'Upsert', 'Create', 'Update' or 'Patch.",
            "type": "optional<ContentData>",
          },
          "dueTime": {
            "docs": "The due time.",
            "type": "optional<datetime>",
          },
          "expectedCount": {
            "docs": "The number of expected items. Set it to a higher number to update multiple items when a query is defined.",
            "type": "optional<long>",
          },
          "expectedVersion": {
            "docs": "The expected version.",
            "type": "optional<long>",
          },
          "id": {
            "docs": "An optional ID of the content to update.",
            "type": "optional<string>",
          },
          "patch": {
            "docs": "Makes the update as patch.",
            "type": "optional<boolean>",
          },
          "permanent": {
            "docs": "True to delete the content permanently.",
            "type": "optional<boolean>",
          },
          "query": {
            "docs": "An optional query to identify the content to update.",
            "type": "optional<QueryJsonDto>",
          },
          "schema": {
            "docs": "The optional schema id or name.",
            "type": "optional<string>",
          },
          "status": {
            "docs": "The new status when the type is set to 'ChangeStatus' or 'Upsert'.",
            "type": "optional<string>",
          },
          "type": {
            "docs": "The update type.",
            "type": "optional<BulkUpdateContentType>",
          },
        },
      },
      "CallsUsageDtoDto": {
        "docs": undefined,
        "properties": {
          "allowedBytes": {
            "docs": "The included API traffic.",
            "type": "long",
          },
          "allowedCalls": {
            "docs": "The included API calls.",
            "type": "long",
          },
          "averageElapsedMs": {
            "docs": "The average duration in milliseconds.",
            "type": "double",
          },
          "blockingApiCalls": {
            "docs": "The amount of calls that will block the app.",
            "type": "long",
          },
          "details": {
            "docs": "The statistics by date and group.",
            "type": "map<string, list<CallsUsagePerDateDto>>",
          },
          "monthBytes": {
            "docs": "The total number of bytes transferred this month.",
            "type": "long",
          },
          "monthCalls": {
            "docs": "The total number of API calls this month.",
            "type": "long",
          },
          "totalBytes": {
            "docs": "The total number of bytes transferred.",
            "type": "long",
          },
          "totalCalls": {
            "docs": "The total number of API calls.",
            "type": "long",
          },
        },
      },
      "CallsUsagePerDateDto": {
        "docs": undefined,
        "properties": {
          "averageElapsedMs": {
            "docs": "The average duration in milliseconds.",
            "type": "double",
          },
          "date": {
            "docs": "The date when the usage was tracked.",
            "type": "string",
            "validation": {
              "format": "date",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "totalBytes": {
            "docs": "The total number of bytes transferred.",
            "type": "long",
          },
          "totalCalls": {
            "docs": "The total number of API calls.",
            "type": "long",
          },
        },
      },
      "ChangePlanDto": {
        "docs": undefined,
        "properties": {
          "planId": {
            "docs": "The new plan id.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "ClientDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "allowAnonymous": {
            "docs": "True to allow anonymous access without an access token for this client.",
            "type": "boolean",
          },
          "apiCallsLimit": {
            "docs": "The number of allowed api calls per month for this client.",
            "type": "long",
          },
          "apiTrafficLimit": {
            "docs": "The number of allowed api traffic bytes per month for this client.",
            "type": "long",
          },
          "id": {
            "docs": "The client id.",
            "type": "string",
          },
          "name": {
            "docs": "The client name.",
            "type": "string",
          },
          "role": {
            "docs": "The role of the client.",
            "type": "optional<string>",
          },
          "secret": {
            "docs": "The client secret.",
            "type": "string",
          },
        },
      },
      "ClientsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The clients.",
            "type": "list<ClientDto>",
          },
        },
      },
      "CommentDto": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the comment.",
            "type": "string",
          },
          "text": {
            "docs": "The text of the comment.",
            "type": "string",
          },
          "time": {
            "docs": "The time when the comment was created or updated last.",
            "type": "datetime",
          },
          "url": {
            "docs": "The url where the comment is created.",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "user": {
            "docs": "The user who created or updated the comment.",
            "type": "string",
          },
        },
      },
      "CommentRuleActionDto": {
        "docs": undefined,
        "properties": {
          "client": {
            "docs": "An optional client name.",
            "type": "string",
          },
          "text": {
            "docs": "The comment text.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "CommentRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "condition": {
            "docs": "Javascript condition when to trigger.",
            "type": "optional<string>",
          },
        },
      },
      "CommentsDto": {
        "docs": undefined,
        "properties": {
          "createdComments": {
            "docs": "The created comments including the updates.",
            "type": "optional<list<CommentDto>>",
          },
          "deletedComments": {
            "docs": "The deleted comments since the last version.",
            "type": "optional<list<string>>",
          },
          "updatedComments": {
            "docs": "The updates comments since the last version.",
            "type": "optional<list<CommentDto>>",
          },
          "version": {
            "docs": "The current version.",
            "type": "long",
          },
        },
      },
      "ComponentFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "schemaIds": {
            "docs": "The ID of the embedded schemas.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ComponentsFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "schemaIds": {
            "docs": "The ID of the embedded schemas.",
            "type": "optional<list<string>>",
          },
          "uniqueFields": {
            "docs": "The fields that must be unique.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ConfigurePreviewUrlsDto": "map<string, string>",
      "ContentChangedRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "handleAll": {
            "docs": "Determines whether the trigger should handle all content changes events.",
            "type": "boolean",
          },
          "referencedSchemas": {
            "docs": "The schema references.",
            "type": "optional<list<SchemaCondition>>",
          },
          "schemas": {
            "docs": "The schema settings.",
            "type": "optional<list<SchemaCondition>>",
          },
        },
      },
      "ContentData": "map<string, ContentFieldData>",
      "ContentDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "created": {
            "docs": "The date and time when the content item has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the content item.",
            "type": "string",
          },
          "data": "unknown",
          "editToken": {
            "docs": "The UI token.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The if of the content item.",
            "type": "string",
          },
          "isDeleted": {
            "docs": "Indicates whether the content is deleted.",
            "type": "boolean",
          },
          "lastModified": {
            "docs": "The date and time when the content item has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the content item.",
            "type": "string",
          },
          "newStatus": {
            "docs": "The new status of the content.",
            "type": "optional<string>",
          },
          "newStatusColor": {
            "docs": "The color of the new status.",
            "type": "optional<string>",
          },
          "referenceData": {
            "docs": "The reference data for the frontend UI.",
            "type": "optional<ContentData>",
          },
          "referenceFields": {
            "docs": "The reference fields.",
            "type": "optional<list<FieldDto>>",
          },
          "scheduleJob": {
            "docs": "The scheduled status.",
            "type": "optional<ScheduleJobDto>",
          },
          "schemaDisplayName": {
            "docs": "The display name of the schema.",
            "type": "optional<string>",
          },
          "schemaId": {
            "docs": "The ID of the schema.",
            "type": "string",
          },
          "schemaName": {
            "docs": "The name of the schema.",
            "type": "optional<string>",
          },
          "status": {
            "docs": "The status of the content.",
            "type": "string",
          },
          "statusColor": {
            "docs": "The color of the status.",
            "type": "string",
          },
          "version": {
            "docs": "The version of the content.",
            "type": "long",
          },
        },
      },
      "ContentFieldData": "map<string, unknown>",
      "ContentsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The content items.",
            "type": "list<ContentDto>",
          },
          "statuses": {
            "docs": "The possible statuses.",
            "type": "list<StatusInfoDto>",
          },
          "total": {
            "docs": "The total number of content items.",
            "type": "long",
          },
        },
      },
      "ContributorDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "contributorEmail": {
            "docs": "The email address.",
            "type": "string",
          },
          "contributorId": {
            "docs": "The ID of the user that contributes to the app.",
            "type": "string",
          },
          "contributorName": {
            "docs": "The display name.",
            "type": "string",
          },
          "role": {
            "docs": "The role of the contributor.",
            "type": "optional<string>",
          },
        },
      },
      "ContributorsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "_meta": {
            "docs": "The metadata to provide information about this request.",
            "type": "optional<ContributorsMetadata>",
          },
          "items": {
            "docs": "The contributors.",
            "type": "list<ContributorDto>",
          },
          "maxContributors": {
            "docs": "The maximum number of allowed contributors.",
            "type": "long",
          },
        },
      },
      "ContributorsMetadata": {
        "docs": undefined,
        "properties": {
          "isInvited": {
            "docs": "Indicates whether the user has been invited.",
            "type": "string",
          },
        },
      },
      "CreateContentRuleActionDto": {
        "docs": undefined,
        "properties": {
          "client": {
            "docs": "An optional client name.",
            "type": "string",
          },
          "data": {
            "docs": "The content data.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "publish": {
            "docs": "Publish the content.",
            "type": "boolean",
          },
          "schema": {
            "docs": "The name of the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "CreateRuleDto": {
        "docs": undefined,
        "properties": {
          "action": {
            "docs": "The action properties.",
            "type": "RuleActionDto",
          },
          "trigger": {
            "docs": "The trigger properties.",
            "type": "RuleTriggerDto",
          },
        },
      },
      "CurrentStorageDto": {
        "docs": undefined,
        "properties": {
          "maxAllowed": {
            "docs": "The maximum allowed asset size.",
            "type": "long",
          },
          "size": {
            "docs": "The size in bytes.",
            "type": "long",
          },
        },
      },
      "DateTimeCalculatedDefaultValue": {
        "docs": "",
        "enum": [
          "Now",
          "Today",
        ],
      },
      "DateTimeFieldEditor": {
        "docs": "",
        "enum": [
          "Date",
          "DateTime",
        ],
      },
      "DateTimeFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "calculatedDefaultValue": {
            "docs": "The calculated default value for the field value.",
            "type": "optional<DateTimeCalculatedDefaultValue>",
          },
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<datetime>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfNullableInstant>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "DateTimeFieldEditor",
          },
          "format": {
            "docs": "The format pattern when displayed in the UI.",
            "type": "optional<string>",
          },
          "maxValue": {
            "docs": "The maximum allowed value for the field value.",
            "type": "optional<datetime>",
          },
          "minValue": {
            "docs": "The minimum allowed value for the field value.",
            "type": "optional<datetime>",
          },
        },
      },
      "DiscourseRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The api key to authenticate to your discourse server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "apiUsername": {
            "docs": "The api username to authenticate to your discourse server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "category": {
            "docs": "The optional category id.",
            "type": "optional<integer>",
          },
          "text": {
            "docs": "The text as markdown.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "title": {
            "docs": "The optional title when creating new topics.",
            "type": "string",
          },
          "topic": {
            "docs": "The optional topic id.",
            "type": "optional<integer>",
          },
          "url": {
            "docs": "The url to the discourse server.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "EditorDto": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "The name of the editor.",
            "type": "string",
          },
          "url": {
            "docs": "The url to the editor.",
            "type": "string",
          },
        },
      },
      "ElasticSearchRuleActionDto": {
        "docs": undefined,
        "properties": {
          "delete": {
            "docs": "The condition when to delete the document.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "host": {
            "docs": "The url to the instance or cluster.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "password": {
            "docs": "The optional password.",
            "type": "string",
          },
          "username": {
            "docs": "The optional username.",
            "type": "string",
          },
        },
      },
      "EmailRuleActionDto": {
        "docs": undefined,
        "properties": {
          "messageBody": {
            "docs": "The message body.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "messageFrom": {
            "docs": "The email sending address.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "messageSubject": {
            "docs": "The subject line for this email message.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "messageTo": {
            "docs": "The email message will be sent to.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serverHost": {
            "docs": "The IP address or host to the SMTP server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serverPassword": {
            "docs": "The password for the SMTP server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serverPort": {
            "docs": "The port to the SMTP server.",
            "type": "integer",
          },
          "serverUsername": {
            "docs": "The username for the SMTP server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "ErrorDto": {
        "docs": undefined,
        "properties": {
          "details": {
            "docs": "Detailed error messages.",
            "type": "optional<list<string>>",
          },
          "errorCode": {
            "docs": "The error code.",
            "type": "optional<string>",
          },
          "message": {
            "docs": "Error message.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "statusCode": {
            "docs": "Status code of the http response.",
            "type": "integer",
          },
          "traceId": {
            "docs": "The optional trace id.",
            "type": "optional<string>",
          },
          "type": {
            "docs": "Link to the error details.",
            "type": "optional<string>",
          },
        },
      },
      "EventConsumerDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "count": {
            "docs": "The number of handled events.",
            "type": "integer",
          },
          "error": {
            "docs": "The error details if the event consumer has been stopped after a failure.",
            "type": "optional<string>",
          },
          "isResetting": {
            "docs": "Indicates if the event consumer is resetting at the moment.",
            "type": "boolean",
          },
          "isStopped": {
            "docs": "Indicates if the event consumer has been started.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the event consumer.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "position": {
            "docs": "The position within the vent stream.",
            "type": "optional<string>",
          },
        },
      },
      "EventConsumersDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The event consumers.",
            "type": "list<EventConsumerDto>",
          },
        },
      },
      "ExposedValues": "map<string, string>",
      "FastlyRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The API key to grant access to Squidex.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serviceId": {
            "docs": "The ID of the fastly service.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "FeatureDto": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "The name of the feature.",
            "type": "string",
          },
          "text": {
            "docs": "The description text.",
            "type": "string",
          },
        },
      },
      "FeaturesDto": {
        "docs": undefined,
        "properties": {
          "features": {
            "docs": "The latest features.",
            "type": "list<FeatureDto>",
          },
          "version": {
            "docs": "The recent version.",
            "type": "integer",
          },
        },
      },
      "FieldDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "fieldId": {
            "docs": "The ID of the field.",
            "type": "long",
          },
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "nested": {
            "docs": "The nested fields.",
            "type": "optional<list<NestedFieldDto>>",
          },
          "partitioning": {
            "docs": "Defines the partitioning of the field.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "FieldPropertiesDto": {
        "base-properties": {
          "editorUrl": {
            "docs": "Optional url to the editor.",
            "type": "optional<string>",
          },
          "hints": {
            "docs": "Hints to describe the field.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 1000,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "isHalfWidth": {
            "docs": "Indicates if the field should be rendered with half width only.",
            "type": "boolean",
          },
          "isRequired": {
            "docs": "Indicates if the field is required.",
            "type": "boolean",
          },
          "isRequiredOnPublish": {
            "docs": "Indicates if the field is required when publishing.",
            "type": "boolean",
          },
          "label": {
            "docs": "Optional label for the editor.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 100,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "placeholder": {
            "docs": "Placeholder to show when no value has been entered.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 100,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "tags": {
            "docs": "Tags for automation processes.",
            "type": "optional<list<string>>",
          },
        },
        "discriminant": "fieldType",
        "docs": undefined,
        "union": {
          "Array": "ArrayFieldPropertiesDto",
          "Assets": "AssetsFieldPropertiesDto",
          "Boolean": "BooleanFieldPropertiesDto",
          "Component": "ComponentFieldPropertiesDto",
          "Components": "ComponentsFieldPropertiesDto",
          "DateTime": "DateTimeFieldPropertiesDto",
          "Geolocation": "GeolocationFieldPropertiesDto",
          "Json": "JsonFieldPropertiesDto",
          "Number": "NumberFieldPropertiesDto",
          "References": "ReferencesFieldPropertiesDto",
          "String": "StringFieldPropertiesDto",
          "Tags": "TagsFieldPropertiesDto",
          "UI": "UiFieldPropertiesDto",
        },
      },
      "FieldRuleAction": {
        "docs": "",
        "enum": [
          "Disable",
          "Hide",
          "Require",
        ],
      },
      "FieldRuleDto": {
        "docs": undefined,
        "properties": {
          "action": {
            "docs": "The action to perform when the condition is met.",
            "type": "FieldRuleAction",
          },
          "condition": {
            "docs": "The condition.",
            "type": "optional<string>",
          },
          "field": {
            "docs": "The field to update.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "GeolocationFieldEditor": {
        "docs": "",
        "type": "literal<"Map">",
      },
      "GeolocationFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "GeolocationFieldEditor",
          },
        },
      },
      "HistoryEventDto": {
        "docs": undefined,
        "properties": {
          "actor": {
            "docs": "The user who called the action.",
            "type": "string",
          },
          "created": {
            "docs": "The time when the event happened.",
            "type": "datetime",
          },
          "eventId": {
            "docs": "Gets a unique id for the event.",
            "type": "string",
          },
          "eventType": {
            "docs": "The type of the original event.",
            "type": "string",
          },
          "message": {
            "docs": "The message for the event.",
            "type": "string",
          },
          "version": {
            "docs": "The version identifier.",
            "type": "long",
          },
        },
      },
      "ImageFormat": {
        "docs": "",
        "enum": [
          "AVIF",
          "BMP",
          "GIF",
          "JPEG",
          "PNG",
          "TGA",
          "TIFF",
          "WEBP",
        ],
      },
      "JobStatus": {
        "docs": "",
        "enum": [
          "Created",
          "Started",
          "Completed",
          "Failed",
        ],
      },
      "JsonFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "graphQLSchema": {
            "docs": "The GraphQL schema.",
            "type": "optional<string>",
          },
        },
      },
      "LanguageDto": {
        "docs": undefined,
        "properties": {
          "englishName": {
            "docs": "The english name of the language.",
            "type": "string",
          },
          "iso2Code": {
            "docs": "The iso code of the language.",
            "type": "string",
          },
          "nativeName": {
            "docs": "The native name of the language.",
            "type": "string",
          },
        },
      },
      "LocalizedValueOfNullableBoolean": "map<string, optional<boolean>>",
      "LocalizedValueOfNullableDouble": "map<string, optional<double>>",
      "LocalizedValueOfNullableInstant": "map<string, optional<datetime>>",
      "LocalizedValueOfReadonlyListOfString": "map<string, list<string>>",
      "LocalizedValueOfString": "map<string, string>",
      "LogDownloadDto": {
        "docs": undefined,
        "properties": {
          "downloadUrl": {
            "docs": "The url to download the log.",
            "type": "optional<string>",
          },
        },
      },
      "ManualRuleTriggerDto": {
        "docs": undefined,
        "properties": {},
      },
      "MediumRuleActionDto": {
        "docs": undefined,
        "properties": {
          "accessToken": {
            "docs": "The self issued access token.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "canonicalUrl": {
            "docs": "The original home of this content, if it was originally published elsewhere.",
            "type": "string",
          },
          "content": {
            "docs": "The content, either html or markdown.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "isHtml": {
            "docs": "Indicates whether the content is markdown or html.",
            "type": "boolean",
          },
          "publicationId": {
            "docs": "Optional publication id.",
            "type": "string",
          },
          "tags": {
            "docs": "The optional comma separated list of tags.",
            "type": "string",
          },
          "title": {
            "docs": "The title, used for the url.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "NestedFieldDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "fieldId": {
            "docs": "The ID of the field.",
            "type": "long",
          },
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "NotificationRuleActionDto": {
        "docs": undefined,
        "properties": {
          "client": {
            "docs": "An optional client name.",
            "type": "string",
          },
          "text": {
            "docs": "The text to send.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "The optional url to attach to the notification.",
            "type": "string",
          },
          "user": {
            "docs": "The user id or email.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "NumberFieldEditor": {
        "docs": "",
        "enum": [
          "Input",
          "Radio",
          "Dropdown",
          "Stars",
        ],
      },
      "NumberFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowedValues": {
            "docs": "The allowed values for the field value.",
            "type": "optional<list<double>>",
          },
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<double>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfNullableDouble>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "NumberFieldEditor",
          },
          "inlineEditable": {
            "docs": "Indicates that the inline editor is enabled for this field.",
            "type": "boolean",
          },
          "isUnique": {
            "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
            "type": "boolean",
          },
          "maxValue": {
            "docs": "The maximum allowed value for the field value.",
            "type": "optional<double>",
          },
          "minValue": {
            "docs": "The minimum allowed value for the field value.",
            "type": "optional<double>",
          },
        },
      },
      "OpenSearchRuleActionDto": {
        "docs": undefined,
        "properties": {
          "delete": {
            "docs": "The condition when to delete the document.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "host": {
            "docs": "The url to the instance or cluster.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "password": {
            "docs": "The optional password.",
            "type": "string",
          },
          "username": {
            "docs": "The optional username.",
            "type": "string",
          },
        },
      },
      "PatternDto": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "The regex message.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the suggestion.",
            "type": "string",
          },
          "regex": {
            "docs": "The regex pattern.",
            "type": "string",
          },
        },
      },
      "PlanChangedDto": {
        "docs": undefined,
        "properties": {
          "redirectUri": {
            "docs": "Optional redirect uri.",
            "type": "optional<string>",
          },
        },
      },
      "PlanDto": {
        "docs": undefined,
        "properties": {
          "confirmText": {
            "docs": "An optional confirm text for the monthly subscription.",
            "type": "optional<string>",
          },
          "costs": {
            "docs": "The monthly costs of the plan.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the plan.",
            "type": "string",
          },
          "maxApiBytes": {
            "docs": "The maximum number of API traffic.",
            "type": "long",
          },
          "maxApiCalls": {
            "docs": "The maximum number of API calls.",
            "type": "long",
          },
          "maxAssetSize": {
            "docs": "The maximum allowed asset size.",
            "type": "long",
          },
          "maxContributors": {
            "docs": "The maximum number of contributors.",
            "type": "integer",
          },
          "name": {
            "docs": "The name of the plan.",
            "type": "string",
          },
          "yearlyConfirmText": {
            "docs": "An optional confirm text for the yearly subscription.",
            "type": "optional<string>",
          },
          "yearlyCosts": {
            "docs": "The yearly costs of the plan.",
            "type": "optional<string>",
          },
          "yearlyId": {
            "docs": "The yearly ID of the plan.",
            "type": "optional<string>",
          },
        },
      },
      "PlansDto": {
        "docs": undefined,
        "properties": {
          "currentPlanId": {
            "docs": "The current plan id.",
            "type": "optional<string>",
          },
          "locked": {
            "docs": "The reason why the plan cannot be changed.",
            "type": "PlansLockedReason",
          },
          "planOwner": {
            "docs": "The plan owner.",
            "type": "optional<string>",
          },
          "plans": {
            "docs": "The available plans.",
            "type": "list<PlanDto>",
          },
          "portalLink": {
            "docs": "The link to the management portal.",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "referral": {
            "docs": "The referral management.",
            "type": "optional<ReferralInfo>",
          },
        },
      },
      "PlansLockedReason": {
        "docs": "",
        "enum": [
          "None",
          "NotOwner",
          "NoPermission",
          "ManagedByTeam",
        ],
      },
      "PrerenderRuleActionDto": {
        "docs": undefined,
        "properties": {
          "token": {
            "docs": "The prerender token from your account.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "The url to recache.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "PropertyPath": "list<string>",
      "QueryDto": {
        "docs": undefined,
        "properties": {
          "ids": {
            "docs": "The optional list of ids to query.",
            "type": "optional<list<string>>",
          },
          "oData": {
            "docs": "The optional odata query.",
            "type": "optional<string>",
          },
          "parentId": {
            "docs": "The parent id (for assets).",
            "type": "optional<string>",
          },
          "q": "optional<unknown>",
        },
      },
      "QueryJsonDto": {
        "docs": undefined,
        "properties": {
          "filter": "optional<unknown>",
          "fullText": "optional<string>",
          "random": "long",
          "skip": "long",
          "sort": "optional<list<SortNode>>",
          "take": "long",
          "top": "long",
        },
      },
      "ReferencesFieldEditor": {
        "docs": "",
        "enum": [
          "List",
          "Dropdown",
          "Tags",
          "Checkboxes",
          "Input",
        ],
      },
      "ReferencesFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowDuplicates": {
            "docs": "True, if duplicate values are allowed.",
            "type": "boolean",
          },
          "defaultValue": {
            "docs": "The default value as a list of content ids.",
            "type": "optional<list<string>>",
          },
          "defaultValues": {
            "docs": "The language specific default value as a list of content ids.",
            "type": "optional<LocalizedValueOfReadonlyListOfString>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "ReferencesFieldEditor",
          },
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "mustBePublished": {
            "docs": "True when all references must be published.",
            "type": "boolean",
          },
          "resolveReference": {
            "docs": "True to resolve references in the content list.",
            "type": "boolean",
          },
          "schemaIds": {
            "docs": "The ID of the referenced schemas.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ReferralInfo": {
        "docs": undefined,
        "properties": {
          "code": "string",
          "condition": "string",
          "earned": "string",
        },
      },
      "ReorderFieldsDto": {
        "docs": undefined,
        "properties": {
          "fieldIds": {
            "docs": "The field ids in the target order.",
            "type": "list<long>",
          },
        },
      },
      "ResizeMode": {
        "docs": "",
        "enum": [
          "Crop",
          "CropUpsize",
          "Pad",
          "BoxPad",
          "Max",
          "Min",
          "Stretch",
        ],
      },
      "Resource": {
        "docs": undefined,
        "properties": {
          "_links": {
            "docs": "The links.",
            "type": "map<string, ResourceLink>",
          },
        },
      },
      "ResourceLink": {
        "docs": undefined,
        "properties": {
          "href": {
            "docs": "The link url.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "metadata": {
            "docs": "Additional data about the link.",
            "type": "optional<string>",
          },
          "method": {
            "docs": "The link method.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "ResourcesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {},
      },
      "RestoreJobDto": {
        "docs": undefined,
        "properties": {
          "log": {
            "docs": "The status log.",
            "type": "list<string>",
          },
          "started": {
            "docs": "The time when the job has been started.",
            "type": "datetime",
          },
          "status": {
            "docs": "The status of the operation.",
            "type": "JobStatus",
          },
          "stopped": {
            "docs": "The time when the job has been stopped.",
            "type": "optional<datetime>",
          },
          "url": {
            "docs": "The uri to load from.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "RoleDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "isDefaultRole": {
            "docs": "Indicates if the role is an builtin default role.",
            "type": "boolean",
          },
          "name": {
            "docs": "The role name.",
            "type": "string",
          },
          "numClients": {
            "docs": "The number of clients with this role.",
            "type": "integer",
          },
          "numContributors": {
            "docs": "The number of contributors with this role.",
            "type": "integer",
          },
          "permissions": {
            "docs": "Associated list of permissions.",
            "type": "list<string>",
          },
          "properties": {
            "docs": "Associated list of UI properties.",
            "type": "map<string, unknown>",
          },
        },
      },
      "RolesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The roles.",
            "type": "list<RoleDto>",
          },
        },
      },
      "RuleActionDto": {
        "base-properties": {},
        "discriminant": "actionType",
        "docs": undefined,
        "union": {
          "Algolia": "AlgoliaRuleActionDto",
          "AzureQueue": "AzureQueueRuleActionDto",
          "Comment": "CommentRuleActionDto",
          "CreateContent": "CreateContentRuleActionDto",
          "Discourse": "DiscourseRuleActionDto",
          "ElasticSearch": "ElasticSearchRuleActionDto",
          "Email": "EmailRuleActionDto",
          "Fastly": "FastlyRuleActionDto",
          "Medium": "MediumRuleActionDto",
          "Notification": "NotificationRuleActionDto",
          "OpenSearch": "OpenSearchRuleActionDto",
          "Prerender": "PrerenderRuleActionDto",
          "Script": "ScriptRuleActionDto",
          "SignalR": "SignalRRuleActionDto",
          "Slack": "SlackRuleActionDto",
          "Tweet": "TweetRuleActionDto",
          "Typesense": "TypesenseRuleActionDto",
          "Webhook": "WebhookRuleActionDto",
        },
      },
      "RuleDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "action": {
            "docs": "The action properties.",
            "type": "RuleActionDto",
          },
          "created": {
            "docs": "The date and time when the rule has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the rule.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the rule.",
            "type": "string",
          },
          "isEnabled": {
            "docs": "Determines if the rule is enabled.",
            "type": "boolean",
          },
          "lastExecuted": {
            "availability": "deprecated",
            "docs": "The date and time when the rule was executed the last time.",
            "type": "optional<datetime>",
          },
          "lastModified": {
            "docs": "The date and time when the rule has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the rule.",
            "type": "string",
          },
          "name": {
            "docs": "Optional rule name.",
            "type": "optional<string>",
          },
          "numFailed": {
            "docs": "The number of failed executions.",
            "type": "long",
          },
          "numSucceeded": {
            "docs": "The number of completed executions.",
            "type": "long",
          },
          "trigger": {
            "docs": "The trigger properties.",
            "type": "RuleTriggerDto",
          },
          "version": {
            "docs": "The version of the rule.",
            "type": "long",
          },
        },
      },
      "RuleElementDto": {
        "docs": undefined,
        "properties": {
          "description": {
            "docs": "Describes the action or trigger type.",
            "type": "string",
          },
          "display": {
            "docs": "The label for the action or trigger type.",
            "type": "string",
          },
          "iconColor": {
            "docs": "The color for the icon.",
            "type": "optional<string>",
          },
          "iconImage": {
            "docs": "The image for the icon.",
            "type": "optional<string>",
          },
          "properties": {
            "docs": "The properties.",
            "type": "list<RuleElementPropertyDto>",
          },
          "readMore": {
            "docs": "The optional link to the product that is integrated.",
            "type": "optional<string>",
          },
          "title": {
            "docs": "Optional title.",
            "type": "optional<string>",
          },
        },
      },
      "RuleElementPropertyDto": {
        "docs": undefined,
        "properties": {
          "description": {
            "docs": "The optional description.",
            "type": "optional<string>",
          },
          "display": {
            "docs": "The label to use.",
            "type": "string",
          },
          "editor": {
            "docs": "The html editor.",
            "type": "RuleFieldEditor",
          },
          "isFormattable": {
            "docs": "Indicates if the property is formattable.",
            "type": "boolean",
          },
          "isRequired": {
            "docs": "Indicates if the property is required.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the editor.",
            "type": "string",
          },
          "options": {
            "docs": "The options, if the editor is a dropdown.",
            "type": "optional<list<string>>",
          },
        },
      },
      "RuleEventDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "created": {
            "docs": "The time when the event has been created.",
            "type": "datetime",
          },
          "description": {
            "docs": "The description.",
            "type": "string",
          },
          "eventName": {
            "docs": "The name of the event.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the event.",
            "type": "string",
          },
          "jobResult": {
            "docs": "The result of the job.",
            "type": "RuleJobResult",
          },
          "lastDump": {
            "docs": "The last dump.",
            "type": "optional<string>",
          },
          "nextAttempt": {
            "docs": "The next attempt.",
            "type": "optional<datetime>",
          },
          "numCalls": {
            "docs": "The number of calls.",
            "type": "integer",
          },
          "result": {
            "docs": "The result of the event.",
            "type": "RuleResult",
          },
        },
      },
      "RuleEventsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The rule events.",
            "type": "list<RuleEventDto>",
          },
          "total": {
            "docs": "The total number of rule events.",
            "type": "long",
          },
        },
      },
      "RuleFieldEditor": {
        "docs": "",
        "enum": [
          "Checkbox",
          "Dropdown",
          "Email",
          "Javascript",
          "Number",
          "Password",
          "Text",
          "TextArea",
          "Url",
        ],
      },
      "RuleJobResult": {
        "docs": "",
        "enum": [
          "Pending",
          "Success",
          "Retry",
          "Failed",
          "Cancelled",
        ],
      },
      "RuleResult": {
        "docs": "",
        "enum": [
          "Pending",
          "Success",
          "Failed",
          "Timeout",
        ],
      },
      "RuleTriggerDto": {
        "base-properties": {},
        "discriminant": "triggerType",
        "docs": undefined,
        "union": {
          "AssetChanged": "AssetChangedRuleTriggerDto",
          "Comment": "CommentRuleTriggerDto",
          "ContentChanged": "ContentChangedRuleTriggerDto",
          "Manual": "ManualRuleTriggerDto",
          "SchemaChanged": "SchemaChangedRuleTriggerDto",
          "Usage": "UsageRuleTriggerDto",
        },
      },
      "RulesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The rules.",
            "type": "list<RuleDto>",
          },
          "runningRuleId": {
            "docs": "The ID of the rule that is currently rerunning.",
            "type": "optional<string>",
          },
        },
      },
      "ScheduleJobDto": {
        "docs": undefined,
        "properties": {
          "color": {
            "docs": "The color of the scheduled status.",
            "type": "string",
          },
          "dueTime": {
            "docs": "The target date and time when the content should be scheduled.",
            "type": "datetime",
          },
          "id": {
            "docs": "The ID of the schedule job.",
            "type": "string",
          },
          "scheduledBy": {
            "docs": "The user who schedule the content.",
            "type": "string",
          },
          "status": {
            "docs": "The new status.",
            "type": "string",
          },
        },
      },
      "SchemaChangedRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "condition": {
            "docs": "Javascript condition when to trigger.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaCondition": {
        "docs": undefined,
        "properties": {
          "condition": "optional<string>",
          "schemaId": "string",
        },
      },
      "SchemaDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "category": {
            "docs": "The name of the category.",
            "type": "optional<string>",
          },
          "created": {
            "docs": "The date and time when the schema has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "fieldRules": {
            "docs": "The field rules.",
            "type": "list<FieldRuleDto>",
          },
          "fields": {
            "docs": "The list of fields.",
            "type": "list<FieldDto>",
          },
          "fieldsInLists": {
            "docs": "The name of fields that are used in content lists.",
            "type": "list<string>",
          },
          "fieldsInReferences": {
            "docs": "The name of fields that are used in content references.",
            "type": "list<string>",
          },
          "id": {
            "docs": "The ID of the schema.",
            "type": "string",
          },
          "isPublished": {
            "docs": "Indicates if the schema is published.",
            "type": "boolean",
          },
          "isSingleton": {
            "availability": "deprecated",
            "docs": "Indicates if the schema is a singleton.",
            "type": "boolean",
          },
          "lastModified": {
            "docs": "The date and time when the schema has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "docs": "The name of the schema. Unique within the app.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "previewUrls": {
            "docs": "The preview Urls.",
            "type": "map<string, string>",
          },
          "properties": {
            "docs": "The schema properties.",
            "type": "SchemaPropertiesDto",
          },
          "scripts": {
            "docs": "The scripts.",
            "type": "SchemaScriptsDto",
          },
          "type": {
            "docs": "The type of the schema.",
            "type": "SchemaType",
          },
          "version": {
            "docs": "The version of the schema.",
            "type": "long",
          },
        },
      },
      "SchemaPropertiesDto": {
        "docs": undefined,
        "properties": {
          "contentEditorUrl": {
            "docs": "The url to the editor plugin.",
            "type": "optional<string>",
          },
          "contentSidebarUrl": {
            "docs": "The url to a the sidebar plugin for content items.",
            "type": "optional<string>",
          },
          "contentsSidebarUrl": {
            "docs": "The url to a the sidebar plugin for content lists.",
            "type": "optional<string>",
          },
          "hints": {
            "docs": "Hints to describe the schema.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 1000,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "label": {
            "docs": "Optional label for the editor.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 100,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "tags": {
            "docs": "Tags for automation processes.",
            "type": "optional<list<string>>",
          },
          "validateOnPublish": {
            "docs": "True to validate the content items on publish.",
            "type": "boolean",
          },
        },
      },
      "SchemaScriptsDto": {
        "docs": undefined,
        "properties": {
          "change": {
            "docs": "The script that is executed when change a content status.",
            "type": "optional<string>",
          },
          "create": {
            "docs": "The script that is executed when creating a content.",
            "type": "optional<string>",
          },
          "delete": {
            "docs": "The script that is executed when deleting a content.",
            "type": "optional<string>",
          },
          "query": {
            "docs": "The script that is executed for each content when querying contents.",
            "type": "optional<string>",
          },
          "queryPre": {
            "docs": "The script that is executed for all contents when querying contents.",
            "type": "optional<string>",
          },
          "update": {
            "docs": "The script that is executed when updating a content.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaType": {
        "docs": "",
        "enum": [
          "Default",
          "Singleton",
          "Component",
        ],
      },
      "SchemasDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The schemas.",
            "type": "list<SchemaDto>",
          },
        },
      },
      "ScriptRuleActionDto": {
        "docs": undefined,
        "properties": {
          "script": {
            "docs": "The script to render.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "SearchResultDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "label": {
            "docs": "An optional label.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the search result.",
            "type": "string",
          },
          "type": {
            "docs": "The type of the search result.",
            "type": "SearchResultType",
          },
        },
      },
      "SearchResultType": {
        "docs": "",
        "enum": [
          "Asset",
          "Content",
          "Dashboard",
          "Setting",
          "Rule",
          "Schema",
        ],
      },
      "SignalRRuleActionDto": {
        "docs": undefined,
        "properties": {
          "action": {
            "docs": "* Broadcast = send to all users.
 * User = send to all target users(s).
 * Group = send to all target group(s).",
            "type": "ActionTypeEnum",
          },
          "connectionString": {
            "docs": "The connection string to the Azure SignalR.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "hubName": {
            "docs": "The name of the hub.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "methodName": {
            "docs": "Set the Name of the hub method received by the customer.",
            "type": "string",
          },
          "payload": {
            "docs": "Leave it empty to use the full event as body.",
            "type": "string",
          },
          "target": {
            "docs": "Define target users or groups by id or name. One item per line. Not needed for Broadcast action.",
            "type": "string",
          },
        },
      },
      "SimulatedRuleEventDto": {
        "docs": undefined,
        "properties": {
          "actionData": {
            "docs": "The name of the action.",
            "type": "optional<string>",
          },
          "actionName": {
            "docs": "The data for the action.",
            "type": "optional<string>",
          },
          "enrichedEvent": "optional<unknown>",
          "error": {
            "docs": "The name of the event.",
            "type": "optional<string>",
          },
          "event": "unknown",
          "eventId": {
            "docs": "The unique event id.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "eventName": {
            "docs": "The name of the event.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "skipReasons": {
            "docs": "The reason why the event has been skipped.",
            "type": "list<SkipReason>",
          },
          "uniqueId": {
            "docs": "The the unique id of the simulated event.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "SimulatedRuleEventsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The simulated rule events.",
            "type": "list<SimulatedRuleEventDto>",
          },
          "total": {
            "docs": "The total number of simulated rule events.",
            "type": "long",
          },
        },
      },
      "SkipReason": {
        "docs": "",
        "enum": [
          "None",
          "ConditionDoesNotMatch",
          "ConditionPrecheckDoesNotMatch",
          "Disabled",
          "Failed",
          "FromRule",
          "NoAction",
          "NoTrigger",
          "TooOld",
          "WrongEvent",
          "WrongEventForTrigger",
        ],
      },
      "SlackRuleActionDto": {
        "docs": undefined,
        "properties": {
          "text": {
            "docs": "The text that is sent as message to slack.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "webhookUrl": {
            "docs": "The slack webhook url.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "SortNode": {
        "docs": undefined,
        "properties": {
          "order": "SortOrder",
          "path": "PropertyPath",
        },
      },
      "SortOrder": {
        "docs": "",
        "enum": [
          "Ascending",
          "Descending",
        ],
      },
      "StatusInfoDto": {
        "docs": undefined,
        "properties": {
          "color": {
            "docs": "The color of the status.",
            "type": "string",
          },
          "status": {
            "docs": "The name of the status.",
            "type": "string",
          },
        },
      },
      "StorageUsagePerDateDto": {
        "docs": undefined,
        "properties": {
          "date": {
            "docs": "The date when the usage was tracked.",
            "type": "string",
            "validation": {
              "format": "date",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "totalCount": {
            "docs": "The number of assets.",
            "type": "long",
          },
          "totalSize": {
            "docs": "The size in bytes.",
            "type": "long",
          },
        },
      },
      "StringContentType": {
        "docs": "",
        "enum": [
          "Unspecified",
          "Html",
          "Markdown",
        ],
      },
      "StringFieldEditor": {
        "docs": "",
        "enum": [
          "Input",
          "Color",
          "Markdown",
          "Dropdown",
          "Html",
          "Radio",
          "RichText",
          "Slug",
          "StockPhoto",
          "TextArea",
        ],
      },
      "StringFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowedValues": {
            "docs": "The allowed values for the field value.",
            "type": "optional<list<string>>",
          },
          "contentType": {
            "docs": "How the string content should be interpreted.",
            "type": "StringContentType",
          },
          "createEnum": {
            "docs": "Indicates whether GraphQL Enum should be created.",
            "type": "boolean",
          },
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<string>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfString>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "StringFieldEditor",
          },
          "folderId": {
            "docs": "The initial id to the folder when the control supports file uploads.",
            "type": "optional<string>",
          },
          "inlineEditable": {
            "docs": "Indicates that the inline editor is enabled for this field.",
            "type": "boolean",
          },
          "isEmbeddable": {
            "docs": "Indicates that other content items or references are embedded.",
            "type": "boolean",
          },
          "isUnique": {
            "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
            "type": "boolean",
          },
          "maxCharacters": {
            "docs": "The maximum allowed of normal characters for the field value.",
            "type": "optional<integer>",
          },
          "maxLength": {
            "docs": "The maximum allowed length for the field value.",
            "type": "optional<integer>",
          },
          "maxWords": {
            "docs": "The maximum allowed number of words for the field value.",
            "type": "optional<integer>",
          },
          "minCharacters": {
            "docs": "The minimum allowed of normal characters for the field value.",
            "type": "optional<integer>",
          },
          "minLength": {
            "docs": "The minimum allowed length for the field value.",
            "type": "optional<integer>",
          },
          "minWords": {
            "docs": "The minimum allowed number of words for the field value.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The pattern to enforce a specific format for the field value.",
            "type": "optional<string>",
          },
          "patternMessage": {
            "docs": "The validation message for the pattern.",
            "type": "optional<string>",
          },
          "schemaIds": {
            "docs": "The allowed schema ids that can be embedded.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TagsFieldEditor": {
        "docs": "",
        "enum": [
          "Tags",
          "Checkboxes",
          "Dropdown",
        ],
      },
      "TagsFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowedValues": {
            "docs": "The allowed values for the field value.",
            "type": "optional<list<string>>",
          },
          "createEnum": {
            "docs": "Indicates whether GraphQL Enum should be created.",
            "type": "boolean",
          },
          "defaultValue": {
            "docs": "The default value.",
            "type": "optional<list<string>>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfReadonlyListOfString>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "TagsFieldEditor",
          },
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
        },
      },
      "TeamDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "created": {
            "docs": "The timestamp when the team has been created.",
            "type": "datetime",
          },
          "id": {
            "docs": "The ID of the team.",
            "type": "string",
          },
          "lastModified": {
            "docs": "The timestamp when the team has been modified last.",
            "type": "datetime",
          },
          "name": {
            "docs": "The name of the team.",
            "type": "string",
          },
          "roleName": {
            "docs": "The role name of the user.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The version of the team.",
            "type": "long",
          },
        },
      },
      "TemplateDetailsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "details": {
            "docs": "The details of the template.",
            "type": "string",
          },
        },
      },
      "TemplateDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "description": {
            "docs": "The description of the template.",
            "type": "string",
          },
          "isStarter": {
            "docs": "True, if the template is a starter.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the template.",
            "type": "string",
          },
          "title": {
            "docs": "The title of the template.",
            "type": "string",
          },
        },
      },
      "TemplatesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The event consumers.",
            "type": "list<TemplateDto>",
          },
        },
      },
      "TranslationDto": {
        "docs": undefined,
        "properties": {
          "result": {
            "docs": "The result of the translation.",
            "type": "TranslationResultCode",
          },
          "text": {
            "docs": "The translated text.",
            "type": "optional<string>",
          },
        },
      },
      "TranslationResultCode": {
        "docs": "",
        "enum": [
          "Translated",
          "LanguageNotSupported",
          "NotTranslated",
          "NotConfigured",
          "Unauthorized",
          "Failed",
        ],
      },
      "TweetRuleActionDto": {
        "docs": undefined,
        "properties": {
          "accessSecret": {
            "docs": " The generated access secret.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "accessToken": {
            "docs": " The generated access token.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "text": {
            "docs": "The text that is sent as tweet to twitter.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "TypesenseRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The api key.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "delete": {
            "docs": "The condition when to delete the document.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "host": {
            "docs": "The url to the instance or cluster.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "UiFieldEditor": {
        "docs": "",
        "type": "literal<"Separator">",
      },
      "UiFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "UiFieldEditor",
          },
        },
      },
      "UiSettingsDto": {
        "docs": undefined,
        "properties": {
          "canCreateApps": {
            "docs": "True when the user can create apps.",
            "type": "boolean",
          },
          "canCreateTeams": {
            "docs": "True when the user can create teams.",
            "type": "boolean",
          },
        },
      },
      "UpdateFieldDto": {
        "docs": undefined,
        "properties": {
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "UpdateSettingDto": {
        "docs": undefined,
        "properties": {
          "value": "unknown",
        },
      },
      "UpsertCommentDto": {
        "docs": undefined,
        "properties": {
          "text": {
            "docs": "The comment text.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "The url where the comment is created.",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "UpsertSchemaDto": {
        "docs": undefined,
        "properties": {
          "category": {
            "docs": "The category.",
            "type": "optional<string>",
          },
          "fieldRules": {
            "docs": "The optional field Rules.",
            "type": "optional<list<FieldRuleDto>>",
          },
          "fields": {
            "docs": "Optional fields.",
            "type": "optional<list<UpsertSchemaFieldDto>>",
          },
          "fieldsInLists": {
            "docs": "The names of the fields that should be shown in lists, including meta fields.",
            "type": "optional<list<string>>",
          },
          "fieldsInReferences": {
            "docs": "The names of the fields that should be used in references.",
            "type": "optional<list<string>>",
          },
          "isPublished": {
            "docs": "Set it to true to autopublish the schema.",
            "type": "boolean",
          },
          "previewUrls": {
            "docs": "The optional preview urls.",
            "type": "optional<map<string, optional<string>>>",
          },
          "properties": {
            "docs": "The optional properties.",
            "type": "optional<SchemaPropertiesDto>",
          },
          "scripts": {
            "docs": "The optional scripts.",
            "type": "optional<SchemaScriptsDto>",
          },
        },
      },
      "UpsertSchemaFieldDto": {
        "docs": undefined,
        "properties": {
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
            },
          },
          "nested": {
            "docs": "The nested fields.",
            "type": "optional<list<UpsertSchemaNestedFieldDto>>",
          },
          "partitioning": {
            "docs": "Determines the optional partitioning of the field.",
            "type": "optional<string>",
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "UpsertSchemaNestedFieldDto": {
        "docs": undefined,
        "properties": {
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
            },
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "UsageRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "limit": {
            "docs": "The number of monthly api calls.",
            "type": "integer",
          },
          "numDays": {
            "docs": "The number of days to check or null for the current month.",
            "type": "optional<integer>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 30,
              "min": 1,
              "multipleOf": undefined,
            },
          },
        },
      },
      "UserDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "displayName": {
            "docs": "The display name (usually first name and last name) of the user.",
            "type": "string",
          },
          "email": {
            "docs": "The email of the user. Unique value.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the user.",
            "type": "string",
          },
          "isLocked": {
            "docs": "Determines if the user is locked.",
            "type": "boolean",
          },
          "permissions": {
            "docs": "Additional permissions for the user.",
            "type": "list<string>",
          },
        },
      },
      "UserProperty": {
        "docs": undefined,
        "properties": {
          "name": {
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "value": {
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "UsersDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The users.",
            "type": "list<UserDto>",
          },
          "total": {
            "docs": "The total number of users.",
            "type": "long",
          },
        },
      },
      "WebhookMethod": {
        "docs": "",
        "enum": [
          "POST",
          "PUT",
          "GET",
          "DELETE",
          "PATCH",
        ],
      },
      "WebhookRuleActionDto": {
        "docs": undefined,
        "properties": {
          "headers": {
            "docs": "The message headers in the format '[Key]=[Value]', one entry per line.",
            "type": "string",
          },
          "method": {
            "docs": "The type of the request.",
            "type": "WebhookMethod",
          },
          "payload": {
            "docs": "Leave it empty to use the full event as body.",
            "type": "string",
          },
          "payloadType": {
            "docs": "The mime type of the payload.",
            "type": "string",
          },
          "sharedSecret": {
            "docs": "The shared secret that is used to calculate the payload signature.",
            "type": "string",
          },
          "url": {
            "docs": "The url to the webhook.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "WorkflowDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "id": {
            "docs": "The workflow id.",
            "type": "optional<string>",
          },
          "initial": {
            "docs": "The initial step.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the workflow.",
            "type": "optional<string>",
          },
          "schemaIds": {
            "docs": "The schema ids.",
            "type": "optional<list<string>>",
          },
          "steps": {
            "docs": "The workflow steps.",
            "type": "optional<map<string, WorkflowStepDto>>",
          },
        },
      },
      "WorkflowStepDto": {
        "docs": undefined,
        "properties": {
          "color": {
            "docs": "The optional color.",
            "type": "optional<string>",
          },
          "noUpdate": {
            "docs": "Indicates if updates should not be allowed.",
            "type": "optional<boolean>",
          },
          "noUpdateExpression": {
            "docs": "Optional expression that must evaluate to true when you want to prevent updates.",
            "type": "optional<string>",
          },
          "noUpdateRoles": {
            "docs": "Optional list of roles to restrict the updates for users with these roles.",
            "type": "optional<list<string>>",
          },
          "transitions": {
            "docs": "The transitions.",
            "type": "optional<map<string, WorkflowTransitionDto>>",
          },
          "validate": {
            "docs": "True if the content should be validated when moving to this step.",
            "type": "optional<boolean>",
          },
        },
      },
      "WorkflowTransitionDto": {
        "docs": undefined,
        "properties": {
          "expression": {
            "docs": "The optional expression.",
            "type": "optional<string>",
          },
          "roles": {
            "docs": "The optional restricted role.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorkflowsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "errors": {
            "docs": "The errros that should be fixed.",
            "type": "list<string>",
          },
          "items": {
            "docs": "The workflow.",
            "type": "list<WorkflowDto>",
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerAuthScheme",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
    },
    "default-environment": "Default",
    "display-name": "Squidex API",
    "environments": {
      "Default": "https://localhost:5001",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
    "variables": {
      "appName": {
        "docs": undefined,
        "type": "string",
      },
    },
  },
}
`;

exports[`open api parser squidex simple 1`] = `
{
  "definitionFiles": {
    "apps.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteApp": {
            "auth": true,
            "display-name": "Delete the app.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to delete.",
                "variable": "$appName",
              },
            },
          },
          "deleteClient": {
            "auth": true,
            "display-name": "Revoke an app client.",
            "docs": "The application that uses this client credentials cannot access the API after it has been revoked.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the client that must be deleted.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Client deleted.",
              "type": "root.ClientsDto",
            },
          },
          "deleteContributor": {
            "auth": true,
            "display-name": "Remove contributor.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the contributor.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteImage": {
            "auth": true,
            "display-name": "Remove the app image.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App image removed.",
              "type": "root.AppDto",
            },
          },
          "deleteLanguage": {
            "auth": true,
            "display-name": "Deletes an app language.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "language": "language",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "language": {
                "docs": "The language to delete from the app.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Language deleted.",
              "type": "root.AppLanguagesDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "display-name": "Remove yourself.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors/me",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteRole": {
            "auth": true,
            "display-name": "Remove role from app.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "roleName": "roleName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "roleName": {
                "docs": "The name of the role.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Role deleted.",
              "type": "root.RolesDto",
            },
          },
          "deleteWorkflow": {
            "auth": true,
            "display-name": "Delete a workflow.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the workflow to update.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Workflow deleted.",
              "type": "root.WorkflowsDto",
            },
          },
          "getApp": {
            "auth": true,
            "display-name": "Get an app by name.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "root.AppDto",
            },
          },
          "getApps": {
            "auth": true,
            "display-name": "Get your apps.",
            "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps",
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getAssetScripts": {
            "auth": true,
            "display-name": "Get the app asset scripts.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "annotate": "annotate",
                    "create": "create",
                    "delete": "delete",
                    "move": "move",
                    "query": "query",
                    "queryPre": "queryPre",
                    "update": "update",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to get the asset scripts for.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Asset scripts returned.",
              "type": "root.AssetScriptsDto",
            },
          },
          "getClients": {
            "auth": true,
            "display-name": "Get app clients.",
            "docs": "Gets all configured clients for the app with the specified name.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Clients returned.",
              "type": "root.ClientsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "display-name": "Get app contributors.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getImage": {
            "auth": true,
            "display-name": "Get the app image.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App image found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getLanguages": {
            "auth": true,
            "display-name": "Get app languages.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Languages returned.",
              "type": "root.AppLanguagesDto",
            },
          },
          "getPermissions": {
            "auth": true,
            "display-name": "Get app permissions.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    "string",
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles/permissions",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App permissions returned.",
              "type": "list<string>",
            },
          },
          "getRoles": {
            "auth": true,
            "display-name": "Get app roles.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Roles returned.",
              "type": "root.RolesDto",
            },
          },
          "getSettings": {
            "auth": true,
            "display-name": "Get the app settings.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "editors": [
                      {
                        "name": "name",
                        "url": "url",
                      },
                    ],
                    "hideDateTimeModeButton": true,
                    "hideScheduler": true,
                    "patterns": [
                      {
                        "message": "message",
                        "name": "name",
                        "regex": "regex",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to get the settings for.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App settings returned.",
              "type": "root.AppSettingsDto",
            },
          },
          "getTeamApps": {
            "auth": true,
            "display-name": "Get team apps.",
            "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/apps",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getWorkflows": {
            "auth": true,
            "display-name": "Get app workflow.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Workflows returned.",
              "type": "root.WorkflowsDto",
            },
          },
          "postApp": {
            "auth": true,
            "display-name": "Create a new app.",
            "docs": "You can only create an app when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new app automatically.",
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                  "template": {
                    "docs": "Initialize the app with the inbuilt template.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App created.",
              "type": "root.AppDto",
            },
          },
          "postClient": {
            "auth": true,
            "display-name": "Create a new app client.",
            "docs": "Create a new client for the app with the specified name.
The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the client.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "CreateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client created.",
              "type": "root.ClientsDto",
            },
          },
          "postContributor": {
            "auth": true,
            "display-name": "Assign contributor to app.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "contributorId": "contributorId",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.AssignContributorDto",
            },
            "response": {
              "docs": "Contributor assigned to app.",
              "type": "root.ContributorsDto",
            },
          },
          "postLanguage": {
            "auth": true,
            "display-name": "Attaches an app language.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "language": "language",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "language": {
                    "docs": "The language to add.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "AddLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language created.",
              "type": "root.AppLanguagesDto",
            },
          },
          "postRole": {
            "auth": true,
            "display-name": "Add role to app.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The role name.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "AddRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role created.",
              "type": "root.RolesDto",
            },
          },
          "postWorkflow": {
            "auth": true,
            "display-name": "Create a workflow.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "AddWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow created.",
              "type": "root.WorkflowsDto",
            },
          },
          "putApp": {
            "auth": true,
            "display-name": "Update the app.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "The optional description of your app.",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "The optional label of your app.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppDto",
            },
          },
          "putAppTeam": {
            "auth": true,
            "display-name": "Transfer the app.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/team",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "teamId": {
                    "docs": "The ID of the team.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TransferToTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App transferred.",
              "type": "root.AppDto",
            },
          },
          "putAssetScripts": {
            "auth": true,
            "display-name": "Update the app asset scripts.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "annotate": "annotate",
                    "create": "create",
                    "delete": "delete",
                    "move": "move",
                    "query": "query",
                    "queryPre": "queryPre",
                    "update": "update",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "annotate": {
                    "docs": "The script that is executed when annotating a content.",
                    "type": "optional<string>",
                  },
                  "create": {
                    "docs": "The script that is executed when creating an asset.",
                    "type": "optional<string>",
                  },
                  "delete": {
                    "docs": "The script that is executed when deleting a content.",
                    "type": "optional<string>",
                  },
                  "move": {
                    "docs": "The script that is executed when moving a content.",
                    "type": "optional<string>",
                  },
                  "query": {
                    "docs": "The script that is executed for each asset when querying assets.",
                    "type": "optional<string>",
                  },
                  "queryPre": {
                    "docs": "The script that is executed for all assets when querying assets.",
                    "type": "optional<string>",
                  },
                  "update": {
                    "docs": "The script that is executed when updating a content.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAssetScriptsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset scripts updated.",
              "type": "root.AssetScriptsDto",
            },
          },
          "putClient": {
            "auth": true,
            "display-name": "Updates an app client.",
            "docs": "Only the display name can be changed, create a new client if necessary.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "allowAnonymous": true,
                        "apiCallsLimit": 1000000,
                        "apiTrafficLimit": 1000000,
                        "id": "id",
                        "name": "name",
                        "role": "role",
                        "secret": "secret",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the client that must be updated.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "allowAnonymous": {
                    "docs": "True to allow anonymous access without an access token for this client.",
                    "type": "optional<boolean>",
                  },
                  "apiCallsLimit": {
                    "docs": "The number of allowed api calls per month for this client.",
                    "type": "optional<long>",
                  },
                  "apiTrafficLimit": {
                    "docs": "The number of allowed api traffic bytes per month for this client.",
                    "type": "optional<long>",
                  },
                  "name": {
                    "docs": "The new display name of the client.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 20,
                      "minLength": 0,
                      "pattern": undefined,
                    },
                  },
                  "role": {
                    "docs": "The role of the client.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client updated.",
              "type": "root.ClientsDto",
            },
          },
          "putLanguage": {
            "auth": true,
            "display-name": "Updates an app language.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "language": "language",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "englishName": "englishName",
                        "fallback": [
                          "fallback",
                        ],
                        "isMaster": true,
                        "isOptional": true,
                        "iso2Code": "iso2Code",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "language": {
                "docs": "The language to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fallback": {
                    "docs": "Optional fallback languages.",
                    "type": "optional<list<string>>",
                  },
                  "isMaster": {
                    "docs": "Set the value to true to make the language the master.",
                    "type": "optional<boolean>",
                  },
                  "isOptional": {
                    "docs": "Set the value to true to make the language optional.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language updated.",
              "type": "root.AppLanguagesDto",
            },
          },
          "putRole": {
            "auth": true,
            "display-name": "Update an app role.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "roleName": "roleName",
                },
                "request": {
                  "permissions": [
                    "permissions",
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "isDefaultRole": true,
                        "name": "name",
                        "numClients": 1,
                        "numContributors": 1,
                        "permissions": [
                          "permissions",
                        ],
                        "properties": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "roleName": {
                "docs": "The name of the role to be updated.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "permissions": {
                    "docs": "Associated list of permissions.",
                    "type": "list<string>",
                  },
                  "properties": {
                    "docs": "Associated list of UI properties.",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role updated.",
              "type": "root.RolesDto",
            },
          },
          "putSettings": {
            "auth": true,
            "display-name": "Update the app settings.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "editors": [
                    {
                      "name": "name",
                      "url": "url",
                    },
                  ],
                  "patterns": [
                    {
                      "name": "name",
                      "regex": "regex",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "editors": [
                      {
                        "name": "name",
                        "url": "url",
                      },
                    ],
                    "hideDateTimeModeButton": true,
                    "hideScheduler": true,
                    "patterns": [
                      {
                        "message": "message",
                        "name": "name",
                        "regex": "regex",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "editors": {
                    "docs": "The configured UI editors.",
                    "type": "list<root.EditorDto>",
                  },
                  "hideDateTimeModeButton": {
                    "docs": "Hide the datetime mode button.",
                    "type": "optional<boolean>",
                  },
                  "hideScheduler": {
                    "docs": "Hide the scheduler for content items.",
                    "type": "optional<boolean>",
                  },
                  "patterns": {
                    "docs": "The configured app patterns.",
                    "type": "list<root.PatternDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppSettingsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppSettingsDto",
            },
          },
          "putWorkflow": {
            "auth": true,
            "display-name": "Update a workflow.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {
                  "initial": "initial",
                  "steps": {
                    "key": {},
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "errors": [
                      "errors",
                    ],
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "id": "id",
                        "initial": "initial",
                        "name": "name",
                        "schemaIds": [
                          "schemaIds",
                        ],
                        "steps": {
                          "key": {},
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the workflow to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initial": {
                    "docs": "The initial step.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "optional<string>",
                  },
                  "schemaIds": {
                    "docs": "The schema ids.",
                    "type": "optional<list<string>>",
                  },
                  "steps": {
                    "docs": "The workflow steps.",
                    "type": "map<string, root.WorkflowStepDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow updated.",
              "type": "root.WorkflowsDto",
            },
          },
          "uploadImage": {
            "auth": true,
            "display-name": "Upload the app image.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "canAccessApi": true,
                    "canAccessContent": true,
                    "created": "2024-01-15T09:30:00Z",
                    "description": "description",
                    "id": "id",
                    "label": "label",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "permissions": [
                      "permissions",
                    ],
                    "roleName": "roleName",
                    "roleProperties": {
                      "key": "value",
                    },
                    "teamId": "teamId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AppsUploadImageRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App image uploaded.",
              "type": "root.AppDto",
            },
          },
        },
      },
    },
    "assets.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateAssets": {
            "auth": true,
            "display-name": "Bulk update assets.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": [
                    {
                      "contentId": "contentId",
                      "error": {
                        "details": [
                          "details",
                        ],
                        "errorCode": "errorCode",
                        "message": "message",
                        "statusCode": 1,
                        "traceId": "traceId",
                        "type": "type",
                      },
                      "id": "id",
                      "jobIndex": 1,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/bulk",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted assets.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "optional<list<root.BulkUpdateAssetsJobDto>>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Folder checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateAssetsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Assets created, update or delete.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "deleteAsset": {
            "auth": true,
            "display-name": "Delete an asset.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset to delete.",
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsDeleteAssetRequest",
              "query-parameters": {
                "checkReferrers": {
                  "docs": "True to check referrers of this asset.",
                  "type": "optional<boolean>",
                },
                "permanent": {
                  "docs": "True to delete the asset permanently.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteAssetFolder": {
            "auth": true,
            "display-name": "Delete an asset folder.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder to delete.",
                "type": "string",
              },
            },
          },
          "getAsset": {
            "auth": true,
            "display-name": "Get an asset by id.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset to retrieve.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Asset found.",
              "type": "root.AssetDto",
            },
          },
          "getAssetContent": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Get the asset content.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/assets/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentRequest",
              "query-parameters": {
                "auto": {
                  "docs": "True to use auto format.",
                  "type": "optional<boolean>",
                },
                "bg": {
                  "docs": "Optional background color.",
                  "type": "optional<string>",
                },
                "cache": {
                  "docs": "The cache duration in seconds.",
                  "type": "optional<long>",
                },
                "download": {
                  "docs": "Set it to 0 to prevent download.",
                  "type": "optional<integer>",
                },
                "focusX": {
                  "docs": "Override the y focus point.",
                  "type": "optional<float>",
                },
                "focusY": {
                  "docs": "Override the x focus point.",
                  "type": "optional<float>",
                },
                "force": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<boolean>",
                },
                "format": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "docs": "The target height of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The resize mode when the width and height is defined.",
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "docs": "True to ignore the asset focus point if any.",
                  "type": "optional<boolean>",
                },
                "quality": {
                  "docs": "Optional image quality, it is is an jpeg image.",
                  "type": "optional<integer>",
                },
                "version": {
                  "docs": "The optional version of the asset.",
                  "type": "optional<long>",
                },
                "width": {
                  "docs": "The target width of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetContentBySlug": {
            "auth": true,
            "display-name": "Get the asset content.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/assets/{app}/{idOrSlug}/{more}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "idOrSlug": {
                "docs": "The id or slug of the asset.",
                "type": "string",
              },
              "more": {
                "docs": "Optional suffix that can be used to seo-optimize the link to the image Has not effect.",
                "type": "optional<string>",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentBySlugRequest",
              "query-parameters": {
                "auto": {
                  "docs": "True to use auto format.",
                  "type": "optional<boolean>",
                },
                "bg": {
                  "docs": "Optional background color.",
                  "type": "optional<string>",
                },
                "cache": {
                  "docs": "The cache duration in seconds.",
                  "type": "optional<long>",
                },
                "download": {
                  "docs": "Set it to 0 to prevent download.",
                  "type": "optional<integer>",
                },
                "focusX": {
                  "docs": "Override the y focus point.",
                  "type": "optional<float>",
                },
                "focusY": {
                  "docs": "Override the x focus point.",
                  "type": "optional<float>",
                },
                "force": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<boolean>",
                },
                "format": {
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "docs": "The target height of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The resize mode when the width and height is defined.",
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "docs": "True to ignore the asset focus point if any.",
                  "type": "optional<boolean>",
                },
                "quality": {
                  "docs": "Optional image quality, it is is an jpeg image.",
                  "type": "optional<integer>",
                },
                "version": {
                  "docs": "The optional version of the asset.",
                  "type": "optional<long>",
                },
                "width": {
                  "docs": "The target width of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetFolders": {
            "auth": true,
            "display-name": "Get asset folders.",
            "docs": "Get all asset folders for the app.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "folderName": "folderName",
                        "id": "id",
                        "parentId": "parentId",
                        "version": 1000000,
                      },
                    ],
                    "path": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "folderName": "folderName",
                        "id": "id",
                        "parentId": "parentId",
                        "version": 1000000,
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "AssetsGetAssetFoldersRequest",
              "query-parameters": {
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
                "scope": {
                  "docs": "The scope of the query.",
                  "type": "optional<root.AssetFolderScope>",
                },
              },
            },
            "response": {
              "docs": "Asset folders returned.",
              "type": "root.AssetFoldersDto",
            },
          },
          "getAssets": {
            "auth": true,
            "display-name": "Get assets.",
            "docs": "Get all assets for the app.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "_meta": {
                          "isDuplicate": "isDuplicate",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "editToken": "editToken",
                        "fileHash": "fileHash",
                        "fileName": "fileName",
                        "fileSize": 1000000,
                        "fileType": "fileType",
                        "fileVersion": 1000000,
                        "id": "id",
                        "isImage": true,
                        "isProtected": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "metadata": {
                          "key": "value",
                        },
                        "metadataText": "metadataText",
                        "mimeType": "mimeType",
                        "parentId": "parentId",
                        "pixelHeight": 1,
                        "pixelWidth": 1,
                        "slug": "slug",
                        "tags": [
                          "tags",
                        ],
                        "type": "Unknown",
                        "version": 1000000,
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "AssetsGetAssetsRequest",
              "query-parameters": {
                "$filter": {
                  "docs": "Optional OData filter.",
                  "type": "optional<string>",
                },
                "$orderby": {
                  "docs": "Optional OData order definition.",
                  "type": "optional<string>",
                },
                "$skip": {
                  "docs": "Optional number of items to skip.",
                  "type": "optional<double>",
                },
                "$top": {
                  "docs": "Optional number of items to take.",
                  "type": "optional<double>",
                },
                "ids": {
                  "docs": "The optional asset ids.",
                  "type": "optional<string>",
                },
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getAssetsPost": {
            "auth": true,
            "display-name": "Get assets.",
            "docs": "Get all assets for the app.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "_meta": {
                          "isDuplicate": "isDuplicate",
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "editToken": "editToken",
                        "fileHash": "fileHash",
                        "fileName": "fileName",
                        "fileSize": 1000000,
                        "fileType": "fileType",
                        "fileVersion": 1000000,
                        "id": "id",
                        "isImage": true,
                        "isProtected": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "metadata": {
                          "key": "value",
                        },
                        "metadataText": "metadataText",
                        "mimeType": "mimeType",
                        "parentId": "parentId",
                        "pixelHeight": 1,
                        "pixelWidth": 1,
                        "slug": "slug",
                        "tags": [
                          "tags",
                        ],
                        "type": "Unknown",
                        "version": 1000000,
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/query",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.QueryDto",
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getTags": {
            "auth": true,
            "display-name": "Get assets tags.",
            "docs": "Get all tags for assets.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "key": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/tags",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Assets tags returned.",
              "type": "map<string, integer>",
            },
          },
          "postAsset": {
            "auth": true,
            "display-name": "Upload a new asset.",
            "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ContentTooLargeError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AssetsPostAssetRequest",
              "query-parameters": {
                "duplicate": {
                  "docs": "True to duplicate the asset, event if the file has been uploaded.",
                  "type": "optional<boolean>",
                },
                "id": {
                  "docs": "The optional custom asset id.",
                  "type": "optional<string>",
                },
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created.",
              "type": "root.AssetDto",
            },
          },
          "postAssetFolder": {
            "auth": true,
            "display-name": "Create an asset folder.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "folderName": "folderName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "folderName": "folderName",
                    "id": "id",
                    "parentId": "parentId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "parentId": {
                    "docs": "The ID of the parent folder.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder created.",
              "type": "root.AssetFolderDto",
            },
          },
          "postUpsertAsset": {
            "auth": true,
            "display-name": "Upsert an asset.",
            "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ContentTooLargeError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The optional custom asset id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AssetsPostUpsertAssetRequest",
              "query-parameters": {
                "duplicate": {
                  "docs": "True to duplicate the asset, event if the file has been uploaded.",
                  "type": "optional<boolean>",
                },
                "parentId": {
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created or updated.",
              "type": "root.AssetDto",
            },
          },
          "putAsset": {
            "auth": true,
            "display-name": "Update an asset.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fileName": {
                    "docs": "The new name of the asset.",
                    "type": "optional<string>",
                  },
                  "isProtected": {
                    "docs": "True, when the asset is not public.",
                    "type": "optional<boolean>",
                  },
                  "metadata": {
                    "docs": "The asset metadata.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "slug": {
                    "docs": "The new slug of the asset.",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "The new asset tags.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AnnotateAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetContent": {
            "auth": true,
            "display-name": "Replace asset content.",
            "docs": "Use multipart request to upload an asset.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ContentTooLargeError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}/content",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "optional<file>",
                },
              },
              "content-type": "multipart/form-data",
              "headers": undefined,
              "name": "AssetsPutAssetContentRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetFolder": {
            "auth": true,
            "display-name": "Update an asset folder.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {
                  "folderName": "folderName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "folderName": "folderName",
                    "id": "id",
                    "parentId": "parentId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "RenameAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder updated.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetFolderParent": {
            "auth": true,
            "display-name": "Move an asset folder.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "folderName": "folderName",
                    "id": "id",
                    "parentId": "parentId",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/folders/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder moved.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetParent": {
            "auth": true,
            "display-name": "Moves the asset.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isDuplicate": "isDuplicate",
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "editToken": "editToken",
                    "fileHash": "fileHash",
                    "fileName": "fileName",
                    "fileSize": 1000000,
                    "fileType": "fileType",
                    "fileVersion": 1000000,
                    "id": "id",
                    "isImage": true,
                    "isProtected": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "metadata": {
                      "key": "value",
                    },
                    "metadataText": "metadataText",
                    "mimeType": "mimeType",
                    "parentId": "parentId",
                    "pixelHeight": 1,
                    "pixelWidth": 1,
                    "slug": "slug",
                    "tags": [
                      "tags",
                    ],
                    "type": "Unknown",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset moved.",
              "type": "root.AssetDto",
            },
          },
          "putTag": {
            "auth": true,
            "display-name": "Rename an asset tag.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "name": "name",
                },
                "request": {
                  "tagName": "tagName",
                },
                "response": {
                  "body": {
                    "key": 1,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/assets/tags/{name}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "name": {
                "docs": "The tag to return.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "tagName": {
                    "docs": "The new name for the tag.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "RenameTagDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset tag renamed and new tags returned.",
              "type": "map<string, integer>",
            },
          },
        },
      },
    },
    "backups.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteBackup": {
            "auth": true,
            "display-name": "Delete a backup.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the backup to delete.",
                "type": "string",
              },
            },
          },
          "getBackupContent": {
            "auth": true,
            "display-name": "Get the backup content.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the backup.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackupContentV2": {
            "auth": true,
            "display-name": "Get the backup content.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/backups/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the backup.",
                "type": "string",
              },
            },
            "request": {
              "name": "BackupsGetBackupContentV2Request",
              "query-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "type": "optional<string>",
                },
                "appId": {
                  "docs": "The ID of the app.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackups": {
            "auth": true,
            "display-name": "Get all backup jobs.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "handledAssets": 1,
                        "handledEvents": 1,
                        "id": "id",
                        "started": "2024-01-15T09:30:00Z",
                        "status": "Created",
                        "stopped": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Backups returned.",
              "type": "root.BackupJobsDto",
            },
          },
          "getRestoreJob": {
            "auth": true,
            "display-name": "Get current restore status.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "log": [
                      "log",
                    ],
                    "started": "2024-01-15T09:30:00Z",
                    "status": "Created",
                    "stopped": "2024-01-15T09:30:00Z",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/restore",
            "response": {
              "docs": "Status returned.",
              "type": "root.RestoreJobDto",
            },
          },
          "postBackup": {
            "auth": true,
            "display-name": "Start a new backup.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "postRestoreJob": {
            "auth": true,
            "display-name": "Restore a backup.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "url": "url",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/restore",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                  "url": {
                    "docs": "The url to the restore file.",
                    "type": "string",
                    "validation": {
                      "format": "uri",
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "RestoreRequestDto",
              "query-parameters": undefined,
            },
          },
        },
      },
    },
    "comments.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "display-name": "Delete a comment.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentId": "commentId",
                  "commentsId": "commentsId",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
          },
          "getComments": {
            "auth": true,
            "display-name": "Get all comments.",
            "docs": "When passing in a version you can retrieve all updates since then.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentsId": "commentsId",
                },
                "response": {
                  "body": {
                    "createdComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "deletedComments": [
                      "deletedComments",
                    ],
                    "updatedComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "name": "CommentsGetCommentsRequest",
              "query-parameters": {
                "version": {
                  "docs": "The current version.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Comments returned.",
              "type": "root.CommentsDto",
            },
          },
          "getWatchingUsers": {
            "auth": true,
            "display-name": "Get all watching users..",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    "string",
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/watching/{resource}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "resource": {
                "docs": "The path to the resource.",
                "type": "optional<string>",
              },
            },
            "response": {
              "docs": "Watching users returned.",
              "type": "list<string>",
            },
          },
          "postComment": {
            "auth": true,
            "display-name": "Create a new comment.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentsId": "commentsId",
                },
                "request": {
                  "text": "text",
                },
                "response": {
                  "body": {
                    "id": "id",
                    "text": "text",
                    "time": "2024-01-15T09:30:00Z",
                    "url": "url",
                    "user": "user",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpsertCommentDto",
            },
            "response": {
              "docs": "Comment created.",
              "type": "root.CommentDto",
            },
          },
          "putComment": {
            "auth": true,
            "display-name": "Update a comment.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "commentId": "commentId",
                  "commentsId": "commentsId",
                },
                "request": {
                  "text": "text",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpsertCommentDto",
            },
          },
        },
      },
    },
    "contents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateContents": {
            "auth": true,
            "display-name": "Bulk update content items.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "jobs": [
                    {},
                  ],
                },
                "response": {
                  "body": [
                    {
                      "contentId": "contentId",
                      "error": {
                        "details": [
                          "details",
                        ],
                        "errorCode": "errorCode",
                        "message": "message",
                        "statusCode": 1,
                        "traceId": "traceId",
                        "type": "type",
                      },
                      "id": "id",
                      "jobIndex": 1,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/bulk",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted contents.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidate": {
                    "docs": "True to turn off validation for faster inserts. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidateWorkflow": {
                    "docs": "True to turn off validation of workflow rules. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "list<root.BulkUpdateContentsJobDto>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "availability": "deprecated",
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "list<root.BulkResultDto>",
            },
          },
          "createDraft": {
            "auth": true,
            "display-name": "Create a new draft version.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to create the draft for.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft created.",
              "type": "root.ContentsDto",
            },
          },
          "deleteContent": {
            "auth": true,
            "display-name": "Delete a content item.",
            "docs": "You can create an generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to delete.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsDeleteContentRequest",
              "query-parameters": {
                "checkReferrers": {
                  "docs": "True to check referrers of this content.",
                  "type": "optional<boolean>",
                },
                "permanent": {
                  "docs": "True to delete the content permanently.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteContentStatus": {
            "auth": true,
            "display-name": "Cancel status change of a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to cancel.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content status change cancelled.",
              "type": "root.ContentsDto",
            },
          },
          "deleteVersion": {
            "auth": true,
            "display-name": "Delete the draft version.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to delete the draft from.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft deleted.",
              "type": "root.ContentsDto",
            },
          },
          "getContent": {
            "auth": true,
            "display-name": "Get a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "data": {
                      "key": "value",
                    },
                    "editToken": "editToken",
                    "id": "id",
                    "isDeleted": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "newStatus": "newStatus",
                    "newStatusColor": "newStatusColor",
                    "referenceData": {
                      "key": {
                        "key": "value",
                      },
                    },
                    "scheduleJob": {
                      "color": "color",
                      "dueTime": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "scheduledBy": "scheduledBy",
                      "status": "status",
                    },
                    "schemaDisplayName": "schemaDisplayName",
                    "schemaId": "schemaId",
                    "schemaName": "schemaName",
                    "status": "status",
                    "statusColor": "statusColor",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentRequest",
              "query-parameters": {
                "version": {
                  "docs": "The optional version.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentDto",
            },
          },
          "getContentValidity": {
            "auth": true,
            "display-name": "Get a content item validity.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/validity",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
          },
          "getContentVersion": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Get a content by version.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/{version}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
              "version": {
                "docs": "The version fo the content to fetch.",
                "type": "integer",
              },
            },
            "response": {
              "docs": "Content version returned.",
              "type": "file",
            },
          },
          "getContents": {
            "auth": true,
            "display-name": "Queries contents.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentsRequest",
              "query-parameters": {
                "ids": {
                  "docs": "The optional ids of the content to fetch.",
                  "type": "optional<string>",
                },
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getContentsPost": {
            "auth": true,
            "display-name": "Queries contents.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/query",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.QueryDto",
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferences": {
            "auth": true,
            "display-name": "Get all references of a content.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/references",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencesRequest",
              "query-parameters": {
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferencing": {
            "auth": true,
            "display-name": "Get a referencing contents of a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/referencing",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencingRequest",
              "query-parameters": {
                "q": {
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentsDto",
            },
          },
          "patchContent": {
            "auth": true,
            "display-name": "Patchs a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "PATCH",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to patch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
            },
            "response": {
              "docs": "Content patched.",
              "type": "root.ContentsDto",
            },
          },
          "postContent": {
            "auth": true,
            "display-name": "Create a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
              "name": "ContentsPostContentRequest",
              "query-parameters": {
                "id": {
                  "docs": "The optional custom content id.",
                  "type": "optional<string>",
                },
                "publish": {
                  "docs": "True to automatically publish the content.",
                  "type": "optional<boolean>",
                },
                "status": {
                  "docs": "The initial status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created.",
              "type": "root.ContentsDto",
            },
          },
          "postContents": {
            "auth": true,
            "availability": "deprecated",
            "display-name": "Import content items.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "datas": [
                    {
                      "key": {
                        "key": "value",
                      },
                    },
                  ],
                },
                "response": {
                  "body": [
                    {
                      "contentId": "contentId",
                      "error": {
                        "details": [
                          "details",
                        ],
                        "errorCode": "errorCode",
                        "message": "message",
                        "statusCode": 1,
                        "traceId": "traceId",
                        "type": "type",
                      },
                      "id": "id",
                      "jobIndex": 1,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/import",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "datas": {
                    "docs": "The data to import.",
                    "type": "list<root.ContentData>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "availability": "deprecated",
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ImportContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Contents created.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "postUpsertContent": {
            "auth": true,
            "display-name": "Upsert a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to update.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
              "name": "ContentsPostUpsertContentRequest",
              "query-parameters": {
                "patch": {
                  "docs": "Makes the update as patch.",
                  "type": "optional<boolean>",
                },
                "publish": {
                  "docs": "True to automatically publish the content.",
                  "type": "optional<boolean>",
                },
                "status": {
                  "docs": "The initial status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created or updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContent": {
            "auth": true,
            "display-name": "Update a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "key": {
                    "key": "value",
                  },
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to update.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ContentData",
            },
            "response": {
              "docs": "Content updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContentStatus": {
            "auth": true,
            "display-name": "Change status of a content item.",
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                  "schema": "schema",
                },
                "request": {
                  "status": "status",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "data": {
                          "key": "value",
                        },
                        "editToken": "editToken",
                        "id": "id",
                        "isDeleted": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "newStatus": "newStatus",
                        "newStatusColor": "newStatusColor",
                        "referenceData": {
                          "key": {
                            "key": "value",
                          },
                        },
                        "scheduleJob": {
                          "color": "color",
                          "dueTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "scheduledBy": "scheduledBy",
                          "status": "status",
                        },
                        "schemaDisplayName": "schemaDisplayName",
                        "schemaId": "schemaId",
                        "schemaName": "schemaName",
                        "status": "status",
                        "statusColor": "statusColor",
                        "version": 1000000,
                      },
                    ],
                    "statuses": [
                      {
                        "color": "color",
                        "status": "status",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to change.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of this content.",
                    "type": "optional<boolean>",
                  },
                  "dueTime": {
                    "docs": "The due time.",
                    "type": "optional<datetime>",
                  },
                  "status": {
                    "docs": "The new status.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeStatusDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Content status changed.",
              "type": "root.ContentsDto",
            },
          },
        },
      },
    },
    "diagnostics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getDump": {
            "auth": true,
            "display-name": "Creates a dump and writes it into storage..",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
              "root.NotImplementedError",
            ],
            "examples": [
              {},
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/diagnostics/dump",
          },
          "getGCDump": {
            "auth": true,
            "display-name": "Creates a gc dump and writes it into storage.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
              "root.NotImplementedError",
            ],
            "examples": [
              {},
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/diagnostics/gcdump",
          },
        },
      },
    },
    "eventConsumers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getEventConsumers": {
            "auth": true,
            "display-name": "Get event consumers.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "count": 1,
                        "error": "error",
                        "isResetting": true,
                        "isStopped": true,
                        "name": "name",
                        "position": "position",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/event-consumers",
            "response": {
              "docs": "Event consumers returned.",
              "type": "root.EventConsumersDto",
            },
          },
          "resetEventConsumer": {
            "auth": true,
            "display-name": "Reset an event consumer.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "consumerName": "consumerName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "count": 1,
                    "error": "error",
                    "isResetting": true,
                    "isStopped": true,
                    "name": "name",
                    "position": "position",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/event-consumers/{consumerName}/reset",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer resetted asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "startEventConsumer": {
            "auth": true,
            "display-name": "Start an event consumer.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "consumerName": "consumerName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "count": 1,
                    "error": "error",
                    "isResetting": true,
                    "isStopped": true,
                    "name": "name",
                    "position": "position",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/event-consumers/{consumerName}/start",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer started asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "stopEventConsumer": {
            "auth": true,
            "display-name": "Stop an event consumer.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "consumerName": "consumerName",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "count": 1,
                    "error": "error",
                    "isResetting": true,
                    "isStopped": true,
                    "name": "name",
                    "position": "position",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/event-consumers/{consumerName}/stop",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer stopped asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
        },
      },
    },
    "history.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppHistory": {
            "auth": true,
            "display-name": "Get historical events.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    {
                      "actor": "actor",
                      "created": "2024-01-15T09:30:00Z",
                      "eventId": "eventId",
                      "eventType": "eventType",
                      "message": "message",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/history",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "HistoryGetAppHistoryRequest",
              "query-parameters": {
                "channel": {
                  "docs": "The name of the channel.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
          "getTeamHistory": {
            "auth": true,
            "display-name": "Get historical events for a team.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": [
                    {
                      "actor": "actor",
                      "created": "2024-01-15T09:30:00Z",
                      "eventId": "eventId",
                      "eventType": "eventType",
                      "message": "message",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/history",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "request": {
              "name": "HistoryGetTeamHistoryRequest",
              "query-parameters": {
                "channel": {
                  "docs": "The name of the channel.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
        },
      },
    },
    "languages.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getLanguages": {
            "auth": true,
            "display-name": "Get supported languages.",
            "docs": "Provide a list of supported language codes, following the ISO2Code standard.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "englishName": "englishName",
                      "iso2Code": "iso2Code",
                      "nativeName": "nativeName",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/languages",
            "response": {
              "docs": "Supported language codes returned.",
              "type": "list<root.LanguageDto>",
            },
          },
        },
      },
    },
    "news.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getNews": {
            "auth": true,
            "display-name": "Get features since version.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "features": [
                      {
                        "name": "name",
                        "text": "text",
                      },
                    ],
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/news/features",
            "request": {
              "name": "NewsGetNewsRequest",
              "query-parameters": {
                "version": {
                  "docs": "The latest received version.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Latest features returned.",
              "type": "root.FeaturesDto",
            },
          },
        },
      },
    },
    "notifications.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "display-name": "Delete a notification.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "commentId": "commentId",
                  "userId": "userId",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/users/{userId}/notifications/{commentId}",
            "path-parameters": {
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "userId": {
                "docs": "The user id.",
                "type": "string",
              },
            },
          },
          "getNotifications": {
            "auth": true,
            "display-name": "Get all notifications.",
            "docs": "When passing in a version you can retrieve all updates since then.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "userId": "userId",
                },
                "response": {
                  "body": {
                    "createdComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "deletedComments": [
                      "deletedComments",
                    ],
                    "updatedComments": [
                      {
                        "id": "id",
                        "text": "text",
                        "time": "2024-01-15T09:30:00Z",
                        "url": "url",
                        "user": "user",
                      },
                    ],
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users/{userId}/notifications",
            "path-parameters": {
              "userId": {
                "docs": "The user id.",
                "type": "string",
              },
            },
            "request": {
              "name": "NotificationsGetNotificationsRequest",
              "query-parameters": {
                "version": {
                  "docs": "The current version.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "All comments returned.",
              "type": "root.CommentsDto",
            },
          },
        },
      },
    },
    "ping.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppPing": {
            "auth": true,
            "display-name": "Get ping status.",
            "docs": "Can be used to test, if the Squidex API is alive and responding.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/ping/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "getInfo": {
            "auth": true,
            "display-name": "Get API information.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/info",
            "response": {
              "docs": "Infos returned.",
              "type": "root.ExposedValues",
            },
          },
          "getPing": {
            "auth": true,
            "display-name": "Get ping status of the API.",
            "docs": "Can be used to test, if the Squidex API is alive and responding.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {},
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/ping",
          },
        },
      },
    },
    "plans.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getPlans": {
            "auth": true,
            "display-name": "Get app plan information.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "currentPlanId": "currentPlanId",
                    "locked": "None",
                    "planOwner": "planOwner",
                    "plans": [
                      {
                        "confirmText": "confirmText",
                        "costs": "costs",
                        "id": "id",
                        "maxApiBytes": 1000000,
                        "maxApiCalls": 1000000,
                        "maxAssetSize": 1000000,
                        "maxContributors": 1,
                        "name": "name",
                        "yearlyConfirmText": "yearlyConfirmText",
                        "yearlyCosts": "yearlyCosts",
                        "yearlyId": "yearlyId",
                      },
                    ],
                    "portalLink": "portalLink",
                    "referral": {
                      "code": "code",
                      "condition": "condition",
                      "earned": "earned",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/plans",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "getTeamPlans": {
            "auth": true,
            "display-name": "Get team plan information.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "currentPlanId": "currentPlanId",
                    "locked": "None",
                    "planOwner": "planOwner",
                    "plans": [
                      {
                        "confirmText": "confirmText",
                        "costs": "costs",
                        "id": "id",
                        "maxApiBytes": 1000000,
                        "maxApiCalls": 1000000,
                        "maxAssetSize": 1000000,
                        "maxContributors": 1,
                        "name": "name",
                        "yearlyConfirmText": "yearlyConfirmText",
                        "yearlyCosts": "yearlyCosts",
                        "yearlyId": "yearlyId",
                      },
                    ],
                    "portalLink": "portalLink",
                    "referral": {
                      "code": "code",
                      "condition": "condition",
                      "earned": "earned",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/plans",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Team plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "putPlan": {
            "auth": true,
            "display-name": "Change the app plan.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "planId": "planId",
                },
                "response": {
                  "body": {
                    "redirectUri": "redirectUri",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/plan",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.ChangePlanDto",
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
          "putTeamPlan": {
            "auth": true,
            "display-name": "Change the team plan.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "request": {
                  "planId": "planId",
                },
                "response": {
                  "body": {
                    "redirectUri": "redirectUri",
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/teams/{team}/plan",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ChangePlanDto",
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
        },
      },
    },
    "rules.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteEvent": {
            "auth": true,
            "display-name": "Cancels an event.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The event to enqueue.",
                "type": "string",
              },
            },
          },
          "deleteEvents": {
            "auth": true,
            "display-name": "Cancels all events.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "deleteRule": {
            "auth": true,
            "display-name": "Delete a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to delete.",
                "type": "string",
              },
            },
          },
          "deleteRuleEvents": {
            "auth": true,
            "display-name": "Cancels all rule events.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to cancel.",
                "type": "string",
              },
            },
          },
          "deleteRuleRun": {
            "auth": true,
            "display-name": "Cancel the current run.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/run",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "disableRule": {
            "auth": true,
            "display-name": "Disable a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to disable.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule disabled.",
              "type": "root.RuleDto",
            },
          },
          "enableRule": {
            "auth": true,
            "display-name": "Enable a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to enable.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule enabled.",
              "type": "root.RuleDto",
            },
          },
          "getActions": {
            "auth": true,
            "display-name": "Get supported rule actions.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "key": {
                      "description": "description",
                      "display": "display",
                      "iconColor": "iconColor",
                      "iconImage": "iconImage",
                      "properties": [
                        {
                          "display": "display",
                          "editor": "Checkbox",
                          "isFormattable": true,
                          "isRequired": true,
                          "name": "name",
                        },
                      ],
                      "readMore": "readMore",
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/rules/actions",
            "response": {
              "docs": "Rule actions returned.",
              "type": "map<string, root.RuleElementDto>",
            },
          },
          "getEventSchema": {
            "auth": true,
            "display-name": "Provide the json schema for the event with the specified name.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "type": "type",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/rules/eventtypes/{type}",
            "path-parameters": {
              "type": {
                "docs": "The type name of the event.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule event type found.",
              "type": "unknown",
            },
          },
          "getEventTypes": {
            "auth": true,
            "display-name": "Provide a list of all event types that are used in rules.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    "string",
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/rules/eventtypes",
            "response": {
              "docs": "Rule events returned.",
              "type": "list<string>",
            },
          },
          "getEvents": {
            "auth": true,
            "display-name": "Get rule events.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "eventName": "eventName",
                        "id": "id",
                        "jobResult": "Pending",
                        "lastDump": "lastDump",
                        "nextAttempt": "2024-01-15T09:30:00Z",
                        "numCalls": 1,
                        "result": "Pending",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "RulesGetEventsRequest",
              "query-parameters": {
                "ruleId": {
                  "docs": "The optional rule id to filter to events.",
                  "type": "optional<string>",
                },
                "skip": {
                  "docs": "The number of events to skip.",
                  "type": "optional<integer>",
                },
                "take": {
                  "docs": "The number of events to take.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Rule events returned.",
              "type": "root.RuleEventsDto",
            },
          },
          "getRules": {
            "auth": true,
            "display-name": "Get rules.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [],
                    "runningRuleId": "runningRuleId",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Rules returned.",
              "type": "root.RulesDto",
            },
          },
          "postRule": {
            "auth": true,
            "display-name": "Create a new rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.CreateRuleDto",
            },
            "response": {
              "docs": "Rule created.",
              "type": "root.RuleDto",
            },
          },
          "putEvent": {
            "auth": true,
            "display-name": "Retry the event immediately.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The event to enqueue.",
                "type": "string",
              },
            },
          },
          "putRule": {
            "auth": true,
            "display-name": "Update a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "action": {
                    "docs": "The action properties.",
                    "type": "optional<root.RuleActionDto>",
                  },
                  "isEnabled": {
                    "docs": "Enable or disable the rule.",
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Optional rule name.",
                    "type": "optional<string>",
                  },
                  "trigger": {
                    "docs": "The trigger properties.",
                    "type": "optional<root.RuleTriggerDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRuleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Rule updated.",
              "type": "root.RuleDto",
            },
          },
          "putRuleRun": {
            "auth": true,
            "display-name": "Run a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/run",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to run.",
                "type": "string",
              },
            },
            "request": {
              "name": "RulesPutRuleRunRequest",
              "query-parameters": {
                "fromSnapshots": {
                  "docs": "Runs the rule from snapeshots if possible.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "simulateGET": {
            "auth": true,
            "display-name": "Simulate a rule.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "actionData": "actionData",
                        "actionName": "actionName",
                        "enrichedEvent": {
                          "key": "value",
                        },
                        "error": "error",
                        "event": {
                          "key": "value",
                        },
                        "eventId": "eventId",
                        "eventName": "eventName",
                        "skipReasons": [
                          "None",
                        ],
                        "uniqueId": "uniqueId",
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/simulate",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to simulate.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "simulatePOST": {
            "auth": true,
            "display-name": "Simulate a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/simulate",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": "root.CreateRuleDto",
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "triggerRule": {
            "auth": true,
            "display-name": "Trigger a rule.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": "id",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/rules/{id}/trigger",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to disable.",
                "type": "string",
              },
            },
          },
        },
      },
    },
    "schemas.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteField": {
            "auth": true,
            "display-name": "Delete a schema field.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteNestedField": {
            "auth": true,
            "display-name": "Delete a nested field.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteSchema": {
            "auth": true,
            "display-name": "Delete a schema.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to delete.",
                "type": "string",
              },
            },
          },
          "disableField": {
            "auth": true,
            "display-name": "Disable a schema field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "disableNestedField": {
            "auth": true,
            "display-name": "Disable a nested field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableField": {
            "auth": true,
            "display-name": "Enable a schema field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to enable.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableNestedField": {
            "auth": true,
            "display-name": "Enable a nested field.",
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to enable.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "getSchema": {
            "auth": true,
            "display-name": "Get a schema by name.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to retrieve.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema found.",
              "type": "root.SchemaDto",
            },
          },
          "getSchemas": {
            "auth": true,
            "display-name": "Get schemas.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "category": "category",
                        "created": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "fieldRules": [
                          {
                            "action": "Disable",
                            "field": "field",
                          },
                        ],
                        "fields": [],
                        "fieldsInLists": [
                          "fieldsInLists",
                        ],
                        "fieldsInReferences": [
                          "fieldsInReferences",
                        ],
                        "id": "id",
                        "isPublished": true,
                        "isSingleton": true,
                        "lastModified": "2024-01-15T09:30:00Z",
                        "lastModifiedBy": "lastModifiedBy",
                        "name": "name",
                        "previewUrls": {
                          "key": "value",
                        },
                        "properties": {
                          "validateOnPublish": true,
                        },
                        "scripts": {},
                        "type": "Default",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Schemas returned.",
              "type": "root.SchemasDto",
            },
          },
          "hideField": {
            "auth": true,
            "display-name": "Hide a schema field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to hide.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "hideNestedField": {
            "auth": true,
            "display-name": "Hide a nested field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to hide.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "lockField": {
            "auth": true,
            "display-name": "Lock a schema field.",
            "docs": "A locked field cannot be updated or deleted.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to lock.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "lockNestedField": {
            "auth": true,
            "display-name": "Lock a nested field.",
            "docs": "A locked field cannot be edited or deleted.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to lock.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "postField": {
            "auth": true,
            "display-name": "Add a schema field.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.AddFieldDto",
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postNestedField": {
            "auth": true,
            "display-name": "Add a nested field.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.AddFieldDto",
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postSchema": {
            "auth": true,
            "display-name": "Create a new schema.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "isPublished": true,
                  "isSingleton": true,
                  "name": "name",
                  "type": "Default",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.UpsertSchemaDto",
                ],
                "properties": {
                  "isSingleton": {
                    "availability": "deprecated",
                    "docs": "Set to true to allow a single content item only.",
                    "type": "boolean",
                  },
                  "name": {
                    "docs": "The name of the schema.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
                    },
                  },
                  "type": {
                    "docs": "The type of the schema.",
                    "type": "root.SchemaType",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema created.",
              "type": "root.SchemaDto",
            },
          },
          "publishSchema": {
            "auth": true,
            "display-name": "Publish a schema.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/publish",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to publish.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema published.",
              "type": "root.SchemaDto",
            },
          },
          "putCategory": {
            "auth": true,
            "display-name": "Update a schema category.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/category",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the category.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeCategoryDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putField": {
            "auth": true,
            "display-name": "Update a schema field.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to update.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpdateFieldDto",
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedField": {
            "auth": true,
            "display-name": "Update a nested field.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to update.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.UpdateFieldDto",
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedFieldOrdering": {
            "auth": true,
            "display-name": "Reorder all nested fields.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "request": {
                  "fieldIds": [
                    1000000,
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ReorderFieldsDto",
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putPreviewUrls": {
            "auth": true,
            "display-name": "Update the preview urls.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "key": "value",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/preview-urls",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ConfigurePreviewUrlsDto",
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putRules": {
            "auth": true,
            "display-name": "Update the rules.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldRules": {
                    "docs": "The field rules to configure.",
                    "type": "optional<list<root.FieldRuleDto>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureFieldRulesDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchema": {
            "auth": true,
            "display-name": "Update a schema.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "validateOnPublish": true,
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "contentEditorUrl": {
                    "docs": "The url to the editor plugin.",
                    "type": "optional<string>",
                  },
                  "contentSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content items.",
                    "type": "optional<string>",
                  },
                  "contentsSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content lists.",
                    "type": "optional<string>",
                  },
                  "hints": {
                    "docs": "Hints to describe the schema.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 1000,
                      "minLength": 0,
                      "pattern": undefined,
                    },
                  },
                  "label": {
                    "docs": "Optional label for the editor.",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 100,
                      "minLength": 0,
                      "pattern": undefined,
                    },
                  },
                  "tags": {
                    "docs": "Tags for automation processes.",
                    "type": "optional<list<string>>",
                  },
                  "validateOnPublish": {
                    "docs": "True to validate the content items on publish.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaFieldOrdering": {
            "auth": true,
            "display-name": "Reorder all fields.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "fieldIds": [
                    1000000,
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/ordering",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.ReorderFieldsDto",
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaSync": {
            "auth": true,
            "display-name": "Synchronize a schema.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {
                  "isPublished": true,
                  "noFieldDeletion": true,
                  "noFieldRecreation": true,
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/sync",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.UpsertSchemaDto",
                ],
                "properties": {
                  "noFieldDeletion": {
                    "docs": "True, when fields should not be deleted.",
                    "type": "boolean",
                  },
                  "noFieldRecreation": {
                    "docs": "True, when fields with different types should not be recreated.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "SynchronizeSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaUIFields": {
            "auth": true,
            "display-name": "Configure UI fields.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/ui",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldsInLists": {
                    "docs": "The name of fields that are used in content lists.",
                    "type": "optional<list<string>>",
                  },
                  "fieldsInReferences": {
                    "docs": "The name of fields that are used in content references.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureUiFieldsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema UI fields defined.",
              "type": "root.SchemaDto",
            },
          },
          "putScripts": {
            "auth": true,
            "display-name": "Update the scripts.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "request": {},
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.SchemaScriptsDto",
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "showField": {
            "auth": true,
            "display-name": "Show a schema field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/show",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to show.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "showNestedField": {
            "auth": true,
            "display-name": "Show a nested field.",
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "id": 1000000,
                  "parentId": 1000000,
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to show.",
                "type": "long",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "long",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "unpublishSchema": {
            "auth": true,
            "display-name": "Unpublish a schema.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "schema": "schema",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "category": "category",
                    "created": "2024-01-15T09:30:00Z",
                    "createdBy": "createdBy",
                    "fieldRules": [
                      {
                        "action": "Disable",
                        "condition": "condition",
                        "field": "field",
                      },
                    ],
                    "fields": [],
                    "fieldsInLists": [
                      "fieldsInLists",
                    ],
                    "fieldsInReferences": [
                      "fieldsInReferences",
                    ],
                    "id": "id",
                    "isPublished": true,
                    "isSingleton": true,
                    "lastModified": "2024-01-15T09:30:00Z",
                    "lastModifiedBy": "lastModifiedBy",
                    "name": "name",
                    "previewUrls": {
                      "key": "value",
                    },
                    "properties": {
                      "contentEditorUrl": "contentEditorUrl",
                      "contentSidebarUrl": "contentSidebarUrl",
                      "contentsSidebarUrl": "contentsSidebarUrl",
                      "hints": "hints",
                      "label": "label",
                      "tags": [
                        "tags",
                      ],
                      "validateOnPublish": true,
                    },
                    "scripts": {
                      "change": "change",
                      "create": "create",
                      "delete": "delete",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                    },
                    "type": "Default",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/apps/{app}/schemas/{schema}/unpublish",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to unpublish.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema unpublished.",
              "type": "root.SchemaDto",
            },
          },
        },
      },
    },
    "search.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getSearchResults": {
            "auth": true,
            "display-name": "Get search results.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "label": "label",
                      "name": "name",
                      "type": "Asset",
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/search",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "SearchGetSearchResultsRequest",
              "query-parameters": {
                "query": {
                  "docs": "The search query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Search results returned.",
              "type": "list<root.SearchResultDto>",
            },
          },
        },
      },
    },
    "statistics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getCurrentStorageSize": {
            "auth": true,
            "display-name": "Get total asset size.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "maxAllowed": 1000000,
                    "size": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/storage/today",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getLog": {
            "auth": true,
            "display-name": "Get api calls as log file.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "response": {
                  "body": {
                    "downloadUrl": "downloadUrl",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/log",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Usage tracking results returned.",
              "type": "root.LogDownloadDto",
            },
          },
          "getStorageSizes": {
            "auth": true,
            "display-name": "Get asset usage by date.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "fromDate": "fromDate",
                  "toDate": "toDate",
                },
                "response": {
                  "body": [
                    {
                      "date": "date",
                      "totalCount": 1000000,
                      "totalSize": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getStorageSizesForTeam": {
            "auth": true,
            "display-name": "Get asset usage by date for team.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "fromDate": "fromDate",
                  "team": "team",
                  "toDate": "toDate",
                },
                "response": {
                  "body": [
                    {
                      "date": "date",
                      "totalCount": 1000000,
                      "totalSize": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getTeamCurrentStorageSizeForTeam": {
            "auth": true,
            "display-name": "Get total asset size by team.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "maxAllowed": 1000000,
                    "size": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/usages/storage/today",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getUsages": {
            "auth": true,
            "display-name": "Get api calls in date range.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                  "fromDate": "fromDate",
                  "toDate": "toDate",
                },
                "response": {
                  "body": {
                    "allowedBytes": 1000000,
                    "allowedCalls": 1000000,
                    "averageElapsedMs": 1.1,
                    "blockingApiCalls": 1000000,
                    "details": {
                      "key": [
                        {
                          "averageElapsedMs": 1.1,
                          "date": "date",
                          "totalBytes": 1000000,
                          "totalCalls": 1000000,
                        },
                      ],
                    },
                    "monthBytes": 1000000,
                    "monthCalls": 1000000,
                    "totalBytes": 1000000,
                    "totalCalls": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/apps/{app}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
          "getUsagesForTeam": {
            "auth": true,
            "display-name": "Get api calls in date range for team.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "fromDate": "fromDate",
                  "team": "team",
                  "toDate": "toDate",
                },
                "response": {
                  "body": {
                    "allowedBytes": 1000000,
                    "allowedCalls": 1000000,
                    "averageElapsedMs": 1.1,
                    "blockingApiCalls": 1000000,
                    "details": {
                      "key": [
                        {
                          "averageElapsedMs": 1.1,
                          "date": "date",
                          "totalBytes": 1000000,
                          "totalCalls": 1000000,
                        },
                      ],
                    },
                    "monthBytes": 1000000,
                    "monthCalls": 1000000,
                    "totalBytes": 1000000,
                    "totalCalls": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
        },
      },
    },
    "teams.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteContributor": {
            "auth": true,
            "display-name": "Remove contributor.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the contributor.",
                "type": "string",
              },
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "display-name": "Remove yourself.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors/me",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "display-name": "Get team contributors.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getTeam": {
            "auth": true,
            "display-name": "Get an team by name.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "roleName": "roleName",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Teams returned.",
              "type": "root.TeamDto",
            },
          },
          "getTeams": {
            "auth": true,
            "display-name": "Get your teams.",
            "docs": "You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow).
You will retrieve all teams, where you are assigned as a contributor.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "roleName": "roleName",
                      "version": 1000000,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/teams",
            "response": {
              "docs": "Teams returned.",
              "type": "list<root.TeamDto>",
            },
          },
          "postContributor": {
            "auth": true,
            "display-name": "Assign contributor to team.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "request": {
                  "contributorId": "contributorId",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "_meta": {
                      "isInvited": "isInvited",
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "contributorEmail": "contributorEmail",
                        "contributorId": "contributorId",
                        "contributorName": "contributorName",
                        "role": "role",
                      },
                    ],
                    "maxContributors": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "request": {
              "body": "root.AssignContributorDto",
            },
            "response": {
              "docs": "Contributor assigned to team.",
              "type": "root.ContributorsDto",
            },
          },
          "postTeam": {
            "auth": true,
            "display-name": "Create a new team.",
            "docs": "You can only create an team when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new team automatically.",
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "roleName": "roleName",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/teams",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "CreateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team created.",
              "type": "root.TeamDto",
            },
          },
          "putTeam": {
            "auth": true,
            "display-name": "Update the team.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "team": "team",
                },
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "created": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "lastModified": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "roleName": "roleName",
                    "version": 1000000,
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": "The name of the team to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team updated.",
              "type": "root.TeamDto",
            },
          },
        },
      },
    },
    "templates.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getTemplate": {
            "auth": true,
            "display-name": "Get template details.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "details": "details",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/templates/{name}",
            "path-parameters": {
              "name": {
                "docs": "The name of the template.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Template returned.",
              "type": "root.TemplateDetailsDto",
            },
          },
          "getTemplates": {
            "auth": true,
            "display-name": "Get all templates.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "description": "description",
                        "isStarter": true,
                        "name": "name",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/templates",
            "response": {
              "docs": "Templates returned.",
              "type": "root.TemplatesDto",
            },
          },
        },
      },
    },
    "translations.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "postTranslation": {
            "auth": true,
            "display-name": "Translate a text.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "app": "app",
                },
                "request": {
                  "targetLanguage": "targetLanguage",
                  "text": "text",
                },
                "response": {
                  "body": {
                    "result": "Translated",
                    "text": "text",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/apps/{app}/translations",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "sourceLanguage": {
                    "docs": "The optional source language.",
                    "type": "optional<string>",
                  },
                  "targetLanguage": {
                    "docs": "The target language.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "text": {
                    "docs": "The text to translate.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "TranslateDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Text translated.",
              "type": "root.TranslationDto",
            },
          },
        },
      },
    },
    "userManagement.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteUser": {
            "auth": true,
            "display-name": "Delete a User.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to delete.",
                "type": "string",
              },
            },
          },
          "getUser": {
            "auth": true,
            "display-name": "Get a user by ID.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User returned.",
              "type": "root.UserDto",
            },
          },
          "getUsers": {
            "auth": true,
            "display-name": "Get users by query.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "items": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "displayName": "displayName",
                        "email": "email",
                        "id": "id",
                        "isLocked": true,
                        "permissions": [
                          "permissions",
                        ],
                      },
                    ],
                    "total": 1000000,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/user-management",
            "request": {
              "name": "UserManagementGetUsersRequest",
              "query-parameters": {
                "query": {
                  "docs": "Optional query to search by email address or username.",
                  "type": "optional<string>",
                },
                "skip": {
                  "docs": "The number of users to skip.",
                  "type": "optional<integer>",
                },
                "take": {
                  "docs": "The number of users to return.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "root.UsersDto",
            },
          },
          "lockUser": {
            "auth": true,
            "display-name": "Lock a user.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/user-management/{id}/lock",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to lock.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User locked.",
              "type": "root.UserDto",
            },
          },
          "postUser": {
            "auth": true,
            "display-name": "Create a new user.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "displayName": "displayName",
                  "email": "email",
                  "password": "password",
                  "permissions": [
                    "permissions",
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/api/user-management",
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "putUser": {
            "auth": true,
            "display-name": "Update a user.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "request": {
                  "displayName": "displayName",
                  "email": "email",
                  "permissions": [
                    "permissions",
                  ],
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": undefined,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "optional<string>",
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "unlockUser": {
            "auth": true,
            "display-name": "Unlock a user.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/api/user-management/{id}/unlock",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to unlock.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User unlocked.",
              "type": "root.UserDto",
            },
          },
        },
      },
    },
    "users.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getUser": {
            "auth": true,
            "display-name": "Get user by id.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                    "displayName": "displayName",
                    "email": "email",
                    "id": "id",
                    "isLocked": true,
                    "permissions": [
                      "permissions",
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user (GUID).",
                "type": "string",
              },
            },
            "response": {
              "docs": "User found.",
              "type": "root.UserDto",
            },
          },
          "getUserPicture": {
            "auth": true,
            "display-name": "Get user picture by id.",
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users/{id}/picture",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user (GUID).",
                "type": "string",
              },
            },
            "response": {
              "docs": "User found and image or fallback returned.",
              "type": "file",
            },
          },
          "getUserResources": {
            "auth": true,
            "display-name": "Get the user resources.",
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "_links": {
                      "key": {
                        "href": "href",
                        "metadata": "metadata",
                        "method": "method",
                      },
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api",
            "response": {
              "docs": "User resources returned.",
              "type": "root.ResourcesDto",
            },
          },
          "getUsers": {
            "auth": true,
            "display-name": "Get users by query.",
            "docs": "Search the user by query that contains the email address or the part of the email address.",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "_links": {
                        "key": {
                          "href": "href",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/api/users",
            "request": {
              "name": "UsersGetUsersRequest",
              "query-parameters": {
                "query": {
                  "docs": "The query to search the user by email address. Case invariant.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "list<root.UserDto>",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "docs": "User request not valid.",
        "status-code": 400,
        "type": "ErrorDto",
      },
      "ConflictError": {
        "docs": "Team name is already in use.",
        "status-code": 409,
        "type": "ErrorDto",
      },
      "ContentTooLargeError": {
        "docs": "Asset exceeds the maximum upload size.",
        "status-code": 413,
        "type": "ErrorDto",
      },
      "ForbiddenError": {
        "docs": "User is the current user.",
        "status-code": 403,
        "type": "ErrorDto",
      },
      "InternalServerError": {
        "docs": "Operation failed.",
        "status-code": 500,
        "type": "ErrorDto",
      },
      "NotFoundError": {
        "docs": "User not found.",
        "status-code": 404,
        "type": "unknown",
      },
      "NotImplementedError": {
        "docs": "Not configured.",
        "status-code": 501,
        "type": "ErrorDto",
      },
    },
    "types": {
      "ActionTypeEnum": {
        "docs": "",
        "enum": [
          "Broadcast",
          "User",
          "Group",
        ],
      },
      "AddFieldDto": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
            },
          },
          "partitioning": {
            "docs": "Determines the optional partitioning of the field.",
            "type": "optional<string>",
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "AlgoliaRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The API key to grant access to Squidex.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "appId": {
            "docs": "The application ID.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "delete": {
            "docs": "The condition when to delete the entry.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "AllContentsByPostDto": {
        "docs": undefined,
        "properties": {
          "ids": {
            "docs": "The list of ids to query.",
            "type": "optional<list<string>>",
          },
          "oData": {
            "docs": "The optional odata query.",
            "type": "optional<string>",
          },
          "q": "optional<unknown>",
          "references": {
            "docs": "The ID of the reference content item.",
            "type": "optional<string>",
          },
          "referencing": {
            "docs": "The ID of the referencing content item.",
            "type": "optional<string>",
          },
          "scheduledFrom": {
            "docs": "The start of the schedule.",
            "type": "optional<datetime>",
          },
          "scheduledTo": {
            "docs": "The end of the schedule.",
            "type": "optional<datetime>",
          },
        },
      },
      "AppDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "canAccessApi": {
            "availability": "deprecated",
            "docs": "Indicates if the user can access the api.",
            "type": "boolean",
          },
          "canAccessContent": {
            "docs": "Indicates if the user can access at least one content.",
            "type": "boolean",
          },
          "created": {
            "docs": "The timestamp when the app has been created.",
            "type": "datetime",
          },
          "description": {
            "docs": "The optional description of the app.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of the app.",
            "type": "string",
          },
          "label": {
            "docs": "The optional label of the app.",
            "type": "optional<string>",
          },
          "lastModified": {
            "docs": "The timestamp when the app has been modified last.",
            "type": "datetime",
          },
          "name": {
            "docs": "The name of the app.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "permissions": {
            "docs": "The permission level of the user.",
            "type": "list<string>",
          },
          "roleName": {
            "docs": "The role name of the user.",
            "type": "optional<string>",
          },
          "roleProperties": {
            "docs": "The properties from the role.",
            "type": "map<string, unknown>",
          },
          "teamId": {
            "docs": "The ID of the team.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The version of the app.",
            "type": "long",
          },
        },
      },
      "AppLanguageDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "englishName": {
            "docs": "The english name of the language.",
            "type": "string",
          },
          "fallback": {
            "docs": "The fallback languages.",
            "type": "list<string>",
          },
          "isMaster": {
            "docs": "Indicates if the language is the master language.",
            "type": "boolean",
          },
          "isOptional": {
            "docs": "Indicates if the language is optional.",
            "type": "boolean",
          },
          "iso2Code": {
            "docs": "The iso code of the language.",
            "type": "string",
          },
        },
      },
      "AppLanguagesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The languages.",
            "type": "list<AppLanguageDto>",
          },
        },
      },
      "AppSettingsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "editors": {
            "docs": "The configured UI editors.",
            "type": "list<EditorDto>",
          },
          "hideDateTimeModeButton": {
            "docs": "Hide the datetime mode button.",
            "type": "boolean",
          },
          "hideScheduler": {
            "docs": "Hide the scheduler for content items.",
            "type": "boolean",
          },
          "patterns": {
            "docs": "The configured app patterns.",
            "type": "list<PatternDto>",
          },
          "version": {
            "docs": "The version of the app.",
            "type": "long",
          },
        },
      },
      "ArrayFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "uniqueFields": {
            "docs": "The fields that must be unique.",
            "type": "optional<list<string>>",
          },
        },
      },
      "AssetChangedRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "condition": {
            "docs": "Javascript condition when to trigger.",
            "type": "optional<string>",
          },
        },
      },
      "AssetDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "_meta": {
            "docs": "The metadata.",
            "type": "optional<AssetMeta>",
          },
          "created": {
            "docs": "The date and time when the asset has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the schema.",
            "type": "string",
          },
          "editToken": {
            "docs": "The UI token.",
            "type": "optional<string>",
          },
          "fileHash": {
            "docs": "The file hash.",
            "type": "optional<string>",
          },
          "fileName": {
            "docs": "The file name.",
            "type": "string",
          },
          "fileSize": {
            "docs": "The size of the file in bytes.",
            "type": "long",
          },
          "fileType": {
            "docs": "The file type.",
            "type": "string",
          },
          "fileVersion": {
            "docs": "The version of the file.",
            "type": "long",
          },
          "id": {
            "docs": "The ID of the asset.",
            "type": "string",
          },
          "isImage": {
            "availability": "deprecated",
            "docs": "Determines of the created file is an image.",
            "type": "boolean",
          },
          "isProtected": {
            "docs": "True, when the asset is not public.",
            "type": "boolean",
          },
          "lastModified": {
            "docs": "The date and time when the asset has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the asset.",
            "type": "string",
          },
          "metadata": {
            "docs": "The asset metadata.",
            "type": "map<string, unknown>",
          },
          "metadataText": {
            "docs": "The formatted text representation of the metadata.",
            "type": "string",
          },
          "mimeType": {
            "docs": "The mime type.",
            "type": "string",
          },
          "parentId": {
            "docs": "The ID of the parent folder. Empty for files without parent.",
            "type": "string",
          },
          "pixelHeight": {
            "availability": "deprecated",
            "docs": "The height of the image in pixels if the asset is an image.",
            "type": "optional<integer>",
          },
          "pixelWidth": {
            "availability": "deprecated",
            "docs": "The width of the image in pixels if the asset is an image.",
            "type": "optional<integer>",
          },
          "slug": {
            "docs": "The slug.",
            "type": "string",
          },
          "tags": {
            "docs": "The asset tags.",
            "type": "optional<list<string>>",
          },
          "type": {
            "docs": "The type of the asset.",
            "type": "AssetType",
          },
          "version": {
            "docs": "The version of the asset.",
            "type": "long",
          },
        },
      },
      "AssetFolderDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "folderName": {
            "docs": "The folder name.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the asset.",
            "type": "string",
          },
          "parentId": {
            "docs": "The ID of the parent folder. Empty for files without parent.",
            "type": "string",
          },
          "version": {
            "docs": "The version of the asset folder.",
            "type": "long",
          },
        },
      },
      "AssetFolderScope": {
        "docs": "",
        "enum": [
          "PathAndItems",
          "Path",
          "Items",
        ],
      },
      "AssetFoldersDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The assets folders.",
            "type": "list<AssetFolderDto>",
          },
          "path": {
            "docs": "The path to the current folder.",
            "type": "list<AssetFolderDto>",
          },
          "total": {
            "docs": "The total number of assets.",
            "type": "long",
          },
        },
      },
      "AssetMeta": {
        "docs": undefined,
        "properties": {
          "isDuplicate": {
            "docs": "Indicates whether the asset is a duplicate.",
            "type": "string",
          },
        },
      },
      "AssetPreviewMode": {
        "docs": "",
        "enum": [
          "ImageAndFileName",
          "Image",
          "FileName",
        ],
      },
      "AssetScriptsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "annotate": {
            "docs": "The script that is executed when annotating a content.",
            "type": "optional<string>",
          },
          "create": {
            "docs": "The script that is executed when creating an asset.",
            "type": "optional<string>",
          },
          "delete": {
            "docs": "The script that is executed when deleting a content.",
            "type": "optional<string>",
          },
          "move": {
            "docs": "The script that is executed when moving a content.",
            "type": "optional<string>",
          },
          "query": {
            "docs": "The script that is executed for each asset when querying assets.",
            "type": "optional<string>",
          },
          "queryPre": {
            "docs": "The script that is executed for all assets when querying assets.",
            "type": "optional<string>",
          },
          "update": {
            "docs": "The script that is executed when updating a content.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The version of the app.",
            "type": "long",
          },
        },
      },
      "AssetType": {
        "docs": "",
        "enum": [
          "Unknown",
          "Image",
          "Audio",
          "Video",
        ],
      },
      "AssetsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The assets.",
            "type": "list<AssetDto>",
          },
          "total": {
            "docs": "The total number of assets.",
            "type": "long",
          },
        },
      },
      "AssetsFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowDuplicates": {
            "docs": "True, if duplicate values are allowed.",
            "type": "boolean",
          },
          "allowedExtensions": {
            "docs": "The allowed file extensions.",
            "type": "optional<list<string>>",
          },
          "aspectHeight": {
            "docs": "The image aspect height in pixels.",
            "type": "optional<integer>",
          },
          "aspectWidth": {
            "docs": "The image aspect width in pixels.",
            "type": "optional<integer>",
          },
          "defaultValue": {
            "docs": "The default value as a list of asset ids.",
            "type": "optional<list<string>>",
          },
          "defaultValues": {
            "docs": "The language specific default value as a list of asset ids.",
            "type": "optional<LocalizedValueOfReadonlyListOfString>",
          },
          "expectedType": {
            "docs": "The expected type.",
            "type": "optional<AssetType>",
          },
          "folderId": {
            "docs": "The initial id to the folder.",
            "type": "optional<string>",
          },
          "maxHeight": {
            "docs": "The maximum image height in pixels.",
            "type": "optional<integer>",
          },
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "maxSize": {
            "docs": "The maximum file size in bytes.",
            "type": "optional<integer>",
          },
          "maxWidth": {
            "docs": "The maximum image width in pixels.",
            "type": "optional<integer>",
          },
          "minHeight": {
            "docs": "The minimum image height in pixels.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minSize": {
            "docs": "The minimum file size in bytes.",
            "type": "optional<integer>",
          },
          "minWidth": {
            "docs": "The minimum image width in pixels.",
            "type": "optional<integer>",
          },
          "mustBeImage": {
            "availability": "deprecated",
            "docs": "True to resolve first image in the content list.",
            "type": "boolean",
          },
          "previewFormat": {
            "docs": "The preview format.",
            "type": "optional<string>",
          },
          "previewMode": {
            "docs": "The preview mode for the asset.",
            "type": "AssetPreviewMode",
          },
          "resolveFirst": {
            "docs": "True to resolve first asset in the content list.",
            "type": "boolean",
          },
          "resolveImage": {
            "availability": "deprecated",
            "docs": "True to resolve first image in the content list.",
            "type": "boolean",
          },
        },
      },
      "AssignContributorDto": {
        "docs": undefined,
        "properties": {
          "contributorId": {
            "docs": "The id or email of the user to add to the app.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "invite": {
            "docs": "Set to true to invite the user if he does not exist.",
            "type": "optional<boolean>",
          },
          "role": {
            "docs": "The role of the contributor.",
            "type": "optional<string>",
          },
        },
      },
      "AzureQueueRuleActionDto": {
        "docs": undefined,
        "properties": {
          "connectionString": {
            "docs": "The connection string to the storage account.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "payload": {
            "docs": "Leave it empty to use the full event as body.",
            "type": "string",
          },
          "queue": {
            "docs": "The name of the queue.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "BackupJobDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "handledAssets": {
            "docs": "The number of handled assets.",
            "type": "integer",
          },
          "handledEvents": {
            "docs": "The number of handled events.",
            "type": "integer",
          },
          "id": {
            "docs": "The ID of the backup job.",
            "type": "string",
          },
          "started": {
            "docs": "The time when the job has been started.",
            "type": "datetime",
          },
          "status": {
            "docs": "The status of the operation.",
            "type": "JobStatus",
          },
          "stopped": {
            "docs": "The time when the job has been stopped.",
            "type": "optional<datetime>",
          },
        },
      },
      "BackupJobsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The backups.",
            "type": "list<BackupJobDto>",
          },
        },
      },
      "BooleanFieldEditor": {
        "docs": "",
        "enum": [
          "Checkbox",
          "Toggle",
        ],
      },
      "BooleanFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<boolean>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfNullableBoolean>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "BooleanFieldEditor",
          },
          "inlineEditable": {
            "docs": "Indicates that the inline editor is enabled for this field.",
            "type": "boolean",
          },
        },
      },
      "BulkResultDto": {
        "docs": undefined,
        "properties": {
          "contentId": {
            "availability": "deprecated",
            "docs": "The ID of the entity that has been handled successfully or not.",
            "type": "optional<string>",
          },
          "error": {
            "docs": "The error when the bulk job failed.",
            "type": "optional<ErrorDto>",
          },
          "id": {
            "docs": "The ID of the entity that has been handled successfully or not.",
            "type": "optional<string>",
          },
          "jobIndex": {
            "docs": "The index of the bulk job where the result belongs to. The order can change.",
            "type": "integer",
          },
        },
      },
      "BulkUpdateAssetType": {
        "docs": "",
        "enum": [
          "Annotate",
          "Move",
          "Delete",
        ],
      },
      "BulkUpdateAssetsJobDto": {
        "docs": undefined,
        "properties": {
          "expectedVersion": {
            "docs": "The expected version.",
            "type": "optional<long>",
          },
          "fileName": {
            "docs": "The new name of the asset.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "An optional ID of the asset to update.",
            "type": "optional<string>",
          },
          "isProtected": {
            "docs": "True, when the asset is not public.",
            "type": "optional<boolean>",
          },
          "metadata": {
            "docs": "The asset metadata.",
            "type": "optional<map<string, unknown>>",
          },
          "parentId": {
            "docs": "The parent folder id.",
            "type": "optional<string>",
          },
          "permanent": {
            "docs": "True to delete the asset permanently.",
            "type": "optional<boolean>",
          },
          "slug": {
            "docs": "The new slug of the asset.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "The new asset tags.",
            "type": "optional<list<string>>",
          },
          "type": {
            "docs": "The update type.",
            "type": "optional<BulkUpdateAssetType>",
          },
        },
      },
      "BulkUpdateContentType": {
        "docs": "",
        "enum": [
          "Upsert",
          "ChangeStatus",
          "Create",
          "Delete",
          "Patch",
          "Update",
          "Validate",
        ],
      },
      "BulkUpdateContentsJobDto": {
        "docs": undefined,
        "properties": {
          "data": {
            "docs": "The data of the content when type is set to 'Upsert', 'Create', 'Update' or 'Patch.",
            "type": "optional<ContentData>",
          },
          "dueTime": {
            "docs": "The due time.",
            "type": "optional<datetime>",
          },
          "expectedCount": {
            "docs": "The number of expected items. Set it to a higher number to update multiple items when a query is defined.",
            "type": "optional<long>",
          },
          "expectedVersion": {
            "docs": "The expected version.",
            "type": "optional<long>",
          },
          "id": {
            "docs": "An optional ID of the content to update.",
            "type": "optional<string>",
          },
          "patch": {
            "docs": "Makes the update as patch.",
            "type": "optional<boolean>",
          },
          "permanent": {
            "docs": "True to delete the content permanently.",
            "type": "optional<boolean>",
          },
          "query": {
            "docs": "An optional query to identify the content to update.",
            "type": "optional<QueryJsonDto>",
          },
          "schema": {
            "docs": "The optional schema id or name.",
            "type": "optional<string>",
          },
          "status": {
            "docs": "The new status when the type is set to 'ChangeStatus' or 'Upsert'.",
            "type": "optional<string>",
          },
          "type": {
            "docs": "The update type.",
            "type": "optional<BulkUpdateContentType>",
          },
        },
      },
      "CallsUsageDtoDto": {
        "docs": undefined,
        "properties": {
          "allowedBytes": {
            "docs": "The included API traffic.",
            "type": "long",
          },
          "allowedCalls": {
            "docs": "The included API calls.",
            "type": "long",
          },
          "averageElapsedMs": {
            "docs": "The average duration in milliseconds.",
            "type": "double",
          },
          "blockingApiCalls": {
            "docs": "The amount of calls that will block the app.",
            "type": "long",
          },
          "details": {
            "docs": "The statistics by date and group.",
            "type": "map<string, list<CallsUsagePerDateDto>>",
          },
          "monthBytes": {
            "docs": "The total number of bytes transferred this month.",
            "type": "long",
          },
          "monthCalls": {
            "docs": "The total number of API calls this month.",
            "type": "long",
          },
          "totalBytes": {
            "docs": "The total number of bytes transferred.",
            "type": "long",
          },
          "totalCalls": {
            "docs": "The total number of API calls.",
            "type": "long",
          },
        },
      },
      "CallsUsagePerDateDto": {
        "docs": undefined,
        "properties": {
          "averageElapsedMs": {
            "docs": "The average duration in milliseconds.",
            "type": "double",
          },
          "date": {
            "docs": "The date when the usage was tracked.",
            "type": "string",
            "validation": {
              "format": "date",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "totalBytes": {
            "docs": "The total number of bytes transferred.",
            "type": "long",
          },
          "totalCalls": {
            "docs": "The total number of API calls.",
            "type": "long",
          },
        },
      },
      "ChangePlanDto": {
        "docs": undefined,
        "properties": {
          "planId": {
            "docs": "The new plan id.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "ClientDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "allowAnonymous": {
            "docs": "True to allow anonymous access without an access token for this client.",
            "type": "boolean",
          },
          "apiCallsLimit": {
            "docs": "The number of allowed api calls per month for this client.",
            "type": "long",
          },
          "apiTrafficLimit": {
            "docs": "The number of allowed api traffic bytes per month for this client.",
            "type": "long",
          },
          "id": {
            "docs": "The client id.",
            "type": "string",
          },
          "name": {
            "docs": "The client name.",
            "type": "string",
          },
          "role": {
            "docs": "The role of the client.",
            "type": "optional<string>",
          },
          "secret": {
            "docs": "The client secret.",
            "type": "string",
          },
        },
      },
      "ClientsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The clients.",
            "type": "list<ClientDto>",
          },
        },
      },
      "CommentDto": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the comment.",
            "type": "string",
          },
          "text": {
            "docs": "The text of the comment.",
            "type": "string",
          },
          "time": {
            "docs": "The time when the comment was created or updated last.",
            "type": "datetime",
          },
          "url": {
            "docs": "The url where the comment is created.",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "user": {
            "docs": "The user who created or updated the comment.",
            "type": "string",
          },
        },
      },
      "CommentRuleActionDto": {
        "docs": undefined,
        "properties": {
          "client": {
            "docs": "An optional client name.",
            "type": "string",
          },
          "text": {
            "docs": "The comment text.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "CommentRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "condition": {
            "docs": "Javascript condition when to trigger.",
            "type": "optional<string>",
          },
        },
      },
      "CommentsDto": {
        "docs": undefined,
        "properties": {
          "createdComments": {
            "docs": "The created comments including the updates.",
            "type": "optional<list<CommentDto>>",
          },
          "deletedComments": {
            "docs": "The deleted comments since the last version.",
            "type": "optional<list<string>>",
          },
          "updatedComments": {
            "docs": "The updates comments since the last version.",
            "type": "optional<list<CommentDto>>",
          },
          "version": {
            "docs": "The current version.",
            "type": "long",
          },
        },
      },
      "ComponentFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "schemaIds": {
            "docs": "The ID of the embedded schemas.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ComponentsFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "schemaIds": {
            "docs": "The ID of the embedded schemas.",
            "type": "optional<list<string>>",
          },
          "uniqueFields": {
            "docs": "The fields that must be unique.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ConfigurePreviewUrlsDto": "map<string, string>",
      "ContentChangedRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "handleAll": {
            "docs": "Determines whether the trigger should handle all content changes events.",
            "type": "boolean",
          },
          "referencedSchemas": {
            "docs": "The schema references.",
            "type": "optional<list<SchemaCondition>>",
          },
          "schemas": {
            "docs": "The schema settings.",
            "type": "optional<list<SchemaCondition>>",
          },
        },
      },
      "ContentData": "map<string, ContentFieldData>",
      "ContentDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "created": {
            "docs": "The date and time when the content item has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the content item.",
            "type": "string",
          },
          "data": "unknown",
          "editToken": {
            "docs": "The UI token.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The if of the content item.",
            "type": "string",
          },
          "isDeleted": {
            "docs": "Indicates whether the content is deleted.",
            "type": "boolean",
          },
          "lastModified": {
            "docs": "The date and time when the content item has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the content item.",
            "type": "string",
          },
          "newStatus": {
            "docs": "The new status of the content.",
            "type": "optional<string>",
          },
          "newStatusColor": {
            "docs": "The color of the new status.",
            "type": "optional<string>",
          },
          "referenceData": {
            "docs": "The reference data for the frontend UI.",
            "type": "optional<ContentData>",
          },
          "referenceFields": {
            "docs": "The reference fields.",
            "type": "optional<list<FieldDto>>",
          },
          "scheduleJob": {
            "docs": "The scheduled status.",
            "type": "optional<ScheduleJobDto>",
          },
          "schemaDisplayName": {
            "docs": "The display name of the schema.",
            "type": "optional<string>",
          },
          "schemaId": {
            "docs": "The ID of the schema.",
            "type": "string",
          },
          "schemaName": {
            "docs": "The name of the schema.",
            "type": "optional<string>",
          },
          "status": {
            "docs": "The status of the content.",
            "type": "string",
          },
          "statusColor": {
            "docs": "The color of the status.",
            "type": "string",
          },
          "version": {
            "docs": "The version of the content.",
            "type": "long",
          },
        },
      },
      "ContentFieldData": "map<string, unknown>",
      "ContentsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The content items.",
            "type": "list<ContentDto>",
          },
          "statuses": {
            "docs": "The possible statuses.",
            "type": "list<StatusInfoDto>",
          },
          "total": {
            "docs": "The total number of content items.",
            "type": "long",
          },
        },
      },
      "ContributorDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "contributorEmail": {
            "docs": "The email address.",
            "type": "string",
          },
          "contributorId": {
            "docs": "The ID of the user that contributes to the app.",
            "type": "string",
          },
          "contributorName": {
            "docs": "The display name.",
            "type": "string",
          },
          "role": {
            "docs": "The role of the contributor.",
            "type": "optional<string>",
          },
        },
      },
      "ContributorsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "_meta": {
            "docs": "The metadata to provide information about this request.",
            "type": "optional<ContributorsMetadata>",
          },
          "items": {
            "docs": "The contributors.",
            "type": "list<ContributorDto>",
          },
          "maxContributors": {
            "docs": "The maximum number of allowed contributors.",
            "type": "long",
          },
        },
      },
      "ContributorsMetadata": {
        "docs": undefined,
        "properties": {
          "isInvited": {
            "docs": "Indicates whether the user has been invited.",
            "type": "string",
          },
        },
      },
      "CreateContentRuleActionDto": {
        "docs": undefined,
        "properties": {
          "client": {
            "docs": "An optional client name.",
            "type": "string",
          },
          "data": {
            "docs": "The content data.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "publish": {
            "docs": "Publish the content.",
            "type": "boolean",
          },
          "schema": {
            "docs": "The name of the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "CreateRuleDto": {
        "docs": undefined,
        "properties": {
          "action": {
            "docs": "The action properties.",
            "type": "RuleActionDto",
          },
          "trigger": {
            "docs": "The trigger properties.",
            "type": "RuleTriggerDto",
          },
        },
      },
      "CurrentStorageDto": {
        "docs": undefined,
        "properties": {
          "maxAllowed": {
            "docs": "The maximum allowed asset size.",
            "type": "long",
          },
          "size": {
            "docs": "The size in bytes.",
            "type": "long",
          },
        },
      },
      "DateTimeCalculatedDefaultValue": {
        "docs": "",
        "enum": [
          "Now",
          "Today",
        ],
      },
      "DateTimeFieldEditor": {
        "docs": "",
        "enum": [
          "Date",
          "DateTime",
        ],
      },
      "DateTimeFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "calculatedDefaultValue": {
            "docs": "The calculated default value for the field value.",
            "type": "optional<DateTimeCalculatedDefaultValue>",
          },
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<datetime>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfNullableInstant>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "DateTimeFieldEditor",
          },
          "format": {
            "docs": "The format pattern when displayed in the UI.",
            "type": "optional<string>",
          },
          "maxValue": {
            "docs": "The maximum allowed value for the field value.",
            "type": "optional<datetime>",
          },
          "minValue": {
            "docs": "The minimum allowed value for the field value.",
            "type": "optional<datetime>",
          },
        },
      },
      "DiscourseRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The api key to authenticate to your discourse server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "apiUsername": {
            "docs": "The api username to authenticate to your discourse server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "category": {
            "docs": "The optional category id.",
            "type": "optional<integer>",
          },
          "text": {
            "docs": "The text as markdown.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "title": {
            "docs": "The optional title when creating new topics.",
            "type": "string",
          },
          "topic": {
            "docs": "The optional topic id.",
            "type": "optional<integer>",
          },
          "url": {
            "docs": "The url to the discourse server.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "EditorDto": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "The name of the editor.",
            "type": "string",
          },
          "url": {
            "docs": "The url to the editor.",
            "type": "string",
          },
        },
      },
      "ElasticSearchRuleActionDto": {
        "docs": undefined,
        "properties": {
          "delete": {
            "docs": "The condition when to delete the document.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "host": {
            "docs": "The url to the instance or cluster.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "password": {
            "docs": "The optional password.",
            "type": "string",
          },
          "username": {
            "docs": "The optional username.",
            "type": "string",
          },
        },
      },
      "EmailRuleActionDto": {
        "docs": undefined,
        "properties": {
          "messageBody": {
            "docs": "The message body.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "messageFrom": {
            "docs": "The email sending address.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "messageSubject": {
            "docs": "The subject line for this email message.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "messageTo": {
            "docs": "The email message will be sent to.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serverHost": {
            "docs": "The IP address or host to the SMTP server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serverPassword": {
            "docs": "The password for the SMTP server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serverPort": {
            "docs": "The port to the SMTP server.",
            "type": "integer",
          },
          "serverUsername": {
            "docs": "The username for the SMTP server.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "ErrorDto": {
        "docs": undefined,
        "properties": {
          "details": {
            "docs": "Detailed error messages.",
            "type": "optional<list<string>>",
          },
          "errorCode": {
            "docs": "The error code.",
            "type": "optional<string>",
          },
          "message": {
            "docs": "Error message.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "statusCode": {
            "docs": "Status code of the http response.",
            "type": "integer",
          },
          "traceId": {
            "docs": "The optional trace id.",
            "type": "optional<string>",
          },
          "type": {
            "docs": "Link to the error details.",
            "type": "optional<string>",
          },
        },
      },
      "EventConsumerDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "count": {
            "docs": "The number of handled events.",
            "type": "integer",
          },
          "error": {
            "docs": "The error details if the event consumer has been stopped after a failure.",
            "type": "optional<string>",
          },
          "isResetting": {
            "docs": "Indicates if the event consumer is resetting at the moment.",
            "type": "boolean",
          },
          "isStopped": {
            "docs": "Indicates if the event consumer has been started.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the event consumer.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "position": {
            "docs": "The position within the vent stream.",
            "type": "optional<string>",
          },
        },
      },
      "EventConsumersDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The event consumers.",
            "type": "list<EventConsumerDto>",
          },
        },
      },
      "ExposedValues": "map<string, string>",
      "FastlyRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The API key to grant access to Squidex.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "serviceId": {
            "docs": "The ID of the fastly service.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "FeatureDto": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "The name of the feature.",
            "type": "string",
          },
          "text": {
            "docs": "The description text.",
            "type": "string",
          },
        },
      },
      "FeaturesDto": {
        "docs": undefined,
        "properties": {
          "features": {
            "docs": "The latest features.",
            "type": "list<FeatureDto>",
          },
          "version": {
            "docs": "The recent version.",
            "type": "integer",
          },
        },
      },
      "FieldDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "fieldId": {
            "docs": "The ID of the field.",
            "type": "long",
          },
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "nested": {
            "docs": "The nested fields.",
            "type": "optional<list<NestedFieldDto>>",
          },
          "partitioning": {
            "docs": "Defines the partitioning of the field.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "FieldPropertiesDto": {
        "base-properties": {
          "editorUrl": {
            "docs": "Optional url to the editor.",
            "type": "optional<string>",
          },
          "hints": {
            "docs": "Hints to describe the field.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 1000,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "isHalfWidth": {
            "docs": "Indicates if the field should be rendered with half width only.",
            "type": "boolean",
          },
          "isRequired": {
            "docs": "Indicates if the field is required.",
            "type": "boolean",
          },
          "isRequiredOnPublish": {
            "docs": "Indicates if the field is required when publishing.",
            "type": "boolean",
          },
          "label": {
            "docs": "Optional label for the editor.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 100,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "placeholder": {
            "docs": "Placeholder to show when no value has been entered.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 100,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "tags": {
            "docs": "Tags for automation processes.",
            "type": "optional<list<string>>",
          },
        },
        "discriminant": "fieldType",
        "docs": undefined,
        "union": {
          "Array": "ArrayFieldPropertiesDto",
          "Assets": "AssetsFieldPropertiesDto",
          "Boolean": "BooleanFieldPropertiesDto",
          "Component": "ComponentFieldPropertiesDto",
          "Components": "ComponentsFieldPropertiesDto",
          "DateTime": "DateTimeFieldPropertiesDto",
          "Geolocation": "GeolocationFieldPropertiesDto",
          "Json": "JsonFieldPropertiesDto",
          "Number": "NumberFieldPropertiesDto",
          "References": "ReferencesFieldPropertiesDto",
          "String": "StringFieldPropertiesDto",
          "Tags": "TagsFieldPropertiesDto",
          "UI": "UiFieldPropertiesDto",
        },
      },
      "FieldRuleAction": {
        "docs": "",
        "enum": [
          "Disable",
          "Hide",
          "Require",
        ],
      },
      "FieldRuleDto": {
        "docs": undefined,
        "properties": {
          "action": {
            "docs": "The action to perform when the condition is met.",
            "type": "FieldRuleAction",
          },
          "condition": {
            "docs": "The condition.",
            "type": "optional<string>",
          },
          "field": {
            "docs": "The field to update.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "GeolocationFieldEditor": {
        "docs": "",
        "type": "literal<"Map">",
      },
      "GeolocationFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "GeolocationFieldEditor",
          },
        },
      },
      "HistoryEventDto": {
        "docs": undefined,
        "properties": {
          "actor": {
            "docs": "The user who called the action.",
            "type": "string",
          },
          "created": {
            "docs": "The time when the event happened.",
            "type": "datetime",
          },
          "eventId": {
            "docs": "Gets a unique id for the event.",
            "type": "string",
          },
          "eventType": {
            "docs": "The type of the original event.",
            "type": "string",
          },
          "message": {
            "docs": "The message for the event.",
            "type": "string",
          },
          "version": {
            "docs": "The version identifier.",
            "type": "long",
          },
        },
      },
      "ImageFormat": {
        "docs": "",
        "enum": [
          "AVIF",
          "BMP",
          "GIF",
          "JPEG",
          "PNG",
          "TGA",
          "TIFF",
          "WEBP",
        ],
      },
      "JobStatus": {
        "docs": "",
        "enum": [
          "Created",
          "Started",
          "Completed",
          "Failed",
        ],
      },
      "JsonFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "graphQLSchema": {
            "docs": "The GraphQL schema.",
            "type": "optional<string>",
          },
        },
      },
      "LanguageDto": {
        "docs": undefined,
        "properties": {
          "englishName": {
            "docs": "The english name of the language.",
            "type": "string",
          },
          "iso2Code": {
            "docs": "The iso code of the language.",
            "type": "string",
          },
          "nativeName": {
            "docs": "The native name of the language.",
            "type": "string",
          },
        },
      },
      "LocalizedValueOfNullableBoolean": "map<string, optional<boolean>>",
      "LocalizedValueOfNullableDouble": "map<string, optional<double>>",
      "LocalizedValueOfNullableInstant": "map<string, optional<datetime>>",
      "LocalizedValueOfReadonlyListOfString": "map<string, list<string>>",
      "LocalizedValueOfString": "map<string, string>",
      "LogDownloadDto": {
        "docs": undefined,
        "properties": {
          "downloadUrl": {
            "docs": "The url to download the log.",
            "type": "optional<string>",
          },
        },
      },
      "ManualRuleTriggerDto": {
        "docs": undefined,
        "properties": {},
      },
      "MediumRuleActionDto": {
        "docs": undefined,
        "properties": {
          "accessToken": {
            "docs": "The self issued access token.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "canonicalUrl": {
            "docs": "The original home of this content, if it was originally published elsewhere.",
            "type": "string",
          },
          "content": {
            "docs": "The content, either html or markdown.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "isHtml": {
            "docs": "Indicates whether the content is markdown or html.",
            "type": "boolean",
          },
          "publicationId": {
            "docs": "Optional publication id.",
            "type": "string",
          },
          "tags": {
            "docs": "The optional comma separated list of tags.",
            "type": "string",
          },
          "title": {
            "docs": "The title, used for the url.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "NestedFieldDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "fieldId": {
            "docs": "The ID of the field.",
            "type": "long",
          },
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "NotificationRuleActionDto": {
        "docs": undefined,
        "properties": {
          "client": {
            "docs": "An optional client name.",
            "type": "string",
          },
          "text": {
            "docs": "The text to send.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "The optional url to attach to the notification.",
            "type": "string",
          },
          "user": {
            "docs": "The user id or email.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "NumberFieldEditor": {
        "docs": "",
        "enum": [
          "Input",
          "Radio",
          "Dropdown",
          "Stars",
        ],
      },
      "NumberFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowedValues": {
            "docs": "The allowed values for the field value.",
            "type": "optional<list<double>>",
          },
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<double>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfNullableDouble>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "NumberFieldEditor",
          },
          "inlineEditable": {
            "docs": "Indicates that the inline editor is enabled for this field.",
            "type": "boolean",
          },
          "isUnique": {
            "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
            "type": "boolean",
          },
          "maxValue": {
            "docs": "The maximum allowed value for the field value.",
            "type": "optional<double>",
          },
          "minValue": {
            "docs": "The minimum allowed value for the field value.",
            "type": "optional<double>",
          },
        },
      },
      "OpenSearchRuleActionDto": {
        "docs": undefined,
        "properties": {
          "delete": {
            "docs": "The condition when to delete the document.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "host": {
            "docs": "The url to the instance or cluster.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "password": {
            "docs": "The optional password.",
            "type": "string",
          },
          "username": {
            "docs": "The optional username.",
            "type": "string",
          },
        },
      },
      "PatternDto": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "The regex message.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the suggestion.",
            "type": "string",
          },
          "regex": {
            "docs": "The regex pattern.",
            "type": "string",
          },
        },
      },
      "PlanChangedDto": {
        "docs": undefined,
        "properties": {
          "redirectUri": {
            "docs": "Optional redirect uri.",
            "type": "optional<string>",
          },
        },
      },
      "PlanDto": {
        "docs": undefined,
        "properties": {
          "confirmText": {
            "docs": "An optional confirm text for the monthly subscription.",
            "type": "optional<string>",
          },
          "costs": {
            "docs": "The monthly costs of the plan.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the plan.",
            "type": "string",
          },
          "maxApiBytes": {
            "docs": "The maximum number of API traffic.",
            "type": "long",
          },
          "maxApiCalls": {
            "docs": "The maximum number of API calls.",
            "type": "long",
          },
          "maxAssetSize": {
            "docs": "The maximum allowed asset size.",
            "type": "long",
          },
          "maxContributors": {
            "docs": "The maximum number of contributors.",
            "type": "integer",
          },
          "name": {
            "docs": "The name of the plan.",
            "type": "string",
          },
          "yearlyConfirmText": {
            "docs": "An optional confirm text for the yearly subscription.",
            "type": "optional<string>",
          },
          "yearlyCosts": {
            "docs": "The yearly costs of the plan.",
            "type": "optional<string>",
          },
          "yearlyId": {
            "docs": "The yearly ID of the plan.",
            "type": "optional<string>",
          },
        },
      },
      "PlansDto": {
        "docs": undefined,
        "properties": {
          "currentPlanId": {
            "docs": "The current plan id.",
            "type": "optional<string>",
          },
          "locked": {
            "docs": "The reason why the plan cannot be changed.",
            "type": "PlansLockedReason",
          },
          "planOwner": {
            "docs": "The plan owner.",
            "type": "optional<string>",
          },
          "plans": {
            "docs": "The available plans.",
            "type": "list<PlanDto>",
          },
          "portalLink": {
            "docs": "The link to the management portal.",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "referral": {
            "docs": "The referral management.",
            "type": "optional<ReferralInfo>",
          },
        },
      },
      "PlansLockedReason": {
        "docs": "",
        "enum": [
          "None",
          "NotOwner",
          "NoPermission",
          "ManagedByTeam",
        ],
      },
      "PrerenderRuleActionDto": {
        "docs": undefined,
        "properties": {
          "token": {
            "docs": "The prerender token from your account.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "The url to recache.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "PropertyPath": "list<string>",
      "QueryDto": {
        "docs": undefined,
        "properties": {
          "ids": {
            "docs": "The optional list of ids to query.",
            "type": "optional<list<string>>",
          },
          "oData": {
            "docs": "The optional odata query.",
            "type": "optional<string>",
          },
          "parentId": {
            "docs": "The parent id (for assets).",
            "type": "optional<string>",
          },
          "q": "optional<unknown>",
        },
      },
      "QueryJsonDto": {
        "docs": undefined,
        "properties": {
          "filter": "optional<unknown>",
          "fullText": "optional<string>",
          "random": "long",
          "skip": "long",
          "sort": "optional<list<SortNode>>",
          "take": "long",
          "top": "long",
        },
      },
      "ReferencesFieldEditor": {
        "docs": "",
        "enum": [
          "List",
          "Dropdown",
          "Tags",
          "Checkboxes",
          "Input",
        ],
      },
      "ReferencesFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowDuplicates": {
            "docs": "True, if duplicate values are allowed.",
            "type": "boolean",
          },
          "defaultValue": {
            "docs": "The default value as a list of content ids.",
            "type": "optional<list<string>>",
          },
          "defaultValues": {
            "docs": "The language specific default value as a list of content ids.",
            "type": "optional<LocalizedValueOfReadonlyListOfString>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "ReferencesFieldEditor",
          },
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "mustBePublished": {
            "docs": "True when all references must be published.",
            "type": "boolean",
          },
          "resolveReference": {
            "docs": "True to resolve references in the content list.",
            "type": "boolean",
          },
          "schemaIds": {
            "docs": "The ID of the referenced schemas.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ReferralInfo": {
        "docs": undefined,
        "properties": {
          "code": "string",
          "condition": "string",
          "earned": "string",
        },
      },
      "ReorderFieldsDto": {
        "docs": undefined,
        "properties": {
          "fieldIds": {
            "docs": "The field ids in the target order.",
            "type": "list<long>",
          },
        },
      },
      "ResizeMode": {
        "docs": "",
        "enum": [
          "Crop",
          "CropUpsize",
          "Pad",
          "BoxPad",
          "Max",
          "Min",
          "Stretch",
        ],
      },
      "Resource": {
        "docs": undefined,
        "properties": {
          "_links": {
            "docs": "The links.",
            "type": "map<string, ResourceLink>",
          },
        },
      },
      "ResourceLink": {
        "docs": undefined,
        "properties": {
          "href": {
            "docs": "The link url.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "metadata": {
            "docs": "Additional data about the link.",
            "type": "optional<string>",
          },
          "method": {
            "docs": "The link method.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "ResourcesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {},
      },
      "RestoreJobDto": {
        "docs": undefined,
        "properties": {
          "log": {
            "docs": "The status log.",
            "type": "list<string>",
          },
          "started": {
            "docs": "The time when the job has been started.",
            "type": "datetime",
          },
          "status": {
            "docs": "The status of the operation.",
            "type": "JobStatus",
          },
          "stopped": {
            "docs": "The time when the job has been stopped.",
            "type": "optional<datetime>",
          },
          "url": {
            "docs": "The uri to load from.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "RoleDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "isDefaultRole": {
            "docs": "Indicates if the role is an builtin default role.",
            "type": "boolean",
          },
          "name": {
            "docs": "The role name.",
            "type": "string",
          },
          "numClients": {
            "docs": "The number of clients with this role.",
            "type": "integer",
          },
          "numContributors": {
            "docs": "The number of contributors with this role.",
            "type": "integer",
          },
          "permissions": {
            "docs": "Associated list of permissions.",
            "type": "list<string>",
          },
          "properties": {
            "docs": "Associated list of UI properties.",
            "type": "map<string, unknown>",
          },
        },
      },
      "RolesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The roles.",
            "type": "list<RoleDto>",
          },
        },
      },
      "RuleActionDto": {
        "base-properties": {},
        "discriminant": "actionType",
        "docs": undefined,
        "union": {
          "Algolia": "AlgoliaRuleActionDto",
          "AzureQueue": "AzureQueueRuleActionDto",
          "Comment": "CommentRuleActionDto",
          "CreateContent": "CreateContentRuleActionDto",
          "Discourse": "DiscourseRuleActionDto",
          "ElasticSearch": "ElasticSearchRuleActionDto",
          "Email": "EmailRuleActionDto",
          "Fastly": "FastlyRuleActionDto",
          "Medium": "MediumRuleActionDto",
          "Notification": "NotificationRuleActionDto",
          "OpenSearch": "OpenSearchRuleActionDto",
          "Prerender": "PrerenderRuleActionDto",
          "Script": "ScriptRuleActionDto",
          "SignalR": "SignalRRuleActionDto",
          "Slack": "SlackRuleActionDto",
          "Tweet": "TweetRuleActionDto",
          "Typesense": "TypesenseRuleActionDto",
          "Webhook": "WebhookRuleActionDto",
        },
      },
      "RuleDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "action": {
            "docs": "The action properties.",
            "type": "RuleActionDto",
          },
          "created": {
            "docs": "The date and time when the rule has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the rule.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the rule.",
            "type": "string",
          },
          "isEnabled": {
            "docs": "Determines if the rule is enabled.",
            "type": "boolean",
          },
          "lastExecuted": {
            "availability": "deprecated",
            "docs": "The date and time when the rule was executed the last time.",
            "type": "optional<datetime>",
          },
          "lastModified": {
            "docs": "The date and time when the rule has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the rule.",
            "type": "string",
          },
          "name": {
            "docs": "Optional rule name.",
            "type": "optional<string>",
          },
          "numFailed": {
            "docs": "The number of failed executions.",
            "type": "long",
          },
          "numSucceeded": {
            "docs": "The number of completed executions.",
            "type": "long",
          },
          "trigger": {
            "docs": "The trigger properties.",
            "type": "RuleTriggerDto",
          },
          "version": {
            "docs": "The version of the rule.",
            "type": "long",
          },
        },
      },
      "RuleElementDto": {
        "docs": undefined,
        "properties": {
          "description": {
            "docs": "Describes the action or trigger type.",
            "type": "string",
          },
          "display": {
            "docs": "The label for the action or trigger type.",
            "type": "string",
          },
          "iconColor": {
            "docs": "The color for the icon.",
            "type": "optional<string>",
          },
          "iconImage": {
            "docs": "The image for the icon.",
            "type": "optional<string>",
          },
          "properties": {
            "docs": "The properties.",
            "type": "list<RuleElementPropertyDto>",
          },
          "readMore": {
            "docs": "The optional link to the product that is integrated.",
            "type": "optional<string>",
          },
          "title": {
            "docs": "Optional title.",
            "type": "optional<string>",
          },
        },
      },
      "RuleElementPropertyDto": {
        "docs": undefined,
        "properties": {
          "description": {
            "docs": "The optional description.",
            "type": "optional<string>",
          },
          "display": {
            "docs": "The label to use.",
            "type": "string",
          },
          "editor": {
            "docs": "The html editor.",
            "type": "RuleFieldEditor",
          },
          "isFormattable": {
            "docs": "Indicates if the property is formattable.",
            "type": "boolean",
          },
          "isRequired": {
            "docs": "Indicates if the property is required.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the editor.",
            "type": "string",
          },
          "options": {
            "docs": "The options, if the editor is a dropdown.",
            "type": "optional<list<string>>",
          },
        },
      },
      "RuleEventDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "created": {
            "docs": "The time when the event has been created.",
            "type": "datetime",
          },
          "description": {
            "docs": "The description.",
            "type": "string",
          },
          "eventName": {
            "docs": "The name of the event.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the event.",
            "type": "string",
          },
          "jobResult": {
            "docs": "The result of the job.",
            "type": "RuleJobResult",
          },
          "lastDump": {
            "docs": "The last dump.",
            "type": "optional<string>",
          },
          "nextAttempt": {
            "docs": "The next attempt.",
            "type": "optional<datetime>",
          },
          "numCalls": {
            "docs": "The number of calls.",
            "type": "integer",
          },
          "result": {
            "docs": "The result of the event.",
            "type": "RuleResult",
          },
        },
      },
      "RuleEventsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The rule events.",
            "type": "list<RuleEventDto>",
          },
          "total": {
            "docs": "The total number of rule events.",
            "type": "long",
          },
        },
      },
      "RuleFieldEditor": {
        "docs": "",
        "enum": [
          "Checkbox",
          "Dropdown",
          "Email",
          "Javascript",
          "Number",
          "Password",
          "Text",
          "TextArea",
          "Url",
        ],
      },
      "RuleJobResult": {
        "docs": "",
        "enum": [
          "Pending",
          "Success",
          "Retry",
          "Failed",
          "Cancelled",
        ],
      },
      "RuleResult": {
        "docs": "",
        "enum": [
          "Pending",
          "Success",
          "Failed",
          "Timeout",
        ],
      },
      "RuleTriggerDto": {
        "base-properties": {},
        "discriminant": "triggerType",
        "docs": undefined,
        "union": {
          "AssetChanged": "AssetChangedRuleTriggerDto",
          "Comment": "CommentRuleTriggerDto",
          "ContentChanged": "ContentChangedRuleTriggerDto",
          "Manual": "ManualRuleTriggerDto",
          "SchemaChanged": "SchemaChangedRuleTriggerDto",
          "Usage": "UsageRuleTriggerDto",
        },
      },
      "RulesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The rules.",
            "type": "list<RuleDto>",
          },
          "runningRuleId": {
            "docs": "The ID of the rule that is currently rerunning.",
            "type": "optional<string>",
          },
        },
      },
      "ScheduleJobDto": {
        "docs": undefined,
        "properties": {
          "color": {
            "docs": "The color of the scheduled status.",
            "type": "string",
          },
          "dueTime": {
            "docs": "The target date and time when the content should be scheduled.",
            "type": "datetime",
          },
          "id": {
            "docs": "The ID of the schedule job.",
            "type": "string",
          },
          "scheduledBy": {
            "docs": "The user who schedule the content.",
            "type": "string",
          },
          "status": {
            "docs": "The new status.",
            "type": "string",
          },
        },
      },
      "SchemaChangedRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "condition": {
            "docs": "Javascript condition when to trigger.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaCondition": {
        "docs": undefined,
        "properties": {
          "condition": "optional<string>",
          "schemaId": "string",
        },
      },
      "SchemaDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "category": {
            "docs": "The name of the category.",
            "type": "optional<string>",
          },
          "created": {
            "docs": "The date and time when the schema has been created.",
            "type": "datetime",
          },
          "createdBy": {
            "docs": "The user that has created the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "fieldRules": {
            "docs": "The field rules.",
            "type": "list<FieldRuleDto>",
          },
          "fields": {
            "docs": "The list of fields.",
            "type": "list<FieldDto>",
          },
          "fieldsInLists": {
            "docs": "The name of fields that are used in content lists.",
            "type": "list<string>",
          },
          "fieldsInReferences": {
            "docs": "The name of fields that are used in content references.",
            "type": "list<string>",
          },
          "id": {
            "docs": "The ID of the schema.",
            "type": "string",
          },
          "isPublished": {
            "docs": "Indicates if the schema is published.",
            "type": "boolean",
          },
          "isSingleton": {
            "availability": "deprecated",
            "docs": "Indicates if the schema is a singleton.",
            "type": "boolean",
          },
          "lastModified": {
            "docs": "The date and time when the schema has been modified last.",
            "type": "datetime",
          },
          "lastModifiedBy": {
            "docs": "The user that has updated the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "docs": "The name of the schema. Unique within the app.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-z0-9]+(\\-[a-z0-9]+)*$",
            },
          },
          "previewUrls": {
            "docs": "The preview Urls.",
            "type": "map<string, string>",
          },
          "properties": {
            "docs": "The schema properties.",
            "type": "SchemaPropertiesDto",
          },
          "scripts": {
            "docs": "The scripts.",
            "type": "SchemaScriptsDto",
          },
          "type": {
            "docs": "The type of the schema.",
            "type": "SchemaType",
          },
          "version": {
            "docs": "The version of the schema.",
            "type": "long",
          },
        },
      },
      "SchemaPropertiesDto": {
        "docs": undefined,
        "properties": {
          "contentEditorUrl": {
            "docs": "The url to the editor plugin.",
            "type": "optional<string>",
          },
          "contentSidebarUrl": {
            "docs": "The url to a the sidebar plugin for content items.",
            "type": "optional<string>",
          },
          "contentsSidebarUrl": {
            "docs": "The url to a the sidebar plugin for content lists.",
            "type": "optional<string>",
          },
          "hints": {
            "docs": "Hints to describe the schema.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 1000,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "label": {
            "docs": "Optional label for the editor.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 100,
              "minLength": 0,
              "pattern": undefined,
            },
          },
          "tags": {
            "docs": "Tags for automation processes.",
            "type": "optional<list<string>>",
          },
          "validateOnPublish": {
            "docs": "True to validate the content items on publish.",
            "type": "boolean",
          },
        },
      },
      "SchemaScriptsDto": {
        "docs": undefined,
        "properties": {
          "change": {
            "docs": "The script that is executed when change a content status.",
            "type": "optional<string>",
          },
          "create": {
            "docs": "The script that is executed when creating a content.",
            "type": "optional<string>",
          },
          "delete": {
            "docs": "The script that is executed when deleting a content.",
            "type": "optional<string>",
          },
          "query": {
            "docs": "The script that is executed for each content when querying contents.",
            "type": "optional<string>",
          },
          "queryPre": {
            "docs": "The script that is executed for all contents when querying contents.",
            "type": "optional<string>",
          },
          "update": {
            "docs": "The script that is executed when updating a content.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaType": {
        "docs": "",
        "enum": [
          "Default",
          "Singleton",
          "Component",
        ],
      },
      "SchemasDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The schemas.",
            "type": "list<SchemaDto>",
          },
        },
      },
      "ScriptRuleActionDto": {
        "docs": undefined,
        "properties": {
          "script": {
            "docs": "The script to render.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "SearchResultDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "label": {
            "docs": "An optional label.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the search result.",
            "type": "string",
          },
          "type": {
            "docs": "The type of the search result.",
            "type": "SearchResultType",
          },
        },
      },
      "SearchResultType": {
        "docs": "",
        "enum": [
          "Asset",
          "Content",
          "Dashboard",
          "Setting",
          "Rule",
          "Schema",
        ],
      },
      "SignalRRuleActionDto": {
        "docs": undefined,
        "properties": {
          "action": {
            "docs": "* Broadcast = send to all users.
 * User = send to all target users(s).
 * Group = send to all target group(s).",
            "type": "ActionTypeEnum",
          },
          "connectionString": {
            "docs": "The connection string to the Azure SignalR.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "hubName": {
            "docs": "The name of the hub.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "methodName": {
            "docs": "Set the Name of the hub method received by the customer.",
            "type": "string",
          },
          "payload": {
            "docs": "Leave it empty to use the full event as body.",
            "type": "string",
          },
          "target": {
            "docs": "Define target users or groups by id or name. One item per line. Not needed for Broadcast action.",
            "type": "string",
          },
        },
      },
      "SimulatedRuleEventDto": {
        "docs": undefined,
        "properties": {
          "actionData": {
            "docs": "The name of the action.",
            "type": "optional<string>",
          },
          "actionName": {
            "docs": "The data for the action.",
            "type": "optional<string>",
          },
          "enrichedEvent": "optional<unknown>",
          "error": {
            "docs": "The name of the event.",
            "type": "optional<string>",
          },
          "event": "unknown",
          "eventId": {
            "docs": "The unique event id.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "eventName": {
            "docs": "The name of the event.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "skipReasons": {
            "docs": "The reason why the event has been skipped.",
            "type": "list<SkipReason>",
          },
          "uniqueId": {
            "docs": "The the unique id of the simulated event.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "SimulatedRuleEventsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The simulated rule events.",
            "type": "list<SimulatedRuleEventDto>",
          },
          "total": {
            "docs": "The total number of simulated rule events.",
            "type": "long",
          },
        },
      },
      "SkipReason": {
        "docs": "",
        "enum": [
          "None",
          "ConditionDoesNotMatch",
          "ConditionPrecheckDoesNotMatch",
          "Disabled",
          "Failed",
          "FromRule",
          "NoAction",
          "NoTrigger",
          "TooOld",
          "WrongEvent",
          "WrongEventForTrigger",
        ],
      },
      "SlackRuleActionDto": {
        "docs": undefined,
        "properties": {
          "text": {
            "docs": "The text that is sent as message to slack.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "webhookUrl": {
            "docs": "The slack webhook url.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "SortNode": {
        "docs": undefined,
        "properties": {
          "order": "SortOrder",
          "path": "PropertyPath",
        },
      },
      "SortOrder": {
        "docs": "",
        "enum": [
          "Ascending",
          "Descending",
        ],
      },
      "StatusInfoDto": {
        "docs": undefined,
        "properties": {
          "color": {
            "docs": "The color of the status.",
            "type": "string",
          },
          "status": {
            "docs": "The name of the status.",
            "type": "string",
          },
        },
      },
      "StorageUsagePerDateDto": {
        "docs": undefined,
        "properties": {
          "date": {
            "docs": "The date when the usage was tracked.",
            "type": "string",
            "validation": {
              "format": "date",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "totalCount": {
            "docs": "The number of assets.",
            "type": "long",
          },
          "totalSize": {
            "docs": "The size in bytes.",
            "type": "long",
          },
        },
      },
      "StringContentType": {
        "docs": "",
        "enum": [
          "Unspecified",
          "Html",
          "Markdown",
        ],
      },
      "StringFieldEditor": {
        "docs": "",
        "enum": [
          "Input",
          "Color",
          "Markdown",
          "Dropdown",
          "Html",
          "Radio",
          "RichText",
          "Slug",
          "StockPhoto",
          "TextArea",
        ],
      },
      "StringFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowedValues": {
            "docs": "The allowed values for the field value.",
            "type": "optional<list<string>>",
          },
          "contentType": {
            "docs": "How the string content should be interpreted.",
            "type": "StringContentType",
          },
          "createEnum": {
            "docs": "Indicates whether GraphQL Enum should be created.",
            "type": "boolean",
          },
          "defaultValue": {
            "docs": "The default value for the field value.",
            "type": "optional<string>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfString>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "StringFieldEditor",
          },
          "folderId": {
            "docs": "The initial id to the folder when the control supports file uploads.",
            "type": "optional<string>",
          },
          "inlineEditable": {
            "docs": "Indicates that the inline editor is enabled for this field.",
            "type": "boolean",
          },
          "isEmbeddable": {
            "docs": "Indicates that other content items or references are embedded.",
            "type": "boolean",
          },
          "isUnique": {
            "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
            "type": "boolean",
          },
          "maxCharacters": {
            "docs": "The maximum allowed of normal characters for the field value.",
            "type": "optional<integer>",
          },
          "maxLength": {
            "docs": "The maximum allowed length for the field value.",
            "type": "optional<integer>",
          },
          "maxWords": {
            "docs": "The maximum allowed number of words for the field value.",
            "type": "optional<integer>",
          },
          "minCharacters": {
            "docs": "The minimum allowed of normal characters for the field value.",
            "type": "optional<integer>",
          },
          "minLength": {
            "docs": "The minimum allowed length for the field value.",
            "type": "optional<integer>",
          },
          "minWords": {
            "docs": "The minimum allowed number of words for the field value.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The pattern to enforce a specific format for the field value.",
            "type": "optional<string>",
          },
          "patternMessage": {
            "docs": "The validation message for the pattern.",
            "type": "optional<string>",
          },
          "schemaIds": {
            "docs": "The allowed schema ids that can be embedded.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TagsFieldEditor": {
        "docs": "",
        "enum": [
          "Tags",
          "Checkboxes",
          "Dropdown",
        ],
      },
      "TagsFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "allowedValues": {
            "docs": "The allowed values for the field value.",
            "type": "optional<list<string>>",
          },
          "createEnum": {
            "docs": "Indicates whether GraphQL Enum should be created.",
            "type": "boolean",
          },
          "defaultValue": {
            "docs": "The default value.",
            "type": "optional<list<string>>",
          },
          "defaultValues": {
            "docs": "The language specific default value for the field value.",
            "type": "optional<LocalizedValueOfReadonlyListOfString>",
          },
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "TagsFieldEditor",
          },
          "maxItems": {
            "docs": "The maximum allowed items for the field value.",
            "type": "optional<integer>",
          },
          "minItems": {
            "docs": "The minimum allowed items for the field value.",
            "type": "optional<integer>",
          },
        },
      },
      "TeamDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "created": {
            "docs": "The timestamp when the team has been created.",
            "type": "datetime",
          },
          "id": {
            "docs": "The ID of the team.",
            "type": "string",
          },
          "lastModified": {
            "docs": "The timestamp when the team has been modified last.",
            "type": "datetime",
          },
          "name": {
            "docs": "The name of the team.",
            "type": "string",
          },
          "roleName": {
            "docs": "The role name of the user.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The version of the team.",
            "type": "long",
          },
        },
      },
      "TemplateDetailsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "details": {
            "docs": "The details of the template.",
            "type": "string",
          },
        },
      },
      "TemplateDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "description": {
            "docs": "The description of the template.",
            "type": "string",
          },
          "isStarter": {
            "docs": "True, if the template is a starter.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the template.",
            "type": "string",
          },
          "title": {
            "docs": "The title of the template.",
            "type": "string",
          },
        },
      },
      "TemplatesDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The event consumers.",
            "type": "list<TemplateDto>",
          },
        },
      },
      "TranslationDto": {
        "docs": undefined,
        "properties": {
          "result": {
            "docs": "The result of the translation.",
            "type": "TranslationResultCode",
          },
          "text": {
            "docs": "The translated text.",
            "type": "optional<string>",
          },
        },
      },
      "TranslationResultCode": {
        "docs": "",
        "enum": [
          "Translated",
          "LanguageNotSupported",
          "NotTranslated",
          "NotConfigured",
          "Unauthorized",
          "Failed",
        ],
      },
      "TweetRuleActionDto": {
        "docs": undefined,
        "properties": {
          "accessSecret": {
            "docs": " The generated access secret.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "accessToken": {
            "docs": " The generated access token.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "text": {
            "docs": "The text that is sent as tweet to twitter.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "TypesenseRuleActionDto": {
        "docs": undefined,
        "properties": {
          "apiKey": {
            "docs": "The api key.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "delete": {
            "docs": "The condition when to delete the document.",
            "type": "string",
          },
          "document": {
            "docs": "The optional custom document.",
            "type": "string",
          },
          "host": {
            "docs": "The url to the instance or cluster.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "indexName": {
            "docs": "The name of the index.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "UiFieldEditor": {
        "docs": "",
        "type": "literal<"Separator">",
      },
      "UiFieldPropertiesDto": {
        "docs": undefined,
        "properties": {
          "editor": {
            "docs": "The editor that is used to manage this field.",
            "type": "UiFieldEditor",
          },
        },
      },
      "UiSettingsDto": {
        "docs": undefined,
        "properties": {
          "canCreateApps": {
            "docs": "True when the user can create apps.",
            "type": "boolean",
          },
          "canCreateTeams": {
            "docs": "True when the user can create teams.",
            "type": "boolean",
          },
        },
      },
      "UpdateFieldDto": {
        "docs": undefined,
        "properties": {
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "UpdateSettingDto": {
        "docs": undefined,
        "properties": {
          "value": "unknown",
        },
      },
      "UpsertCommentDto": {
        "docs": undefined,
        "properties": {
          "text": {
            "docs": "The comment text.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "The url where the comment is created.",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "UpsertSchemaDto": {
        "docs": undefined,
        "properties": {
          "category": {
            "docs": "The category.",
            "type": "optional<string>",
          },
          "fieldRules": {
            "docs": "The optional field Rules.",
            "type": "optional<list<FieldRuleDto>>",
          },
          "fields": {
            "docs": "Optional fields.",
            "type": "optional<list<UpsertSchemaFieldDto>>",
          },
          "fieldsInLists": {
            "docs": "The names of the fields that should be shown in lists, including meta fields.",
            "type": "optional<list<string>>",
          },
          "fieldsInReferences": {
            "docs": "The names of the fields that should be used in references.",
            "type": "optional<list<string>>",
          },
          "isPublished": {
            "docs": "Set it to true to autopublish the schema.",
            "type": "boolean",
          },
          "previewUrls": {
            "docs": "The optional preview urls.",
            "type": "optional<map<string, optional<string>>>",
          },
          "properties": {
            "docs": "The optional properties.",
            "type": "optional<SchemaPropertiesDto>",
          },
          "scripts": {
            "docs": "The optional scripts.",
            "type": "optional<SchemaScriptsDto>",
          },
        },
      },
      "UpsertSchemaFieldDto": {
        "docs": undefined,
        "properties": {
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
            },
          },
          "nested": {
            "docs": "The nested fields.",
            "type": "optional<list<UpsertSchemaNestedFieldDto>>",
          },
          "partitioning": {
            "docs": "Determines the optional partitioning of the field.",
            "type": "optional<string>",
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "UpsertSchemaNestedFieldDto": {
        "docs": undefined,
        "properties": {
          "isDisabled": {
            "docs": "Defines if the field is disabled.",
            "type": "boolean",
          },
          "isHidden": {
            "docs": "Defines if the field is hidden.",
            "type": "boolean",
          },
          "isLocked": {
            "docs": "Defines if the field is locked.",
            "type": "boolean",
          },
          "name": {
            "docs": "The name of the field. Must be unique within the schema.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)*$",
            },
          },
          "properties": {
            "docs": "The field properties.",
            "type": "FieldPropertiesDto",
          },
        },
      },
      "UsageRuleTriggerDto": {
        "docs": undefined,
        "properties": {
          "limit": {
            "docs": "The number of monthly api calls.",
            "type": "integer",
          },
          "numDays": {
            "docs": "The number of days to check or null for the current month.",
            "type": "optional<integer>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 30,
              "min": 1,
              "multipleOf": undefined,
            },
          },
        },
      },
      "UserDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "displayName": {
            "docs": "The display name (usually first name and last name) of the user.",
            "type": "string",
          },
          "email": {
            "docs": "The email of the user. Unique value.",
            "type": "string",
          },
          "id": {
            "docs": "The ID of the user.",
            "type": "string",
          },
          "isLocked": {
            "docs": "Determines if the user is locked.",
            "type": "boolean",
          },
          "permissions": {
            "docs": "Additional permissions for the user.",
            "type": "list<string>",
          },
        },
      },
      "UserProperty": {
        "docs": undefined,
        "properties": {
          "name": {
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "value": {
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "UsersDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "items": {
            "docs": "The users.",
            "type": "list<UserDto>",
          },
          "total": {
            "docs": "The total number of users.",
            "type": "long",
          },
        },
      },
      "WebhookMethod": {
        "docs": "",
        "enum": [
          "POST",
          "PUT",
          "GET",
          "DELETE",
          "PATCH",
        ],
      },
      "WebhookRuleActionDto": {
        "docs": undefined,
        "properties": {
          "headers": {
            "docs": "The message headers in the format '[Key]=[Value]', one entry per line.",
            "type": "string",
          },
          "method": {
            "docs": "The type of the request.",
            "type": "WebhookMethod",
          },
          "payload": {
            "docs": "Leave it empty to use the full event as body.",
            "type": "string",
          },
          "payloadType": {
            "docs": "The mime type of the payload.",
            "type": "string",
          },
          "sharedSecret": {
            "docs": "The shared secret that is used to calculate the payload signature.",
            "type": "string",
          },
          "url": {
            "docs": "The url to the webhook.",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
      },
      "WorkflowDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "id": {
            "docs": "The workflow id.",
            "type": "optional<string>",
          },
          "initial": {
            "docs": "The initial step.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the workflow.",
            "type": "optional<string>",
          },
          "schemaIds": {
            "docs": "The schema ids.",
            "type": "optional<list<string>>",
          },
          "steps": {
            "docs": "The workflow steps.",
            "type": "optional<map<string, WorkflowStepDto>>",
          },
        },
      },
      "WorkflowStepDto": {
        "docs": undefined,
        "properties": {
          "color": {
            "docs": "The optional color.",
            "type": "optional<string>",
          },
          "noUpdate": {
            "docs": "Indicates if updates should not be allowed.",
            "type": "optional<boolean>",
          },
          "noUpdateExpression": {
            "docs": "Optional expression that must evaluate to true when you want to prevent updates.",
            "type": "optional<string>",
          },
          "noUpdateRoles": {
            "docs": "Optional list of roles to restrict the updates for users with these roles.",
            "type": "optional<list<string>>",
          },
          "transitions": {
            "docs": "The transitions.",
            "type": "optional<map<string, WorkflowTransitionDto>>",
          },
          "validate": {
            "docs": "True if the content should be validated when moving to this step.",
            "type": "optional<boolean>",
          },
        },
      },
      "WorkflowTransitionDto": {
        "docs": undefined,
        "properties": {
          "expression": {
            "docs": "The optional expression.",
            "type": "optional<string>",
          },
          "roles": {
            "docs": "The optional restricted role.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorkflowsDto": {
        "docs": undefined,
        "extends": [
          "Resource",
        ],
        "properties": {
          "errors": {
            "docs": "The errros that should be fixed.",
            "type": "list<string>",
          },
          "items": {
            "docs": "The workflow.",
            "type": "list<WorkflowDto>",
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerAuthScheme",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
    },
    "default-environment": "Default",
    "display-name": "Squidex API",
    "environments": {
      "Default": "https://localhost:5001",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
    "variables": {
      "appName": {
        "docs": undefined,
        "type": "string",
      },
    },
  },
}
`;
