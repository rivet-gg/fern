// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser devrev docs 1`] = `
{
  "definitionFiles": {
    "artifacts.yml": {
      "docs": "Artifact (file) management APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "artifacts",
        "endpoints": {
          "locate": {
            "auth": true,
            "docs": "Gets the download URL for the artifact.",
            "errors": [
              "root.ArtifactsLocateRequestBadRequestError",
              "root.ArtifactsLocateRequestUnauthorizedError",
              "root.ArtifactsLocateRequestForbiddenError",
              "root.ArtifactsLocateRequestNotFoundError",
              "root.ArtifactsLocateRequestTooManyRequestsError",
              "root.ArtifactsLocateRequestInternalServerError",
              "root.ArtifactsLocateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                },
                "response": {
                  "body": {
                    "expires_at": "2024-01-15T09:30:00Z",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/artifacts.locate",
            "request": {
              "name": "ArtifactsLocateRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the artifact to get the URL for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsLocateResponse",
            },
          },
          "prepare": {
            "auth": true,
            "docs": "Creates an artifact and generates an upload URL for its data.
",
            "errors": [
              "root.ArtifactsPrepareRequestBadRequestError",
              "root.ArtifactsPrepareRequestUnauthorizedError",
              "root.ArtifactsPrepareRequestForbiddenError",
              "root.ArtifactsPrepareRequestTooManyRequestsError",
              "root.ArtifactsPrepareRequestInternalServerError",
              "root.ArtifactsPrepareRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "file_name": "file_name",
                },
                "response": {
                  "body": {
                    "form_data": [
                      {
                        "key": "key",
                        "value": "value",
                      },
                    ],
                    "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/artifacts.prepare",
            "request": {
              "body": {
                "properties": {
                  "file_name": {
                    "docs": "The name of the file that's being uploaded.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsPrepareRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsPrepareResponse",
            },
          },
        },
      },
    },
    "authConnection.yml": {
      "docs": "Auth Connections of DevOrg.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "auth-connection",
        "endpoints": {
          "dev-org-auth-connections-create": {
            "auth": true,
            "docs": "Creates a new enterprise authentication connection for a Dev
organization. This authentication connection will not be enabled by
default for the organization and the user will need to explicitly
enable this. Keep in mind that at a time, only one authentication
connection can be enabled for a Dev organization. At present, only 5
enterprise connections can be created by an organization.
",
            "errors": [
              "root.DevOrgAuthConnectionsCreateRequestBadRequestError",
              "root.DevOrgAuthConnectionsCreateRequestUnauthorizedError",
              "root.DevOrgAuthConnectionsCreateRequestForbiddenError",
              "root.DevOrgAuthConnectionsCreateRequestTooManyRequestsError",
              "root.DevOrgAuthConnectionsCreateRequestInternalServerError",
              "root.DevOrgAuthConnectionsCreateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.create",
            "request": {
              "body": "root.DevOrgAuthConnectionsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsCreateResponse",
            },
          },
          "dev-org-auth-connections-delete": {
            "auth": true,
            "docs": "Deletes an authentication connection. Only enterprise connections which
are explicitly set up for a Dev organization can be deleted. Default
connections can not be deleted using this method.
",
            "errors": [
              "root.DevOrgAuthConnectionsDeleteRequestBadRequestError",
              "root.DevOrgAuthConnectionsDeleteRequestUnauthorizedError",
              "root.DevOrgAuthConnectionsDeleteRequestForbiddenError",
              "root.DevOrgAuthConnectionsDeleteRequestNotFoundError",
              "root.DevOrgAuthConnectionsDeleteRequestTooManyRequestsError",
              "root.DevOrgAuthConnectionsDeleteRequestInternalServerError",
              "root.DevOrgAuthConnectionsDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be deleted.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-get": {
            "auth": true,
            "docs": "Retrieves the details for an authentication connection.",
            "errors": [
              "root.DevOrgAuthConnectionsGetRequestBadRequestError",
              "root.DevOrgAuthConnectionsGetRequestUnauthorizedError",
              "root.DevOrgAuthConnectionsGetRequestForbiddenError",
              "root.DevOrgAuthConnectionsGetRequestNotFoundError",
              "root.DevOrgAuthConnectionsGetRequestTooManyRequestsError",
              "root.DevOrgAuthConnectionsGetRequestInternalServerError",
              "root.DevOrgAuthConnectionsGetRequestServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.get",
            "request": {
              "name": "DevOrgAuthConnectionsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "ID of the authentication connection.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsGetResponse",
            },
          },
          "dev-org-auth-connections-list": {
            "auth": true,
            "docs": "Lists all the authentication connections available for a Dev
organization. This list will include both social and enterprise
connections which are either available by default or are explicitly
created by the user.
",
            "errors": [
              "root.DevOrgAuthConnectionsListRequestBadRequestError",
              "root.DevOrgAuthConnectionsListRequestUnauthorizedError",
              "root.DevOrgAuthConnectionsListRequestForbiddenError",
              "root.DevOrgAuthConnectionsListRequestTooManyRequestsError",
              "root.DevOrgAuthConnectionsListRequestInternalServerError",
              "root.DevOrgAuthConnectionsListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "auth_connections": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.list",
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsListResponse",
            },
          },
          "dev-org-auth-connections-toggle": {
            "auth": true,
            "docs": "Enable or disable an authentication connection for a Dev organization.
Currently, only 1 authentication connection can be enabled at a time.
When a new authentication connection is enabled, the connection which
is currently enabled for the Dev organization is automatically
disabled.
",
            "errors": [
              "root.DevOrgAuthConnectionsToggleRequestBadRequestError",
              "root.DevOrgAuthConnectionsToggleRequestUnauthorizedError",
              "root.DevOrgAuthConnectionsToggleRequestForbiddenError",
              "root.DevOrgAuthConnectionsToggleRequestNotFoundError",
              "root.DevOrgAuthConnectionsToggleRequestTooManyRequestsError",
              "root.DevOrgAuthConnectionsToggleRequestInternalServerError",
              "root.DevOrgAuthConnectionsToggleRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.toggle",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be toggled.",
                    "type": "string",
                  },
                  "toggle": "optional<root.AuthConnectionToggle>",
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsToggleRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-update": {
            "auth": true,
            "docs": "Updates an authentication connection.",
            "errors": [
              "root.DevOrgAuthConnectionsUpdateRequestBadRequestError",
              "root.DevOrgAuthConnectionsUpdateRequestUnauthorizedError",
              "root.DevOrgAuthConnectionsUpdateRequestForbiddenError",
              "root.DevOrgAuthConnectionsUpdateRequestNotFoundError",
              "root.DevOrgAuthConnectionsUpdateRequestTooManyRequestsError",
              "root.DevOrgAuthConnectionsUpdateRequestInternalServerError",
              "root.DevOrgAuthConnectionsUpdateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.update",
            "request": {
              "body": "root.DevOrgAuthConnectionsUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsUpdateResponse",
            },
          },
        },
      },
    },
    "authTokens.yml": {
      "docs": "Security token interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "auth-tokens",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a JWT corresponding to the requested token type for the
authenticated user.
",
            "errors": [
              "root.AuthTokensCreateRequestBadRequestError",
              "root.AuthTokensCreateRequestUnauthorizedError",
              "root.AuthTokensCreateRequestForbiddenError",
              "root.AuthTokensCreateRequestTooManyRequestsError",
              "root.AuthTokensCreateRequestInternalServerError",
              "root.AuthTokensCreateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "access_token": "access_token",
                    "client_id": "client_id",
                    "expires_in": 1000000,
                    "refresh_token": "refresh_token",
                    "scope": "scope",
                    "token_type": "bearer",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.create",
            "request": {
              "body": {
                "properties": {
                  "aud": {
                    "docs": "The expected audience values with respect to the token.",
                    "type": "optional<list<string>>",
                  },
                  "client_id": {
                    "docs": "An identifier that represents the application which is requesting
the token. If no client_id is present in the request to generate an
application access token (AAT), DevRev will generate a client_id.
This client_id is only associated with an AAT.
",
                    "type": "optional<string>",
                  },
                  "expires_in": {
                    "docs": "The expected validity lifetime of the token in number of days.
",
                    "type": "optional<long>",
                  },
                  "grant_type": "optional<root.AuthTokenGrantType>",
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                  "rev_info": "optional<root.AuthTokensRevInfo>",
                  "scope": {
                    "docs": "The requested set of scopes associated with the issued token. A
space-delimited list of values in which the order of values does
not matter.
",
                    "type": "optional<string>",
                  },
                  "subject_token": {
                    "docs": "Represents the entity that requests the token. Not required when
requesting an application access token (AAT).
",
                    "type": "optional<string>",
                  },
                  "subject_token_type": "optional<root.AuthTokenSubjectTokenType>",
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Revokes the token that matches the given token ID issued under the
given Dev organization.
",
            "errors": [
              "root.AuthTokensDeleteRequestBadRequestError",
              "root.AuthTokensDeleteRequestUnauthorizedError",
              "root.AuthTokensDeleteRequestForbiddenError",
              "root.AuthTokensDeleteRequestNotFoundError",
              "root.AuthTokensDeleteRequestTooManyRequestsError",
              "root.AuthTokensDeleteRequestInternalServerError",
              "root.AuthTokensDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.delete",
            "request": {
              "body": {
                "properties": {
                  "token_id": {
                    "docs": "The unique identifier for the token under a given Dev organization.
If no token ID is provided, then the token ID will be set from the
JTI claim of the token in the authorization header.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the token metadata corresponding to the given token ID under the
given Dev organization.
",
            "errors": [
              "root.AuthTokensGetRequestBadRequestError",
              "root.AuthTokensGetRequestUnauthorizedError",
              "root.AuthTokensGetRequestForbiddenError",
              "root.AuthTokensGetRequestNotFoundError",
              "root.AuthTokensGetRequestTooManyRequestsError",
              "root.AuthTokensGetRequestInternalServerError",
              "root.AuthTokensGetRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "expires_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "issued_at": "2024-01-15T09:30:00Z",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/auth-tokens.get",
            "request": {
              "name": "AuthTokensGetRequest",
              "query-parameters": {
                "token_id": {
                  "docs": "The unique identifier of the token under a given Dev organization.
",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the token metadata for all the tokens corresponding to the given
token type issued for a given subject.
",
            "errors": [
              "root.AuthTokensListRequestBadRequestError",
              "root.AuthTokensListRequestUnauthorizedError",
              "root.AuthTokensListRequestForbiddenError",
              "root.AuthTokensListRequestNotFoundError",
              "root.AuthTokensListRequestTooManyRequestsError",
              "root.AuthTokensListRequestInternalServerError",
              "root.AuthTokensListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "tokens": [
                      {
                        "client_id": "client_id",
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "scopes",
                        ],
                        "status": "active",
                        "subject": "subject",
                        "token_hint": "token_hint",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/auth-tokens.list",
            "request": {
              "name": "AuthTokensListRequest",
              "query-parameters": {
                "client_id": {
                  "docs": "An identifier that represents the application, which requested the
token. Only relevant for application access tokens.
",
                  "type": "optional<string>",
                },
                "requested_token_type": {
                  "docs": "The type of the requested token. If no value is specified, the
response will include tokens of all the types.
",
                  "type": "optional<root.AuthTokenRequestedTokenType>",
                },
                "subject": {
                  "docs": "The subject associated with the token. In the absence of this
parameter, the ID of the authenticated entity is treated as the
subject.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensListResponse",
            },
          },
          "selfDelete": {
            "auth": true,
            "docs": "Revokes all the tokens that matches the given token type created by the
authenticated user.
",
            "errors": [
              "root.AuthTokensSelfDeleteRequestBadRequestError",
              "root.AuthTokensSelfDeleteRequestUnauthorizedError",
              "root.AuthTokensSelfDeleteRequestForbiddenError",
              "root.AuthTokensSelfDeleteRequestNotFoundError",
              "root.AuthTokensSelfDeleteRequestTooManyRequestsError",
              "root.AuthTokensSelfDeleteRequestInternalServerError",
              "root.AuthTokensSelfDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.self.delete",
            "request": {
              "body": {
                "properties": {
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                },
              },
              "headers": undefined,
              "name": "AuthTokensSelfDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates token metadata of a token issued under a given Dev
organization.
",
            "errors": [
              "root.AuthTokensUpdateRequestBadRequestError",
              "root.AuthTokensUpdateRequestUnauthorizedError",
              "root.AuthTokensUpdateRequestForbiddenError",
              "root.AuthTokensUpdateRequestNotFoundError",
              "root.AuthTokensUpdateRequestTooManyRequestsError",
              "root.AuthTokensUpdateRequestInternalServerError",
              "root.AuthTokensUpdateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "token_hint": "token_hint",
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "expires_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "issued_at": "2024-01-15T09:30:00Z",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.update",
            "request": {
              "body": {
                "properties": {
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "string",
                  },
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensUpdateResponse",
            },
          },
        },
      },
    },
    "devUsers.yml": {
      "docs": "Dev user interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "dev-users",
        "endpoints": {
          "list": {
            "auth": true,
            "docs": "Lists users within your organization.",
            "errors": [
              "root.DevUsersListRequestBadRequestError",
              "root.DevUsersListRequestUnauthorizedError",
              "root.DevUsersListRequestForbiddenError",
              "root.DevUsersListRequestTooManyRequestsError",
              "root.DevUsersListRequestInternalServerError",
              "root.DevUsersListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "dev_users": [
                      {
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "external_identities": [
                          {
                            "key": "value",
                          },
                        ],
                        "full_name": "full_name",
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-users.list",
            "request": {
              "name": "DevUsersListRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "email": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on email addresses.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of Dev users to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Dev users by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "state": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on state.",
                  "type": "optional<root.UserState>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersListResponse",
            },
          },
          "self": {
            "auth": true,
            "docs": "Gets the authenticated user's information.",
            "errors": [
              "root.DevUsersSelfRequestBadRequestError",
              "root.DevUsersSelfRequestUnauthorizedError",
              "root.DevUsersSelfRequestForbiddenError",
              "root.DevUsersSelfRequestTooManyRequestsError",
              "root.DevUsersSelfRequestInternalServerError",
              "root.DevUsersSelfRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "dev_user": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_identities": [
                        {
                          "key": "value",
                        },
                      ],
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-users.self",
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersSelfResponse",
            },
          },
        },
      },
    },
    "parts.yml": {
      "docs": "DevRev part interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "parts",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.PartsCreateRequestBadRequestError",
              "root.PartsCreateRequestUnauthorizedError",
              "root.PartsCreateRequestForbiddenError",
              "root.PartsCreateRequestTooManyRequestsError",
              "root.PartsCreateRequestInternalServerError",
              "root.PartsCreateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/parts.create",
            "request": {
              "body": "root.PartsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.PartsDeleteRequestBadRequestError",
              "root.PartsDeleteRequestUnauthorizedError",
              "root.PartsDeleteRequestForbiddenError",
              "root.PartsDeleteRequestNotFoundError",
              "root.PartsDeleteRequestTooManyRequestsError",
              "root.PartsDeleteRequestInternalServerError",
              "root.PartsDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/parts.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the part to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.PartsGetRequestBadRequestError",
              "root.PartsGetRequestUnauthorizedError",
              "root.PartsGetRequestForbiddenError",
              "root.PartsGetRequestNotFoundError",
              "root.PartsGetRequestTooManyRequestsError",
              "root.PartsGetRequestInternalServerError",
              "root.PartsGetRequestServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/parts.get",
            "request": {
              "name": "PartsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the part to retrieve.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).
",
            "errors": [
              "root.PartsListRequestBadRequestError",
              "root.PartsListRequestUnauthorizedError",
              "root.PartsListRequestForbiddenError",
              "root.PartsListRequestTooManyRequestsError",
              "root.PartsListRequestInternalServerError",
              "root.PartsListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "parts": [],
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/parts.list",
            "request": {
              "name": "PartsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of parts to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "name": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided name(s).",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts owned by any of these users.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided type(s).",
                  "type": "optional<root.PartType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.PartsUpdateRequestBadRequestError",
              "root.PartsUpdateRequestUnauthorizedError",
              "root.PartsUpdateRequestForbiddenError",
              "root.PartsUpdateRequestNotFoundError",
              "root.PartsUpdateRequestTooManyRequestsError",
              "root.PartsUpdateRequestInternalServerError",
              "root.PartsUpdateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/parts.update",
            "request": {
              "body": "root.PartsUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsUpdateResponse",
            },
          },
        },
      },
    },
    "revOrgs.yml": {
      "docs": "Rev organization interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "rev-orgs",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a Rev organization in the authenticated user's Dev
organization.
",
            "errors": [
              "root.RevOrgsCreateRequestBadRequestError",
              "root.RevOrgsCreateRequestUnauthorizedError",
              "root.RevOrgsCreateRequestForbiddenError",
              "root.RevOrgsCreateRequestTooManyRequestsError",
              "root.RevOrgsCreateRequestInternalServerError",
              "root.RevOrgsCreateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "display_name": "display_name",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/rev-orgs.create",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Name of the Rev organization.",
                    "type": "string",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": "optional<root.OrgEnvironment>",
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the Rev organization.",
            "errors": [
              "root.RevOrgsDeleteRequestBadRequestError",
              "root.RevOrgsDeleteRequestUnauthorizedError",
              "root.RevOrgsDeleteRequestForbiddenError",
              "root.RevOrgsDeleteRequestNotFoundError",
              "root.RevOrgsDeleteRequestTooManyRequestsError",
              "root.RevOrgsDeleteRequestInternalServerError",
              "root.RevOrgsDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/rev-orgs.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev organization to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Retrieves the Rev organization's information.",
            "errors": [
              "root.RevOrgsGetRequestBadRequestError",
              "root.RevOrgsGetRequestUnauthorizedError",
              "root.RevOrgsGetRequestForbiddenError",
              "root.RevOrgsGetRequestNotFoundError",
              "root.RevOrgsGetRequestTooManyRequestsError",
              "root.RevOrgsGetRequestInternalServerError",
              "root.RevOrgsGetRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/rev-orgs.get",
            "request": {
              "name": "RevOrgsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the required Rev organization.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the list of Rev organizations' information belonging to the
authenticated user's Dev Organization which the user is also authorized
to access.
",
            "errors": [
              "root.RevOrgsListRequestBadRequestError",
              "root.RevOrgsListRequestUnauthorizedError",
              "root.RevOrgsListRequestForbiddenError",
              "root.RevOrgsListRequestNotFoundError",
              "root.RevOrgsListRequestTooManyRequestsError",
              "root.RevOrgsListRequestInternalServerError",
              "root.RevOrgsListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "rev_orgs": [
                      {
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/rev-orgs.list",
            "request": {
              "name": "RevOrgsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters by creator.",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "created_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "List of external refs to filter Rev organizations for.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of Rev organizations to be retrieved per page.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "modified_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Rev organizations by and the direction to sort
them.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the Rev organization's information.",
            "errors": [
              "root.RevOrgsUpdateRequestBadRequestError",
              "root.RevOrgsUpdateRequestUnauthorizedError",
              "root.RevOrgsUpdateRequestForbiddenError",
              "root.RevOrgsUpdateRequestNotFoundError",
              "root.RevOrgsUpdateRequestTooManyRequestsError",
              "root.RevOrgsUpdateRequestInternalServerError",
              "root.RevOrgsUpdateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/rev-orgs.update",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Customer chosen name for the Rev organization.",
                    "type": "optional<string>",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": "optional<root.OrgEnvironment>",
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of Rev organization to update.",
                    "type": "string",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsUpdateResponse",
            },
          },
        },
      },
    },
    "tags.yml": {
      "docs": "DevRev tag interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "tags",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new tag, which is used to create associations between objects
and a logical concept denoted by the tag's name.
",
            "errors": [
              "root.TagsCreateRequestBadRequestError",
              "root.TagsCreateRequestUnauthorizedError",
              "root.TagsCreateRequestForbiddenError",
              "root.TagsCreateRequestTooManyRequestsError",
              "root.TagsCreateRequestInternalServerError",
              "root.TagsCreateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/tags.create",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": "The allowed values for the tag, or empty if no values are
permitted.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "The description for the tag.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name for the tag, which must be unique across all tags.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a tag.",
            "errors": [
              "root.TagsDeleteRequestBadRequestError",
              "root.TagsDeleteRequestUnauthorizedError",
              "root.TagsDeleteRequestForbiddenError",
              "root.TagsDeleteRequestNotFoundError",
              "root.TagsDeleteRequestTooManyRequestsError",
              "root.TagsDeleteRequestInternalServerError",
              "root.TagsDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/tags.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the tag to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a tag's information.",
            "errors": [
              "root.TagsGetRequestBadRequestError",
              "root.TagsGetRequestUnauthorizedError",
              "root.TagsGetRequestForbiddenError",
              "root.TagsGetRequestNotFoundError",
              "root.TagsGetRequestTooManyRequestsError",
              "root.TagsGetRequestInternalServerError",
              "root.TagsGetRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/tags.get",
            "request": {
              "name": "TagsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The requested tag's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available tags.",
            "errors": [
              "root.TagsListRequestBadRequestError",
              "root.TagsListRequestUnauthorizedError",
              "root.TagsListRequestForbiddenError",
              "root.TagsListRequestTooManyRequestsError",
              "root.TagsListRequestInternalServerError",
              "root.TagsListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "tags": [
                      {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/tags.list",
            "request": {
              "name": "TagsListRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of tags to return. The default is '50'.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a tag's information.",
            "errors": [
              "root.TagsUpdateRequestBadRequestError",
              "root.TagsUpdateRequestUnauthorizedError",
              "root.TagsUpdateRequestForbiddenError",
              "root.TagsUpdateRequestNotFoundError",
              "root.TagsUpdateRequestTooManyRequestsError",
              "root.TagsUpdateRequestInternalServerError",
              "root.TagsUpdateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/tags.update",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": "optional<root.TagsUpdateAllowedValues>",
                  "description": {
                    "docs": "The updated description of the tag.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the tag to update.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The updated name of the tag. The name must be unique across all
tags.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsUpdateResponse",
            },
          },
        },
      },
    },
    "timelineEntries.yml": {
      "docs": "APIs to manage timeline entries for objects.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "timeline-entries",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new entry on an object's timeline.",
            "errors": [
              "root.TimelineEntriesCreateRequestBadRequestError",
              "root.TimelineEntriesCreateRequestUnauthorizedError",
              "root.TimelineEntriesCreateRequestForbiddenError",
              "root.TimelineEntriesCreateRequestTooManyRequestsError",
              "root.TimelineEntriesCreateRequestInternalServerError",
              "root.TimelineEntriesCreateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/timeline-entries.create",
            "request": {
              "body": "root.TimelineEntriesCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesCreateResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets an entry on an object's timeline.",
            "errors": [
              "root.TimelineEntriesGetRequestBadRequestError",
              "root.TimelineEntriesGetRequestUnauthorizedError",
              "root.TimelineEntriesGetRequestForbiddenError",
              "root.TimelineEntriesGetRequestNotFoundError",
              "root.TimelineEntriesGetRequestTooManyRequestsError",
              "root.TimelineEntriesGetRequestInternalServerError",
              "root.TimelineEntriesGetRequestServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/timeline-entries.get",
            "request": {
              "name": "TimelineEntriesGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the timeline entry to get.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the timeline entries for an object.",
            "errors": [
              "root.TimelineEntriesListRequestBadRequestError",
              "root.TimelineEntriesListRequestUnauthorizedError",
              "root.TimelineEntriesListRequestForbiddenError",
              "root.TimelineEntriesListRequestNotFoundError",
              "root.TimelineEntriesListRequestTooManyRequestsError",
              "root.TimelineEntriesListRequestInternalServerError",
              "root.TimelineEntriesListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "object": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                },
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "timeline_entries": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/timeline-entries.list",
            "request": {
              "name": "TimelineEntriesListRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of entries to return. If not set, then this
defaults to \`50\`.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "object": {
                  "docs": "The ID of the object to list timeline entries for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates an entry on an object's timeline.",
            "errors": [
              "root.TimelineEntriesUpdateRequestBadRequestError",
              "root.TimelineEntriesUpdateRequestUnauthorizedError",
              "root.TimelineEntriesUpdateRequestForbiddenError",
              "root.TimelineEntriesUpdateRequestTooManyRequestsError",
              "root.TimelineEntriesUpdateRequestInternalServerError",
              "root.TimelineEntriesUpdateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/timeline-entries.update",
            "request": {
              "body": "root.TimelineEntriesUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesUpdateResponse",
            },
          },
        },
      },
    },
    "webhooks.yml": {
      "docs": "Webhook event APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "webhooks",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new webhook target.",
            "errors": [
              "root.WebhooksCreateRequestBadRequestError",
              "root.WebhooksCreateRequestUnauthorizedError",
              "root.WebhooksCreateRequestForbiddenError",
              "root.WebhooksCreateRequestTooManyRequestsError",
              "root.WebhooksCreateRequestInternalServerError",
              "root.WebhooksCreateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "url": "url",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "part_created",
                      ],
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/webhooks.create",
            "request": {
              "body": {
                "properties": {
                  "event_types": {
                    "docs": "The event types that the webhook endpoint will receive.",
                    "type": "optional<list<root.WebhookEventType>>",
                  },
                  "secret": {
                    "docs": "The secret to use when verifying webhook events. If provided, the
secret must be between 8 and 32 bytes (inclusive). If not set, a
secret will be automatically generated and provided in the
response.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "byte",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "url": {
                    "docs": "The URL of the webhook endpoint.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the requested webhook.",
            "errors": [
              "root.WebhooksDeleteRequestBadRequestError",
              "root.WebhooksDeleteRequestUnauthorizedError",
              "root.WebhooksDeleteRequestForbiddenError",
              "root.WebhooksDeleteRequestNotFoundError",
              "root.WebhooksDeleteRequestTooManyRequestsError",
              "root.WebhooksDeleteRequestInternalServerError",
              "root.WebhooksDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/webhooks.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested webhook's information.",
            "errors": [
              "root.WebhooksGetRequestBadRequestError",
              "root.WebhooksGetRequestUnauthorizedError",
              "root.WebhooksGetRequestForbiddenError",
              "root.WebhooksGetRequestNotFoundError",
              "root.WebhooksGetRequestTooManyRequestsError",
              "root.WebhooksGetRequestInternalServerError",
              "root.WebhooksGetRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "part_created",
                      ],
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/webhooks.get",
            "request": {
              "name": "WebhooksGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "ID for the webhook.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the webhooks.",
            "errors": [
              "root.WebhooksListRequestBadRequestError",
              "root.WebhooksListRequestUnauthorizedError",
              "root.WebhooksListRequestForbiddenError",
              "root.WebhooksListRequestTooManyRequestsError",
              "root.WebhooksListRequestInternalServerError",
              "root.WebhooksListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "webhooks": [
                      {
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "part_created",
                        ],
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/webhooks.list",
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the requested webhook.",
            "errors": [
              "root.WebhooksUpdateRequestBadRequestError",
              "root.WebhooksUpdateRequestUnauthorizedError",
              "root.WebhooksUpdateRequestForbiddenError",
              "root.WebhooksUpdateRequestNotFoundError",
              "root.WebhooksUpdateRequestTooManyRequestsError",
              "root.WebhooksUpdateRequestInternalServerError",
              "root.WebhooksUpdateRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "part_created",
                      ],
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/webhooks.update",
            "request": {
              "body": {
                "properties": {
                  "action": "optional<root.WebhooksUpdateAction>",
                  "event_types": "optional<root.WebhooksUpdateRequestEventTypes>",
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                  "secret": {
                    "docs": "If provided, updates the secret that's used when verifying webhook
events, which must be between 8 and 32 bytes (inclusive). Otherwise
if empty, then a new secret is generated. If the webhook is active,
then its status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "byte",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "url": {
                    "docs": "The webhook's updated URL. If the webhook is active, then the
webhook's status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksUpdateResponse",
            },
          },
        },
      },
    },
    "works.yml": {
      "docs": "DevRev work interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "works",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),
[ticket](https://devrev.ai/docs/product/support)) item.
",
            "errors": [
              "root.WorksCreateRequestBadRequestError",
              "root.WorksCreateRequestUnauthorizedError",
              "root.WorksCreateRequestForbiddenError",
              "root.WorksCreateRequestTooManyRequestsError",
              "root.WorksCreateRequestInternalServerError",
              "root.WorksCreateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/works.create",
            "request": {
              "body": "root.WorksCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a work item.",
            "errors": [
              "root.WorksDeleteRequestBadRequestError",
              "root.WorksDeleteRequestUnauthorizedError",
              "root.WorksDeleteRequestForbiddenError",
              "root.WorksDeleteRequestNotFoundError",
              "root.WorksDeleteRequestTooManyRequestsError",
              "root.WorksDeleteRequestInternalServerError",
              "root.WorksDeleteRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/works.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksDeleteResponse",
            },
          },
          "export": {
            "auth": true,
            "docs": "Exports a collection of work items.",
            "errors": [
              "root.WorksExportRequestBadRequestError",
              "root.WorksExportRequestUnauthorizedError",
              "root.WorksExportRequestForbiddenError",
              "root.WorksExportRequestTooManyRequestsError",
              "root.WorksExportRequestInternalServerError",
              "root.WorksExportRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "works": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/works.export",
            "request": {
              "name": "WorksExportRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "first": {
                  "docs": "The number of work items to return. The default is '50', the maximum
is '5000'.
",
                  "type": "optional<integer>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s).",
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksExportResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a work item's information.",
            "errors": [
              "root.WorksGetRequestBadRequestError",
              "root.WorksGetRequestUnauthorizedError",
              "root.WorksGetRequestForbiddenError",
              "root.WorksGetRequestNotFoundError",
              "root.WorksGetRequestTooManyRequestsError",
              "root.WorksGetRequestInternalServerError",
              "root.WorksGetRequestServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/works.get",
            "request": {
              "name": "WorksGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The work's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of work items.",
            "errors": [
              "root.WorksListRequestBadRequestError",
              "root.WorksListRequestUnauthorizedError",
              "root.WorksListRequestForbiddenError",
              "root.WorksListRequestTooManyRequestsError",
              "root.WorksListRequestInternalServerError",
              "root.WorksListRequestServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "works": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/works.list",
            "request": {
              "name": "WorksListRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of works to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s).",
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a work item's information.",
            "errors": [
              "root.WorksUpdateRequestBadRequestError",
              "root.WorksUpdateRequestUnauthorizedError",
              "root.WorksUpdateRequestForbiddenError",
              "root.WorksUpdateRequestNotFoundError",
              "root.WorksUpdateRequestTooManyRequestsError",
              "root.WorksUpdateRequestInternalServerError",
              "root.WorksUpdateRequestServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/works.update",
            "request": {
              "body": "root.WorksUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksUpdateResponse",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "ArtifactsLocateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "ArtifactsLocateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "ArtifactsLocateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "ArtifactsLocateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "ArtifactsLocateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "ArtifactsLocateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "ArtifactsLocateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "ArtifactsPrepareRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "ArtifactsPrepareRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "ArtifactsPrepareRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "ArtifactsPrepareRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "ArtifactsPrepareRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "ArtifactsPrepareRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "AuthTokensCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "AuthTokensCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "AuthTokensCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "AuthTokensCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "AuthTokensCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "AuthTokensCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "AuthTokensDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "AuthTokensDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "AuthTokensDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "AuthTokensDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "AuthTokensDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "AuthTokensDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "AuthTokensDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "AuthTokensGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "AuthTokensGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "AuthTokensGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "AuthTokensGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "AuthTokensGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "AuthTokensGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "AuthTokensGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "AuthTokensListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "AuthTokensListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "AuthTokensListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "AuthTokensListRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "AuthTokensListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "AuthTokensListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "AuthTokensListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "AuthTokensSelfDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "AuthTokensSelfDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "AuthTokensSelfDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "AuthTokensSelfDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "AuthTokensSelfDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "AuthTokensSelfDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "AuthTokensSelfDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "AuthTokensUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "AuthTokensUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "AuthTokensUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "AuthTokensUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "AuthTokensUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "AuthTokensUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "AuthTokensUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevOrgAuthConnectionsCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevOrgAuthConnectionsCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevOrgAuthConnectionsCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevOrgAuthConnectionsCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevOrgAuthConnectionsCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevOrgAuthConnectionsCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevOrgAuthConnectionsDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevOrgAuthConnectionsDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevOrgAuthConnectionsDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevOrgAuthConnectionsDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "DevOrgAuthConnectionsDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevOrgAuthConnectionsDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevOrgAuthConnectionsDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevOrgAuthConnectionsGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevOrgAuthConnectionsGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevOrgAuthConnectionsGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevOrgAuthConnectionsGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "DevOrgAuthConnectionsGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevOrgAuthConnectionsGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevOrgAuthConnectionsGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevOrgAuthConnectionsListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevOrgAuthConnectionsListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevOrgAuthConnectionsListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevOrgAuthConnectionsListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevOrgAuthConnectionsListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevOrgAuthConnectionsListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevOrgAuthConnectionsToggleRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevOrgAuthConnectionsToggleRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevOrgAuthConnectionsToggleRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevOrgAuthConnectionsToggleRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "DevOrgAuthConnectionsToggleRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevOrgAuthConnectionsToggleRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevOrgAuthConnectionsToggleRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevOrgAuthConnectionsUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevOrgAuthConnectionsUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevOrgAuthConnectionsUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevOrgAuthConnectionsUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "DevOrgAuthConnectionsUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevOrgAuthConnectionsUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevOrgAuthConnectionsUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevUsersListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevUsersListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevUsersListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevUsersListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevUsersListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevUsersListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "DevUsersSelfRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "DevUsersSelfRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "DevUsersSelfRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "DevUsersSelfRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "DevUsersSelfRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "DevUsersSelfRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "PartsCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "PartsCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "PartsCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "PartsCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "PartsCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "PartsCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "PartsDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "PartsDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "PartsDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "PartsDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "PartsDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "PartsDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "PartsDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "PartsGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "PartsGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "PartsGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "PartsGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "PartsGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "PartsGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "PartsGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "PartsListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "PartsListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "PartsListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "PartsListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "PartsListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "PartsListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "PartsUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "PartsUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "PartsUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "PartsUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "PartsUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "PartsUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "PartsUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "RevOrgsCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "RevOrgsCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "RevOrgsCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "RevOrgsCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "RevOrgsCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "RevOrgsCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "RevOrgsDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "RevOrgsDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "RevOrgsDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "RevOrgsDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "RevOrgsDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "RevOrgsDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "RevOrgsDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "RevOrgsGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "RevOrgsGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "RevOrgsGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "RevOrgsGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "RevOrgsGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "RevOrgsGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "RevOrgsGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "RevOrgsListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "RevOrgsListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "RevOrgsListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "RevOrgsListRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "RevOrgsListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "RevOrgsListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "RevOrgsListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "RevOrgsUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "RevOrgsUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "RevOrgsUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "RevOrgsUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "RevOrgsUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "RevOrgsUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "RevOrgsUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TagsCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TagsCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TagsCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TagsCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TagsCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TagsCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TagsDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TagsDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TagsDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TagsDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "TagsDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TagsDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TagsDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TagsGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TagsGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TagsGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TagsGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "TagsGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TagsGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TagsGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TagsListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TagsListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TagsListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TagsListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TagsListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TagsListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TagsUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TagsUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TagsUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TagsUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "TagsUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TagsUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TagsUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TimelineEntriesCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TimelineEntriesCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TimelineEntriesCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TimelineEntriesCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TimelineEntriesCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TimelineEntriesCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TimelineEntriesGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TimelineEntriesGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TimelineEntriesGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TimelineEntriesGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "TimelineEntriesGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TimelineEntriesGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TimelineEntriesGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TimelineEntriesListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TimelineEntriesListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TimelineEntriesListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TimelineEntriesListRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "TimelineEntriesListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TimelineEntriesListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TimelineEntriesListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "TimelineEntriesUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "TimelineEntriesUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "TimelineEntriesUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "TimelineEntriesUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TimelineEntriesUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "TimelineEntriesUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WebhooksCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WebhooksCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WebhooksCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WebhooksCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WebhooksCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WebhooksCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WebhooksDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WebhooksDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WebhooksDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WebhooksDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "WebhooksDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WebhooksDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WebhooksDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WebhooksGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WebhooksGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WebhooksGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WebhooksGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "WebhooksGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WebhooksGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WebhooksGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WebhooksListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WebhooksListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WebhooksListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WebhooksListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WebhooksListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WebhooksListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WebhooksUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WebhooksUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WebhooksUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WebhooksUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "WebhooksUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WebhooksUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WebhooksUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WorksCreateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WorksCreateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WorksCreateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WorksCreateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WorksCreateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WorksCreateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WorksDeleteRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WorksDeleteRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WorksDeleteRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WorksDeleteRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "WorksDeleteRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WorksDeleteRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WorksDeleteRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WorksExportRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WorksExportRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WorksExportRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WorksExportRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WorksExportRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WorksExportRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WorksGetRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WorksGetRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WorksGetRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WorksGetRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "WorksGetRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WorksGetRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WorksGetRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WorksListRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WorksListRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WorksListRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WorksListRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WorksListRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WorksListRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
      "WorksUpdateRequestBadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "WorksUpdateRequestForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "WorksUpdateRequestInternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "WorksUpdateRequestNotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "WorksUpdateRequestServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "WorksUpdateRequestTooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "WorksUpdateRequestUnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
    },
    "types": {
      "ArtifactSummary": "AtomBaseSummary",
      "ArtifactsLocateResponse": {
        "docs": "The response to getting an artifact's download URL.",
        "properties": {
          "expires_at": {
            "docs": "The expiration timestamp of the URL.",
            "type": "optional<datetime>",
          },
          "url": {
            "docs": "The artifact's download URL.",
            "type": "string",
          },
        },
      },
      "ArtifactsPrepareResponse": {
        "docs": "The response to preparing a URL to upload a file.",
        "properties": {
          "form_data": {
            "docs": "The POST policy form data.",
            "type": "list<ArtifactsPrepareResponseFormData>",
          },
          "id": {
            "docs": "The generated artifact's ID.",
            "type": "string",
          },
          "url": {
            "docs": "The URL that the file's data should be uploaded to.",
            "type": "string",
          },
        },
      },
      "ArtifactsPrepareResponseFormData": {
        "docs": undefined,
        "properties": {
          "key": {
            "docs": "Key of the form field.",
            "type": "string",
          },
          "value": {
            "docs": "Value corresponding to the key.",
            "type": "string",
          },
        },
      },
      "AtomBase": {
        "docs": undefined,
        "properties": {
          "created_by": "optional<UserSummary>",
          "created_date": {
            "docs": "Timestamp when the object was created.",
            "type": "optional<datetime>",
          },
          "display_id": {
            "docs": "Human-readable object ID unique to the Dev organization.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Globally unique object ID.",
            "type": "string",
          },
          "modified_by": "optional<UserSummary>",
          "modified_date": {
            "docs": "Timestamp when the object was last modified.",
            "type": "optional<datetime>",
          },
        },
      },
      "AtomBaseSummary": {
        "docs": undefined,
        "properties": {
          "display_id": {
            "docs": "Human-readable object ID unique to the Dev organization.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Globally unique object ID.",
            "type": "string",
          },
        },
      },
      "AuthConnection": {
        "base-properties": {
          "display_name": {
            "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
          "enabled": {
            "docs": "Whether the authentication connection is enabled or disabled. If
set to false, the authentication connection will not show up on the
login screen as a login option.
",
            "type": "optional<boolean>",
          },
          "id": {
            "docs": "ID of the authentication connection.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "Connection object that specifies the configuration for an
authentication connection that is set up for a Dev organization.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "social": "AuthConnectionOptionsSocial",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "AuthConnectionOptionsAzureAd": {
        "docs": "Object encapsulating the configuration parameters for an Azure AD
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the Azure authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the Azure authentication connection.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "Domain URL of the Azure authentication connection.",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsGoogleApps": {
        "docs": "Object encapsulating the configuration parameters for a Google Apps
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the Google Apps authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the Google Apps authentication connection.
",
            "type": "optional<string>",
          },
          "tenant_domain": {
            "docs": "Tenant domain URL of the Google Apps authentication connection.
",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsOidc": {
        "docs": "Object encapsulating the configuration parameters for an OIDC
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the OIDC authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the OIDC authentication connection.",
            "type": "optional<string>",
          },
          "issuer": {
            "docs": "Issuer URL of the OIDC authentication connection.",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsSaml": {
        "docs": "Object encapsulating the configuration parameters for a SAML
authentication connection.
",
        "properties": {
          "sign_in_endpoint": {
            "docs": "Sign In endpoint for the SAML authentication connection.",
            "type": "optional<string>",
          },
          "signing_cert": {
            "docs": "Signing certificate for the SAML authentication connection.
",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsSocial": "map<string, unknown>",
      "AuthConnectionToggle": {
        "enum": [
          "disable",
          "enable",
        ],
      },
      "AuthConnectionType": {
        "docs": "Defines the type for the authentication connection. The configuration
for each authentication connection will depend on the type value.
",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "social",
          "waad",
        ],
      },
      "AuthToken": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "client_id": {
            "docs": "An identifier that represents the application that requested the
token. Only applicable for application access tokens.
",
            "type": "optional<string>",
          },
          "expires_at": {
            "docs": "The time at which the token expires.",
            "type": "optional<datetime>",
          },
          "issued_at": {
            "docs": "The time at which the token was issued.",
            "type": "optional<datetime>",
          },
          "requested_token_type": "optional<AuthTokenRequestedTokenType>",
          "scopes": {
            "docs": "The scopes associated with the issued token.",
            "type": "optional<list<string>>",
          },
          "status": "optional<AuthTokenStatus>",
          "subject": {
            "docs": "The subject of the token.",
            "type": "optional<string>",
          },
          "token_hint": {
            "docs": "A hint that identifies the token.",
            "type": "optional<string>",
          },
        },
      },
      "AuthTokenGrantType": {
        "docs": "Specifies the process of obtaining a token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthGrantTypeTokenIssue",
            "value": "urn:devrev:params:oauth:grant-type:token-issue",
          },
          {
            "name": "UrnIetfParamsOauthGrantTypeTokenExchange",
            "value": "urn:ietf:params:oauth:grant-type:token-exchange",
          },
        ],
      },
      "AuthTokenRequestedTokenType": {
        "docs": "The type of the requested token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthTokenTypeAat",
            "value": "urn:devrev:params:oauth:token-type:aat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeAatPublic",
            "value": "urn:devrev:params:oauth:token-type:aat:public",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeDev",
            "value": "urn:devrev:params:oauth:token-type:dev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypePat",
            "value": "urn:devrev:params:oauth:token-type:pat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRev",
            "value": "urn:devrev:params:oauth:token-type:rev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSession",
            "value": "urn:devrev:params:oauth:token-type:session",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSessionDev0",
            "value": "urn:devrev:params:oauth:token-type:session:dev0",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSys",
            "value": "urn:devrev:params:oauth:token-type:sys",
          },
          {
            "name": "UrnIetfParamsOauthTokenTypeJwt",
            "value": "urn:ietf:params:oauth:token-type:jwt",
          },
        ],
      },
      "AuthTokenStatus": {
        "docs": "The status of the token.",
        "enum": [
          "active",
          "expired",
          "revoked",
        ],
      },
      "AuthTokenSubjectTokenType": {
        "docs": "The type of the subject token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
            "value": "urn:devrev:params:oauth:token-type:jwt:auth0",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeJwtDev",
            "value": "urn:devrev:params:oauth:token-type:jwt:dev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRevinfo",
            "value": "urn:devrev:params:oauth:token-type:revinfo",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSysu",
            "value": "urn:devrev:params:oauth:token-type:sysu",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeUserinfo",
            "value": "urn:devrev:params:oauth:token-type:userinfo",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
            "value": "urn:devrev:params:oauth:token-type:userinfo:profile",
          },
          {
            "name": "UrnIetfParamsOauthTokenTypeJwt",
            "value": "urn:ietf:params:oauth:token-type:jwt",
          },
        ],
      },
      "AuthTokenTokenType": {
        "docs": "The type of the issued token. Bearer is the only supported token type.
",
        "type": "literal<"bearer">",
      },
      "AuthTokensCreateResponse": {
        "docs": "Response for the request to create a new token corresponding to the
requested token type.
",
        "properties": {
          "access_token": {
            "docs": "The issued JSON Web Token (JWT) corresponding to the requested
token type.
",
            "type": "string",
          },
          "client_id": {
            "docs": "An identifier that represents the application which is requesting
the token. Only present in a response corresponding to an
application access token (AAT).
",
            "type": "optional<string>",
          },
          "expires_in": {
            "docs": "The validity lifetime of the token specified in seconds since Unix
epoch.
",
            "type": "long",
          },
          "refresh_token": {
            "docs": "A token to refresh the issued token.",
            "type": "optional<string>",
          },
          "scope": {
            "docs": "The scopes associated with the issued token. A space-delimited list
of values in which the order of values does not matter.
",
            "type": "optional<string>",
          },
          "token_type": "AuthTokenTokenType",
        },
      },
      "AuthTokensGetResponse": {
        "docs": "The response to get the token metadata.",
        "properties": {
          "token": "AuthToken",
        },
      },
      "AuthTokensListResponse": {
        "docs": "The response to list the token metadata.",
        "properties": {
          "tokens": {
            "docs": "The list of token metadata.",
            "type": "list<AuthToken>",
          },
        },
      },
      "AuthTokensOrgTraits": {
        "docs": "Carries Rev org info.",
        "properties": {
          "display_name": {
            "docs": "The display name of the Rev org.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "The domain of the Rev org.",
            "type": "optional<string>",
          },
        },
      },
      "AuthTokensRevInfo": {
        "docs": "Carries info corresponding to the Rev user to be provisioned and/or
issue a Rev session token.
",
        "properties": {
          "org_ref": {
            "docs": "An identifier which uniquely identifies a Rev org.",
            "type": "optional<string>",
          },
          "org_traits": "optional<AuthTokensOrgTraits>",
          "rev_user_id": {
            "docs": "The unique ID of the Rev user.",
            "type": "optional<string>",
          },
          "user_ref": {
            "docs": "An identifier which uniquely identifies a Rev user.",
            "type": "string",
          },
          "user_traits": "optional<AuthTokensUserTraits>",
        },
      },
      "AuthTokensUpdateResponse": {
        "docs": "Response for the request to update the token metadata.",
        "properties": {
          "token": "AuthToken",
        },
      },
      "AuthTokensUserTraits": {
        "docs": "Carries Rev user info.",
        "properties": {
          "display_name": {
            "docs": "The display name of the Rev user.",
            "type": "optional<string>",
          },
          "email": {
            "docs": "The email address of the Rev user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "The full name of the Rev user.",
            "type": "optional<string>",
          },
        },
      },
      "Capability": "PartBase",
      "CapabilitySummary": "PartBaseSummary",
      "DevOrgAuthConnectionsCreateRequest": {
        "base-properties": {
          "display_name": {
            "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
        },
        "discriminant": "type",
        "docs": "Request to create a new enterprise authentication connection.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "DevOrgAuthConnectionsCreateRequestType": {
        "docs": "Defines the type for the authentication connection. Different types of
authentication connections have different configuration parameters.
",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "waad",
        ],
      },
      "DevOrgAuthConnectionsCreateResponse": {
        "docs": "Response for the request to create a new enterprise authentication
connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevOrgAuthConnectionsGetResponse": {
        "docs": "Response object encapsulating the configuration details of an
authentication connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevOrgAuthConnectionsListResponse": {
        "docs": "Response object for the request to list all the social and enterprise
authentication connections configured for a Dev organization.
",
        "properties": {
          "auth_connections": {
            "docs": "List of all the authentication connections currently configured for
a Dev organization.
",
            "type": "list<AuthConnection>",
          },
        },
      },
      "DevOrgAuthConnectionsUpdateRequest": {
        "base-properties": {
          "display_name": {
            "docs": "New display name of the authentication connection. This name will
be visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
          "id": {
            "docs": "ID of the authentication connection which is to be updated.
",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "none": "empty",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "DevOrgAuthConnectionsUpdateRequestType": {
        "docs": "Specifies the type for the authentication connection. Different types
of authentication connections have different configuration parameters
that can be updated.
",
        "enum": [
          "google_apps",
          "none",
          "oidc",
          "samlp",
          "waad",
        ],
      },
      "DevOrgAuthConnectionsUpdateResponse": {
        "docs": "Response for the request to update an enterprise authentication
connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevUser": {
        "docs": undefined,
        "extends": [
          "UserBase",
        ],
        "properties": {
          "external_identities": {
            "docs": "IDs of the Dev User outside the DevRev SOR.",
            "type": "optional<list<ExternalIdentity>>",
          },
        },
      },
      "DevUserSummary": "UserBaseSummary",
      "DevUsersListResponse": {
        "docs": "The response to listing the Dev users.",
        "properties": {
          "dev_users": {
            "docs": "The list of Dev users.",
            "type": "list<DevUser>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "DevUsersSelfResponse": {
        "docs": "The response to getting the information for the authenticated user.
",
        "properties": {
          "dev_user": "DevUser",
        },
      },
      "EnhancementSummary": "PartBaseSummary",
      "ErrorBadRequest": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorBadRequestBadRequest": "map<string, unknown>",
      "ErrorBadRequestInvalidEnumValue": {
        "docs": undefined,
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the field.",
            "type": "list<string>",
          },
          "field_name": {
            "docs": "The field whose enum value is invalid.",
            "type": "string",
          },
          "value": {
            "docs": "The value that was received.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestMissingRequiredField": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The missing field's name.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestParseError": "map<string, unknown>",
      "ErrorBadRequestType": {
        "enum": [
          "bad_request",
          "invalid_enum_value",
          "missing_required_field",
          "parse_error",
          "value_not_permitted",
        ],
      },
      "ErrorBadRequestValueNotPermitted": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The field whose value is not permitted.",
            "type": "string",
          },
          "reason": {
            "docs": "The reason the value isn't permitted.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorBase": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "The message associated with the error.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorForbidden": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorForbiddenForbidden": "map<string, unknown>",
      "ErrorForbiddenType": "literal<"forbidden">",
      "ErrorInternalServerError": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorInternalServerErrorInternalError": "map<string, unknown>",
      "ErrorInternalServerErrorType": "literal<"internal_error">",
      "ErrorNotFound": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorNotFoundNotFound": "map<string, unknown>",
      "ErrorNotFoundType": "literal<"not_found">",
      "ErrorServiceUnavailable": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorServiceUnavailableServiceUnavailable": "map<string, unknown>",
      "ErrorServiceUnavailableType": "literal<"service_unavailable">",
      "ErrorTooManyRequests": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorTooManyRequestsTooManyRequests": "map<string, unknown>",
      "ErrorTooManyRequestsType": "literal<"too_many_requests">",
      "ErrorUnauthorized": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorUnauthorizedType": "literal<"unauthenticated">",
      "ErrorUnauthorizedUnauthenticated": "map<string, unknown>",
      "EventPartCreated": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "EventPartDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the part that was deleted.",
            "type": "string",
          },
        },
      },
      "EventPartUpdated": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "EventRevOrgCreated": {
        "docs": undefined,
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "EventRevOrgDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the Rev organization that was deleted.",
            "type": "string",
          },
        },
      },
      "EventRevOrgUpdated": {
        "docs": undefined,
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "EventTagCreated": {
        "docs": undefined,
        "properties": {
          "tag": "tag",
        },
      },
      "EventTagDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag that was deleted.",
            "type": "string",
          },
        },
      },
      "EventTagUpdated": {
        "docs": undefined,
        "properties": {
          "tag": "tag",
        },
      },
      "EventTimelineEntryCreated": {
        "docs": undefined,
        "properties": {
          "entry": "TimelineEntry",
        },
      },
      "EventTimelineEntryDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the timeline entry that was deleted.",
            "type": "string",
          },
        },
      },
      "EventTimelineEntryUpdated": {
        "docs": undefined,
        "properties": {
          "entry": "TimelineEntry",
        },
      },
      "EventWebhookCreated": {
        "docs": undefined,
        "properties": {
          "webhook": "webhook",
        },
      },
      "EventWebhookDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the webhook that was deleted.",
            "type": "string",
          },
        },
      },
      "EventWebhookUpdated": {
        "docs": undefined,
        "properties": {
          "webhook": "webhook",
        },
      },
      "EventWorkCreated": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "EventWorkDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the work that was deleted.",
            "type": "string",
          },
        },
      },
      "EventWorkUpdated": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "ExternalIdentity": {
        "docs": "External identity of a user.",
        "type": "map<string, unknown>",
      },
      "Feature": "PartBase",
      "FeatureSummary": "PartBaseSummary",
      "GroupSummary": "AtomBaseSummary",
      "IssuePriority": {
        "docs": "Priority of the work based upon impact and criticality.",
        "enum": [
          "p0",
          "p1",
          "p2",
          "p3",
        ],
      },
      "ListMode": {
        "docs": "The iteration mode to use. If "after", then entries after the provided
cursor will be returned, or if no cursor is provided, then from the
beginning. If "before", then entries before the provided cursor will be
returned, or if no cursor is provided, then from the end. Entries will
always be returned in the specified sort-by order.
",
        "enum": [
          "after",
          "before",
        ],
      },
      "OrgBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "display_name": {
            "docs": "Name of the Organization.",
            "type": "optional<string>",
          },
        },
      },
      "OrgBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "display_name": {
            "docs": "Name of the Organization.",
            "type": "optional<string>",
          },
        },
      },
      "OrgEnvironment": {
        "docs": "The environment of the Org. Defaults to 'production' if not specified.
",
        "enum": [
          "production",
          "staging",
          "test",
        ],
      },
      "OrgSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "rev_org": "RevOrgSummary",
        },
      },
      "OrgType": "literal<"rev_org">",
      "PartBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The attached artifacts.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "description": {
            "docs": "Description of the part.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
          "owned_by": {
            "docs": "The users that own the part.",
            "type": "list<UserSummary>",
          },
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
        },
      },
      "PartBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
        },
      },
      "PartSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "CapabilitySummary",
          "enhancement": "EnhancementSummary",
          "feature": "FeatureSummary",
          "product": "ProductSummary",
        },
      },
      "PartType": {
        "enum": [
          "capability",
          "enhancement",
          "feature",
          "product",
        ],
      },
      "PartsCreateRequest": {
        "base-properties": {
          "description": {
            "docs": "Description of the part.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
          "owned_by": {
            "docs": "The users that own the part.",
            "type": "list<string>",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "PartsCreateRequestCapability",
          "enhancement": "PartsCreateRequestEnhancement",
          "feature": "PartsCreateRequestFeature",
          "product": "PartsCreateRequestProduct",
        },
      },
      "PartsCreateRequestCapability": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent product for the capability.",
            "type": "list<string>",
          },
        },
      },
      "PartsCreateRequestEnhancement": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent part on which the enhancement is to be created.
",
            "type": "list<string>",
          },
          "target_close_date": {
            "docs": "Target close date by which enhancement is expected to be closed.
",
            "type": "optional<datetime>",
          },
        },
      },
      "PartsCreateRequestFeature": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent capability/feature for the feature.",
            "type": "list<string>",
          },
        },
      },
      "PartsCreateRequestProduct": "map<string, unknown>",
      "PartsCreateResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "PartsDeleteResponse": "map<string, unknown>",
      "PartsGetResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "PartsListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "parts": {
            "docs": "The list of parts.",
            "type": "list<part>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "PartsUpdateRequest": {
        "base-properties": {
          "description": {
            "docs": "The updated description of the part.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of the part to update.",
            "type": "string",
          },
          "name": {
            "docs": "The updated name of the part.",
            "type": "optional<string>",
          },
          "owned_by": "optional<PartsUpdateRequestOwnedBy>",
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "PartsUpdateRequestCapability",
          "enhancement": "PartsUpdateRequestEnhancement",
          "feature": "PartsUpdateRequestFeature",
          "none": "empty",
          "product": "PartsUpdateRequestProduct",
        },
      },
      "PartsUpdateRequestCapability": "map<string, unknown>",
      "PartsUpdateRequestEnhancement": {
        "docs": undefined,
        "properties": {
          "target_close_date": {
            "docs": "Updates the target close date of the enhancement.",
            "type": "optional<datetime>",
          },
        },
      },
      "PartsUpdateRequestFeature": "map<string, unknown>",
      "PartsUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "PartsUpdateRequestProduct": "map<string, unknown>",
      "PartsUpdateResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "Product": "PartBase",
      "ProductSummary": "PartBaseSummary",
      "RevOrg": {
        "docs": undefined,
        "extends": [
          "OrgBase",
        ],
        "properties": {
          "description": {
            "docs": "Description of the Rev organization.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "type": "optional<string>",
          },
          "external_ref": {
            "docs": "External ref is a unique identifier for the Rev (customer)
organization from your primary customer system of records. If none
is specified, a system-generated identifier will be assigned to the
organization.
",
            "type": "optional<string>",
          },
        },
      },
      "RevOrgSummary": "OrgBaseSummary",
      "RevOrgsCreateResponse": {
        "docs": "Response object for request to create a new Rev organization.
",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevOrgsDeleteResponse": {
        "docs": "The response to deleting a Rev organization.",
        "type": "map<string, unknown>",
      },
      "RevOrgsGetResponse": {
        "docs": "The response to getting a Rev organization's information.",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevOrgsListResponse": {
        "docs": "The response to getting a list of Rev organizations' information.
",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "rev_orgs": {
            "docs": "List with all of the Rev organizations' information.",
            "type": "list<RevOrg>",
          },
        },
      },
      "RevOrgsUpdateResponse": {
        "docs": "Response object to updating Rev organization's information.",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevUserSummary": {
        "docs": undefined,
        "extends": [
          "UserBaseSummary",
        ],
        "properties": {
          "external_ref": {
            "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
            "type": "optional<string>",
          },
          "rev_org": "optional<OrgSummary>",
        },
      },
      "SetTagWithValue": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag.",
            "type": "string",
          },
          "value": {
            "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
            "type": "optional<string>",
          },
        },
      },
      "StageInit": {
        "docs": "Sets an object's initial stage.",
        "properties": {
          "name": {
            "docs": "The name of the stage.",
            "type": "optional<string>",
          },
        },
      },
      "StageUpdate": {
        "docs": "Updates an object's stage.",
        "properties": {
          "name": {
            "docs": "The updated name of the stage, otherwise unchanged if not set.
",
            "type": "optional<string>",
          },
        },
      },
      "SysUserSummary": "UserBaseSummary",
      "TagSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
            "type": "string",
          },
        },
      },
      "TagWithValue": {
        "docs": undefined,
        "properties": {
          "tag": "TagSummary",
          "value": {
            "docs": "The value for the object's association with the tag.",
            "type": "optional<string>",
          },
        },
      },
      "TagsCreateResponse": {
        "docs": "The response to creating a new tag.",
        "properties": {
          "tag": "tag",
        },
      },
      "TagsDeleteResponse": {
        "docs": "The response for deleting a tag.",
        "type": "map<string, unknown>",
      },
      "TagsGetResponse": {
        "docs": "The response to getting a tag's information.",
        "properties": {
          "tag": "tag",
        },
      },
      "TagsListResponse": {
        "docs": "The response to listing the tags.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "The list of tags.",
            "type": "list<tag>",
          },
        },
      },
      "TagsUpdateAllowedValues": {
        "docs": "Specifies an update to a tag's allowed values.",
        "properties": {
          "set": {
            "docs": "Sets the allowed values for the tag.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TagsUpdateResponse": {
        "docs": "The response for updating a tag.",
        "properties": {
          "tag": "tag",
        },
      },
      "TicketSeverity": {
        "docs": "Severity of the ticket.",
        "enum": [
          "blocker",
          "high",
          "low",
          "medium",
        ],
      },
      "TimelineComment": {
        "docs": undefined,
        "extends": [
          "TimelineEntryBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The artifacts for the comment.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "body": {
            "docs": "The comment's body. If the comment has been deleted, then no body
will appear in the response.
",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": {
            "docs": "The SnapKit Body of the comment.",
            "type": "optional<map<string, unknown>>",
          },
        },
      },
      "TimelineCommentBodyType": {
        "docs": "The type of the body to use for the comment.",
        "enum": [
          "snap_kit",
          "text",
        ],
      },
      "TimelineEntriesCreateRequest": {
        "base-properties": {
          "object": {
            "docs": "The ID of the object to create the timeline entry for.",
            "type": "string",
          },
          "visibility": "optional<TimelineEntryVisibility>",
        },
        "discriminant": "type",
        "docs": "The request to create a timeline entry for an object.",
        "union": {
          "timeline_comment": "TimelineEntriesCreateRequestTimelineComment",
        },
      },
      "TimelineEntriesCreateRequestTimelineComment": {
        "docs": undefined,
        "properties": {
          "artifacts": {
            "docs": "The IDs of the artifacts attached to the comment.",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "The comment's body.",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": {
            "docs": "The SnapKit body of the comment.",
            "type": "optional<map<string, unknown>>",
          },
        },
      },
      "TimelineEntriesCreateRequestType": "literal<"timeline_comment">",
      "TimelineEntriesCreateResponse": {
        "docs": "The response to creating a timeline entry for an object.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntriesGetResponse": {
        "docs": "The request to getting a timeline entry.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntriesListResponse": {
        "docs": "The response to listing timeline entries for an object.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "timeline_entries": {
            "docs": "The timeline entries for the object.",
            "type": "list<TimelineEntry>",
          },
        },
      },
      "TimelineEntriesUpdateRequest": {
        "base-properties": {
          "id": {
            "docs": "The ID of the timeline entry to update.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "The request to update a timeline entry.",
        "union": {
          "timeline_comment": "TimelineEntriesUpdateRequestTimelineComment",
        },
      },
      "TimelineEntriesUpdateRequestTimelineComment": {
        "docs": undefined,
        "properties": {
          "artifacts": "optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>",
          "body": {
            "docs": "The updated comment's body.",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": {
            "docs": "The SnapKit body of the comment.",
            "type": "optional<map<string, unknown>>",
          },
        },
      },
      "TimelineEntriesUpdateRequestTimelineCommentArtifacts": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "Adds the provided artifacts to the comment. An artifact cannot be
added more than once, i.e. nothing is done if the artifact is
already attached. Mutually exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "remove": {
            "docs": "Removes the provided artifacts from the comment. If an artifact is
not present, then it's ignored. Mututally exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "set": {
            "docs": "Sets the field to the provided artifacts.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TimelineEntriesUpdateRequestType": "literal<"timeline_comment">",
      "TimelineEntriesUpdateResponse": {
        "docs": "The response to updating a timeline entry.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntry": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "timeline_comment": "TimelineComment",
        },
      },
      "TimelineEntryBase": "AtomBase",
      "TimelineEntryType": "literal<"timeline_comment">",
      "TimelineEntryVisibility": {
        "docs": "The visibility of the entry. If 'private', then the entry is only
visible to the creator, otherwise if not set, then the entry has
default visibility.
",
        "type": "literal<"private">",
      },
      "UserBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "display_name": {
            "docs": "The user's display name. The name is non-unique and mutable.
",
            "type": "optional<string>",
          },
          "display_picture": "optional<ArtifactSummary>",
          "email": {
            "docs": "Email address of the user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "Full name of the user.",
            "type": "optional<string>",
          },
          "phone_numbers": {
            "docs": "Phone numbers of the user.",
            "type": "optional<list<string>>",
          },
          "state": "optional<UserState>",
        },
      },
      "UserBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "display_name": {
            "docs": "The user's display name. The name is non-unique and mutable.
",
            "type": "optional<string>",
          },
          "display_picture": "optional<ArtifactSummary>",
          "email": {
            "docs": "Email address of the user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "Full name of the user.",
            "type": "optional<string>",
          },
          "state": "optional<UserState>",
        },
      },
      "UserState": {
        "docs": "State of the user.",
        "enum": [
          "active",
          "deactivated",
          "locked",
          "shadow",
          "unassigned",
        ],
      },
      "UserSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "dev_user": "DevUserSummary",
          "rev_user": "RevUserSummary",
          "sys_user": "SysUserSummary",
        },
      },
      "UserType": {
        "enum": [
          "dev_user",
          "rev_user",
          "sys_user",
        ],
      },
      "WebhookEventRequest": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The event's ID.",
            "type": "string",
          },
          "part_created": "optional<EventPartCreated>",
          "part_deleted": "optional<EventPartDeleted>",
          "part_updated": "optional<EventPartUpdated>",
          "rev_org_created": "optional<EventRevOrgCreated>",
          "rev_org_deleted": "optional<EventRevOrgDeleted>",
          "rev_org_updated": "optional<EventRevOrgUpdated>",
          "tag_created": "optional<EventTagCreated>",
          "tag_deleted": "optional<EventTagDeleted>",
          "tag_updated": "optional<EventTagUpdated>",
          "timeline_entry_created": "optional<EventTimelineEntryCreated>",
          "timeline_entry_deleted": "optional<EventTimelineEntryDeleted>",
          "timeline_entry_updated": "optional<EventTimelineEntryUpdated>",
          "timestamp": {
            "docs": "Timestamp of the webhook's invocation for the event. Note this
should be used to protect against replay attacks, where the event
should only be processed if the timestamp isn't stale by several
seconds.
",
            "type": "optional<datetime>",
          },
          "type": "optional<WebhookEventType>",
          "verify": "optional<WebhookEventVerify>",
          "webhook_created": "optional<EventWebhookCreated>",
          "webhook_deleted": "optional<EventWebhookDeleted>",
          "webhook_id": {
            "docs": "ID of the webhook for the event.",
            "type": "string",
          },
          "webhook_updated": "optional<EventWebhookUpdated>",
          "work_created": "optional<EventWorkCreated>",
          "work_deleted": "optional<EventWorkDeleted>",
          "work_updated": "optional<EventWorkUpdated>",
        },
      },
      "WebhookEventResponse": {
        "docs": undefined,
        "properties": {
          "challenge": {
            "docs": "The challenge from the "verify" request, otherwise this should not
be set for other request types.
",
            "type": "optional<string>",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "WebhookEventType": {
        "docs": "The event types that the webhook will receive.",
        "enum": [
          "part_created",
          "part_deleted",
          "part_updated",
          "rev_org_created",
          "rev_org_deleted",
          "rev_org_updated",
          "tag_created",
          "tag_deleted",
          "tag_updated",
          "timeline_entry_created",
          "timeline_entry_deleted",
          "timeline_entry_updated",
          "verify",
          "webhook_created",
          "webhook_deleted",
          "webhook_updated",
          "work_created",
          "work_deleted",
          "work_updated",
        ],
      },
      "WebhookEventVerify": {
        "docs": undefined,
        "properties": {
          "challenge": {
            "docs": "The challenge that must be echoed in the response.",
            "type": "string",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "WebhookStatus": {
        "docs": "The status of the webhook.",
        "enum": [
          "active",
          "inactive",
          "unverified",
        ],
      },
      "WebhooksCreateResponse": {
        "docs": "The response to creating a new webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WebhooksDeleteResponse": {
        "docs": "The response to deleting the webhook.",
        "type": "map<string, unknown>",
      },
      "WebhooksGetResponse": {
        "docs": "The response to getting the information for the webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WebhooksListResponse": {
        "docs": "The response to listing the webhooks.",
        "properties": {
          "webhooks": {
            "docs": "The list of webhooks.",
            "type": "list<webhook>",
          },
        },
      },
      "WebhooksUpdateAction": {
        "docs": "The action to update the webhook's status.",
        "enum": [
          "activate",
          "deactivate",
        ],
      },
      "WebhooksUpdateRequestEventTypes": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "The event types to add. If a provided event type is already set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
            "type": "optional<list<WebhookEventType>>",
          },
          "remove": {
            "docs": "The event types to remove. If a provided event type isn't set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
            "type": "optional<list<WebhookEventType>>",
          },
          "set": {
            "docs": "The updated event types, which will replace the webhook's current
event types. Note this is mutually exclusive with 'add' and
'remove'.
",
            "type": "optional<list<WebhookEventType>>",
          },
        },
      },
      "WebhooksUpdateResponse": {
        "docs": "The response to updating the webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WorkBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "applies_to_part": "optional<PartSummary>",
          "artifacts": {
            "docs": "The artifacts attached to the work item.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "body": {
            "docs": "Body of the work object.",
            "type": "optional<string>",
          },
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<UserSummary>",
          },
          "reported_by": {
            "docs": "Users that reported the work.",
            "type": "optional<list<UserSummary>>",
          },
          "stage": "optional<stage>",
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
          "target_close_date": {
            "docs": "Timestamp when the work is expected to be complete.",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
      },
      "WorkType": {
        "enum": [
          "issue",
          "ticket",
        ],
      },
      "WorksCreateRequest": {
        "base-properties": {
          "applies_to_part": {
            "docs": "The [part](https://devrev.ai/docs/product/parts) that the work
applies to. Specifying a part is required when creating tickets and
issues.
",
            "type": "string",
          },
          "artifacts": {
            "docs": "The IDs of the artifacts to associate with the work item.
",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "Body of the work object.",
            "type": "optional<string>",
          },
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<string>",
          },
          "reported_by": {
            "docs": "The users that reported the work.",
            "type": "optional<list<string>>",
          },
          "stage": "optional<StageInit>",
          "tags": {
            "docs": "Tags associated with the work item.",
            "type": "optional<list<SetTagWithValue>>",
          },
          "target_close_date": {
            "docs": "Timestamp for when the work is expected to be complete.",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "WorksCreateRequestIssue",
          "ticket": "WorksCreateRequestTicket",
        },
      },
      "WorksCreateRequestIssue": {
        "docs": undefined,
        "properties": {
          "priority": "optional<IssuePriority>",
          "sprint": {
            "docs": "The sprint that the issue belongs to.",
            "type": "optional<string>",
          },
        },
      },
      "WorksCreateRequestTicket": {
        "docs": undefined,
        "properties": {
          "group": {
            "docs": "The group that the ticket is associated with.",
            "type": "optional<string>",
          },
          "rev_org": {
            "docs": "The Rev organization that the ticket is associated with.",
            "type": "optional<string>",
          },
          "severity": "optional<TicketSeverity>",
        },
      },
      "WorksCreateResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "WorksDeleteResponse": "map<string, unknown>",
      "WorksExportResponse": {
        "docs": undefined,
        "properties": {
          "works": {
            "docs": "The resulting collection of work items.",
            "type": "list<work>",
          },
        },
      },
      "WorksGetResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "WorksListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "works": {
            "docs": "The list of works.",
            "type": "list<work>",
          },
        },
      },
      "WorksUpdateRequest": {
        "base-properties": {
          "applies_to_part": {
            "docs": "Updates the part that the work applies to.",
            "type": "optional<string>",
          },
          "artifacts": "optional<WorksUpdateRequestArtifactIds>",
          "body": {
            "docs": "Updated body of the work object, or unchanged if not provided.
",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The work's ID.",
            "type": "string",
          },
          "owned_by": "optional<WorksUpdateRequestOwnedBy>",
          "reported_by": "optional<WorksUpdateRequestReportedBy>",
          "stage": "optional<StageUpdate>",
          "tags": "optional<WorksUpdateRequestTags>",
          "target_close_date": {
            "docs": "Updates the timestamp for when the work is expected to be complete.
",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Updated title of the work object, or unchanged if not provided.
",
            "type": "optional<string>",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "WorksUpdateRequestIssue",
          "none": "empty",
          "ticket": "WorksUpdateRequestTicket",
        },
      },
      "WorksUpdateRequestArtifactIds": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestIssue": {
        "docs": undefined,
        "properties": {
          "priority": "optional<IssuePriority>",
          "sprint": {
            "docs": "Updates the sprint that the issue belongs to.",
            "type": "optional<string>",
          },
        },
      },
      "WorksUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestReportedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the users that reported the work to the provided user IDs.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestTags": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the provided tags on the work item.",
            "type": "optional<list<SetTagWithValue>>",
          },
        },
      },
      "WorksUpdateRequestTicket": {
        "docs": undefined,
        "properties": {
          "group": {
            "docs": "The group that the ticket is associated with.",
            "type": "optional<string>",
          },
          "rev_org": {
            "docs": "Updates the Rev organization that the ticket is associated with.
",
            "type": "optional<string>",
          },
          "severity": "optional<TicketSeverity>",
        },
      },
      "WorksUpdateResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "empty": "map<string, unknown>",
      "enhancement": {
        "docs": undefined,
        "extends": [
          "PartBase",
        ],
        "properties": {
          "target_close_date": {
            "docs": "Timestamp when the enhancement is expected to be closed.",
            "type": "optional<datetime>",
          },
        },
      },
      "issue": {
        "docs": undefined,
        "extends": [
          "WorkBase",
        ],
        "properties": {
          "priority": "optional<IssuePriority>",
        },
      },
      "part": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "Capability",
          "enhancement": "enhancement",
          "feature": "Feature",
          "product": "Product",
        },
      },
      "stage": {
        "docs": "Describes the current stage of a work item.",
        "properties": {
          "name": {
            "docs": "Current stage name of the work item.",
            "type": "string",
          },
        },
      },
      "tag": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the tag, where a value is provided when a
tag is associated with an object. If empty, then no value should be
provided when the association is made.
",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "An informative description for the tag that should provide context
on the tag's purpose and usage.
",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
            "type": "string",
          },
        },
      },
      "ticket": {
        "docs": undefined,
        "extends": [
          "WorkBase",
        ],
        "properties": {
          "group": "optional<GroupSummary>",
          "rev_org": "optional<OrgSummary>",
          "severity": "optional<TicketSeverity>",
        },
      },
      "webhook": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "event_types": {
            "docs": "The event types that the webhook will receive.",
            "type": "optional<list<WebhookEventType>>",
          },
          "secret": {
            "docs": "The secret to use for verifying webhook events.",
            "type": "string",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "status": "WebhookStatus",
          "url": {
            "docs": "The URL of the webhook endpoint.",
            "type": "string",
          },
        },
      },
      "work": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "issue",
          "ticket": "ticket",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "auth-token",
    "auth-schemes": {
      "auth-token": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Default",
    "display-name": "DevRev REST API",
    "environments": {
      "Default": "https://api.devrev.ai",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api parser devrev simple 1`] = `
{
  "definitionFiles": {
    "artifacts.yml": {
      "docs": "Artifact (file) management APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "artifacts",
        "endpoints": {
          "locate": {
            "auth": true,
            "docs": "Gets the download URL for the artifact.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                },
                "response": {
                  "body": {
                    "expires_at": "2024-01-15T09:30:00Z",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/artifacts.locate",
            "request": {
              "name": "ArtifactsLocateRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the artifact to get the URL for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsLocateResponse",
            },
          },
          "prepare": {
            "auth": true,
            "docs": "Creates an artifact and generates an upload URL for its data.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "file_name": "file_name",
                },
                "response": {
                  "body": {
                    "form_data": [
                      {
                        "key": "key",
                        "value": "value",
                      },
                    ],
                    "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/artifacts.prepare",
            "request": {
              "body": {
                "properties": {
                  "file_name": {
                    "docs": "The name of the file that's being uploaded.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsPrepareRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsPrepareResponse",
            },
          },
        },
      },
    },
    "authConnection.yml": {
      "docs": "Auth Connections of DevOrg.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "auth-connection",
        "endpoints": {
          "dev-org-auth-connections-create": {
            "auth": true,
            "docs": "Creates a new enterprise authentication connection for a Dev
organization. This authentication connection will not be enabled by
default for the organization and the user will need to explicitly
enable this. Keep in mind that at a time, only one authentication
connection can be enabled for a Dev organization. At present, only 5
enterprise connections can be created by an organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.create",
            "request": {
              "body": "root.DevOrgAuthConnectionsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsCreateResponse",
            },
          },
          "dev-org-auth-connections-delete": {
            "auth": true,
            "docs": "Deletes an authentication connection. Only enterprise connections which
are explicitly set up for a Dev organization can be deleted. Default
connections can not be deleted using this method.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be deleted.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-get": {
            "auth": true,
            "docs": "Retrieves the details for an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.get",
            "request": {
              "name": "DevOrgAuthConnectionsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "ID of the authentication connection.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsGetResponse",
            },
          },
          "dev-org-auth-connections-list": {
            "auth": true,
            "docs": "Lists all the authentication connections available for a Dev
organization. This list will include both social and enterprise
connections which are either available by default or are explicitly
created by the user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "auth_connections": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.list",
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsListResponse",
            },
          },
          "dev-org-auth-connections-toggle": {
            "auth": true,
            "docs": "Enable or disable an authentication connection for a Dev organization.
Currently, only 1 authentication connection can be enabled at a time.
When a new authentication connection is enabled, the connection which
is currently enabled for the Dev organization is automatically
disabled.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.toggle",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be toggled.",
                    "type": "string",
                  },
                  "toggle": "optional<root.AuthConnectionToggle>",
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsToggleRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-update": {
            "auth": true,
            "docs": "Updates an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/dev-orgs.auth-connections.update",
            "request": {
              "body": "root.DevOrgAuthConnectionsUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsUpdateResponse",
            },
          },
        },
      },
    },
    "authTokens.yml": {
      "docs": "Security token interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "auth-tokens",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a JWT corresponding to the requested token type for the
authenticated user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "access_token": "access_token",
                    "client_id": "client_id",
                    "expires_in": 1000000,
                    "refresh_token": "refresh_token",
                    "scope": "scope",
                    "token_type": "bearer",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.create",
            "request": {
              "body": {
                "properties": {
                  "aud": {
                    "docs": "The expected audience values with respect to the token.",
                    "type": "optional<list<string>>",
                  },
                  "client_id": {
                    "docs": "An identifier that represents the application which is requesting
the token. If no client_id is present in the request to generate an
application access token (AAT), DevRev will generate a client_id.
This client_id is only associated with an AAT.
",
                    "type": "optional<string>",
                  },
                  "expires_in": {
                    "docs": "The expected validity lifetime of the token in number of days.
",
                    "type": "optional<long>",
                  },
                  "grant_type": "optional<root.AuthTokenGrantType>",
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                  "rev_info": "optional<root.AuthTokensRevInfo>",
                  "scope": {
                    "docs": "The requested set of scopes associated with the issued token. A
space-delimited list of values in which the order of values does
not matter.
",
                    "type": "optional<string>",
                  },
                  "subject_token": {
                    "docs": "Represents the entity that requests the token. Not required when
requesting an application access token (AAT).
",
                    "type": "optional<string>",
                  },
                  "subject_token_type": "optional<root.AuthTokenSubjectTokenType>",
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Revokes the token that matches the given token ID issued under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.delete",
            "request": {
              "body": {
                "properties": {
                  "token_id": {
                    "docs": "The unique identifier for the token under a given Dev organization.
If no token ID is provided, then the token ID will be set from the
JTI claim of the token in the authorization header.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the token metadata corresponding to the given token ID under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "expires_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "issued_at": "2024-01-15T09:30:00Z",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/auth-tokens.get",
            "request": {
              "name": "AuthTokensGetRequest",
              "query-parameters": {
                "token_id": {
                  "docs": "The unique identifier of the token under a given Dev organization.
",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the token metadata for all the tokens corresponding to the given
token type issued for a given subject.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "tokens": [
                      {
                        "client_id": "client_id",
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "scopes",
                        ],
                        "status": "active",
                        "subject": "subject",
                        "token_hint": "token_hint",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/auth-tokens.list",
            "request": {
              "name": "AuthTokensListRequest",
              "query-parameters": {
                "client_id": {
                  "docs": "An identifier that represents the application, which requested the
token. Only relevant for application access tokens.
",
                  "type": "optional<string>",
                },
                "requested_token_type": {
                  "docs": "The type of the requested token. If no value is specified, the
response will include tokens of all the types.
",
                  "type": "optional<root.AuthTokenRequestedTokenType>",
                },
                "subject": {
                  "docs": "The subject associated with the token. In the absence of this
parameter, the ID of the authenticated entity is treated as the
subject.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensListResponse",
            },
          },
          "selfDelete": {
            "auth": true,
            "docs": "Revokes all the tokens that matches the given token type created by the
authenticated user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.self.delete",
            "request": {
              "body": {
                "properties": {
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                },
              },
              "headers": undefined,
              "name": "AuthTokensSelfDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates token metadata of a token issued under a given Dev
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "token_hint": "token_hint",
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "expires_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "issued_at": "2024-01-15T09:30:00Z",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/auth-tokens.update",
            "request": {
              "body": {
                "properties": {
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "string",
                  },
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensUpdateResponse",
            },
          },
        },
      },
    },
    "devUsers.yml": {
      "docs": "Dev user interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "dev-users",
        "endpoints": {
          "list": {
            "auth": true,
            "docs": "Lists users within your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "dev_users": [
                      {
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "external_identities": [
                          {
                            "key": "value",
                          },
                        ],
                        "full_name": "full_name",
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-users.list",
            "request": {
              "name": "DevUsersListRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "email": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on email addresses.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of Dev users to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Dev users by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "state": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on state.",
                  "type": "optional<root.UserState>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersListResponse",
            },
          },
          "self": {
            "auth": true,
            "docs": "Gets the authenticated user's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "dev_user": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_identities": [
                        {
                          "key": "value",
                        },
                      ],
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/dev-users.self",
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersSelfResponse",
            },
          },
        },
      },
    },
    "parts.yml": {
      "docs": "DevRev part interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "parts",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/parts.create",
            "request": {
              "body": "root.PartsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/parts.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the part to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/parts.get",
            "request": {
              "name": "PartsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the part to retrieve.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "parts": [],
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/parts.list",
            "request": {
              "name": "PartsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of parts to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "name": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided name(s).",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts owned by any of these users.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided type(s).",
                  "type": "optional<root.PartType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/parts.update",
            "request": {
              "body": "root.PartsUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsUpdateResponse",
            },
          },
        },
      },
    },
    "revOrgs.yml": {
      "docs": "Rev organization interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "rev-orgs",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a Rev organization in the authenticated user's Dev
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "display_name": "display_name",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/rev-orgs.create",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Name of the Rev organization.",
                    "type": "string",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": "optional<root.OrgEnvironment>",
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the Rev organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/rev-orgs.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev organization to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Retrieves the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/rev-orgs.get",
            "request": {
              "name": "RevOrgsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the required Rev organization.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the list of Rev organizations' information belonging to the
authenticated user's Dev Organization which the user is also authorized
to access.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "rev_orgs": [
                      {
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/rev-orgs.list",
            "request": {
              "name": "RevOrgsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters by creator.",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "created_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "List of external refs to filter Rev organizations for.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of Rev organizations to be retrieved per page.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "modified_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Rev organizations by and the direction to sort
them.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/rev-orgs.update",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Customer chosen name for the Rev organization.",
                    "type": "optional<string>",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": "optional<root.OrgEnvironment>",
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of Rev organization to update.",
                    "type": "string",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsUpdateResponse",
            },
          },
        },
      },
    },
    "tags.yml": {
      "docs": "DevRev tag interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "tags",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new tag, which is used to create associations between objects
and a logical concept denoted by the tag's name.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/tags.create",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": "The allowed values for the tag, or empty if no values are
permitted.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "The description for the tag.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name for the tag, which must be unique across all tags.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a tag.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/tags.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the tag to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/tags.get",
            "request": {
              "name": "TagsGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The requested tag's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available tags.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "tags": [
                      {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/tags.list",
            "request": {
              "name": "TagsListRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of tags to return. The default is '50'.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/tags.update",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": "optional<root.TagsUpdateAllowedValues>",
                  "description": {
                    "docs": "The updated description of the tag.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the tag to update.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The updated name of the tag. The name must be unique across all
tags.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsUpdateResponse",
            },
          },
        },
      },
    },
    "timelineEntries.yml": {
      "docs": "APIs to manage timeline entries for objects.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "timeline-entries",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/timeline-entries.create",
            "request": {
              "body": "root.TimelineEntriesCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesCreateResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/timeline-entries.get",
            "request": {
              "name": "TimelineEntriesGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the timeline entry to get.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the timeline entries for an object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "object": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                },
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "timeline_entries": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/timeline-entries.list",
            "request": {
              "name": "TimelineEntriesListRequest",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of entries to return. If not set, then this
defaults to \`50\`.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "object": {
                  "docs": "The ID of the object to list timeline entries for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/timeline-entries.update",
            "request": {
              "body": "root.TimelineEntriesUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesUpdateResponse",
            },
          },
        },
      },
    },
    "webhooks.yml": {
      "docs": "Webhook event APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "webhooks",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new webhook target.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "url": "url",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "part_created",
                      ],
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/webhooks.create",
            "request": {
              "body": {
                "properties": {
                  "event_types": {
                    "docs": "The event types that the webhook endpoint will receive.",
                    "type": "optional<list<root.WebhookEventType>>",
                  },
                  "secret": {
                    "docs": "The secret to use when verifying webhook events. If provided, the
secret must be between 8 and 32 bytes (inclusive). If not set, a
secret will be automatically generated and provided in the
response.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "byte",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "url": {
                    "docs": "The URL of the webhook endpoint.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the requested webhook.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/webhooks.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested webhook's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "part_created",
                      ],
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/webhooks.get",
            "request": {
              "name": "WebhooksGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "ID for the webhook.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the webhooks.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "webhooks": [
                      {
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "part_created",
                        ],
                        "id": "id",
                        "modified_date": "2024-01-15T09:30:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/webhooks.list",
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the requested webhook.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2024-01-15T09:30:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "part_created",
                      ],
                      "id": "id",
                      "modified_date": "2024-01-15T09:30:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/webhooks.update",
            "request": {
              "body": {
                "properties": {
                  "action": "optional<root.WebhooksUpdateAction>",
                  "event_types": "optional<root.WebhooksUpdateRequestEventTypes>",
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                  "secret": {
                    "docs": "If provided, updates the secret that's used when verifying webhook
events, which must be between 8 and 32 bytes (inclusive). Otherwise
if empty, then a new secret is generated. If the webhook is active,
then its status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "byte",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "url": {
                    "docs": "The webhook's updated URL. If the webhook is active, then the
webhook's status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksUpdateResponse",
            },
          },
        },
      },
    },
    "works.yml": {
      "docs": "DevRev work interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "works",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),
[ticket](https://devrev.ai/docs/product/support)) item.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/works.create",
            "request": {
              "body": "root.WorksCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a work item.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>",
                },
                "response": {
                  "body": {
                    "key": "value",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/works.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksDeleteResponse",
            },
          },
          "export": {
            "auth": true,
            "docs": "Exports a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "works": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/works.export",
            "request": {
              "name": "WorksExportRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "first": {
                  "docs": "The number of work items to return. The default is '50', the maximum
is '5000'.
",
                  "type": "optional<integer>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s).",
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksExportResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/works.get",
            "request": {
              "name": "WorksGetRequest",
              "query-parameters": {
                "id": {
                  "docs": "The work's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "works": [],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/works.list",
            "request": {
              "name": "WorksListRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of works to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s).",
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/works.update",
            "request": {
              "body": "root.WorksUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksUpdateResponse",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "docs": "400 Bad Request.",
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "ForbiddenError": {
        "docs": "403 Forbidden.",
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "InternalServerError": {
        "docs": "500 Internal Server Error.",
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "NotFoundError": {
        "docs": "404 Not Found.",
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "ServiceUnavailableError": {
        "docs": "503 Service Unavailable.",
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TooManyRequestsError": {
        "docs": "429 Too Many Requests.",
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "UnauthorizedError": {
        "docs": "401 Unauthorized.",
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
    },
    "types": {
      "ArtifactSummary": "AtomBaseSummary",
      "ArtifactsLocateResponse": {
        "docs": "The response to getting an artifact's download URL.",
        "properties": {
          "expires_at": {
            "docs": "The expiration timestamp of the URL.",
            "type": "optional<datetime>",
          },
          "url": {
            "docs": "The artifact's download URL.",
            "type": "string",
          },
        },
      },
      "ArtifactsPrepareResponse": {
        "docs": "The response to preparing a URL to upload a file.",
        "properties": {
          "form_data": {
            "docs": "The POST policy form data.",
            "type": "list<ArtifactsPrepareResponseFormData>",
          },
          "id": {
            "docs": "The generated artifact's ID.",
            "type": "string",
          },
          "url": {
            "docs": "The URL that the file's data should be uploaded to.",
            "type": "string",
          },
        },
      },
      "ArtifactsPrepareResponseFormData": {
        "docs": undefined,
        "properties": {
          "key": {
            "docs": "Key of the form field.",
            "type": "string",
          },
          "value": {
            "docs": "Value corresponding to the key.",
            "type": "string",
          },
        },
      },
      "AtomBase": {
        "docs": undefined,
        "properties": {
          "created_by": "optional<UserSummary>",
          "created_date": {
            "docs": "Timestamp when the object was created.",
            "type": "optional<datetime>",
          },
          "display_id": {
            "docs": "Human-readable object ID unique to the Dev organization.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Globally unique object ID.",
            "type": "string",
          },
          "modified_by": "optional<UserSummary>",
          "modified_date": {
            "docs": "Timestamp when the object was last modified.",
            "type": "optional<datetime>",
          },
        },
      },
      "AtomBaseSummary": {
        "docs": undefined,
        "properties": {
          "display_id": {
            "docs": "Human-readable object ID unique to the Dev organization.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Globally unique object ID.",
            "type": "string",
          },
        },
      },
      "AuthConnection": {
        "base-properties": {
          "display_name": {
            "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
          "enabled": {
            "docs": "Whether the authentication connection is enabled or disabled. If
set to false, the authentication connection will not show up on the
login screen as a login option.
",
            "type": "optional<boolean>",
          },
          "id": {
            "docs": "ID of the authentication connection.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "Connection object that specifies the configuration for an
authentication connection that is set up for a Dev organization.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "social": "AuthConnectionOptionsSocial",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "AuthConnectionOptionsAzureAd": {
        "docs": "Object encapsulating the configuration parameters for an Azure AD
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the Azure authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the Azure authentication connection.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "Domain URL of the Azure authentication connection.",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsGoogleApps": {
        "docs": "Object encapsulating the configuration parameters for a Google Apps
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the Google Apps authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the Google Apps authentication connection.
",
            "type": "optional<string>",
          },
          "tenant_domain": {
            "docs": "Tenant domain URL of the Google Apps authentication connection.
",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsOidc": {
        "docs": "Object encapsulating the configuration parameters for an OIDC
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the OIDC authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the OIDC authentication connection.",
            "type": "optional<string>",
          },
          "issuer": {
            "docs": "Issuer URL of the OIDC authentication connection.",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsSaml": {
        "docs": "Object encapsulating the configuration parameters for a SAML
authentication connection.
",
        "properties": {
          "sign_in_endpoint": {
            "docs": "Sign In endpoint for the SAML authentication connection.",
            "type": "optional<string>",
          },
          "signing_cert": {
            "docs": "Signing certificate for the SAML authentication connection.
",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsSocial": "map<string, unknown>",
      "AuthConnectionToggle": {
        "enum": [
          "disable",
          "enable",
        ],
      },
      "AuthConnectionType": {
        "docs": "Defines the type for the authentication connection. The configuration
for each authentication connection will depend on the type value.
",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "social",
          "waad",
        ],
      },
      "AuthToken": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "client_id": {
            "docs": "An identifier that represents the application that requested the
token. Only applicable for application access tokens.
",
            "type": "optional<string>",
          },
          "expires_at": {
            "docs": "The time at which the token expires.",
            "type": "optional<datetime>",
          },
          "issued_at": {
            "docs": "The time at which the token was issued.",
            "type": "optional<datetime>",
          },
          "requested_token_type": "optional<AuthTokenRequestedTokenType>",
          "scopes": {
            "docs": "The scopes associated with the issued token.",
            "type": "optional<list<string>>",
          },
          "status": "optional<AuthTokenStatus>",
          "subject": {
            "docs": "The subject of the token.",
            "type": "optional<string>",
          },
          "token_hint": {
            "docs": "A hint that identifies the token.",
            "type": "optional<string>",
          },
        },
      },
      "AuthTokenGrantType": {
        "docs": "Specifies the process of obtaining a token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthGrantTypeTokenIssue",
            "value": "urn:devrev:params:oauth:grant-type:token-issue",
          },
          {
            "name": "UrnIetfParamsOauthGrantTypeTokenExchange",
            "value": "urn:ietf:params:oauth:grant-type:token-exchange",
          },
        ],
      },
      "AuthTokenRequestedTokenType": {
        "docs": "The type of the requested token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthTokenTypeAat",
            "value": "urn:devrev:params:oauth:token-type:aat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeAatPublic",
            "value": "urn:devrev:params:oauth:token-type:aat:public",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeDev",
            "value": "urn:devrev:params:oauth:token-type:dev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypePat",
            "value": "urn:devrev:params:oauth:token-type:pat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRev",
            "value": "urn:devrev:params:oauth:token-type:rev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSession",
            "value": "urn:devrev:params:oauth:token-type:session",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSessionDev0",
            "value": "urn:devrev:params:oauth:token-type:session:dev0",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSys",
            "value": "urn:devrev:params:oauth:token-type:sys",
          },
          {
            "name": "UrnIetfParamsOauthTokenTypeJwt",
            "value": "urn:ietf:params:oauth:token-type:jwt",
          },
        ],
      },
      "AuthTokenStatus": {
        "docs": "The status of the token.",
        "enum": [
          "active",
          "expired",
          "revoked",
        ],
      },
      "AuthTokenSubjectTokenType": {
        "docs": "The type of the subject token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
            "value": "urn:devrev:params:oauth:token-type:jwt:auth0",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeJwtDev",
            "value": "urn:devrev:params:oauth:token-type:jwt:dev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRevinfo",
            "value": "urn:devrev:params:oauth:token-type:revinfo",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSysu",
            "value": "urn:devrev:params:oauth:token-type:sysu",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeUserinfo",
            "value": "urn:devrev:params:oauth:token-type:userinfo",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
            "value": "urn:devrev:params:oauth:token-type:userinfo:profile",
          },
          {
            "name": "UrnIetfParamsOauthTokenTypeJwt",
            "value": "urn:ietf:params:oauth:token-type:jwt",
          },
        ],
      },
      "AuthTokenTokenType": {
        "docs": "The type of the issued token. Bearer is the only supported token type.
",
        "type": "literal<"bearer">",
      },
      "AuthTokensCreateResponse": {
        "docs": "Response for the request to create a new token corresponding to the
requested token type.
",
        "properties": {
          "access_token": {
            "docs": "The issued JSON Web Token (JWT) corresponding to the requested
token type.
",
            "type": "string",
          },
          "client_id": {
            "docs": "An identifier that represents the application which is requesting
the token. Only present in a response corresponding to an
application access token (AAT).
",
            "type": "optional<string>",
          },
          "expires_in": {
            "docs": "The validity lifetime of the token specified in seconds since Unix
epoch.
",
            "type": "long",
          },
          "refresh_token": {
            "docs": "A token to refresh the issued token.",
            "type": "optional<string>",
          },
          "scope": {
            "docs": "The scopes associated with the issued token. A space-delimited list
of values in which the order of values does not matter.
",
            "type": "optional<string>",
          },
          "token_type": "AuthTokenTokenType",
        },
      },
      "AuthTokensGetResponse": {
        "docs": "The response to get the token metadata.",
        "properties": {
          "token": "AuthToken",
        },
      },
      "AuthTokensListResponse": {
        "docs": "The response to list the token metadata.",
        "properties": {
          "tokens": {
            "docs": "The list of token metadata.",
            "type": "list<AuthToken>",
          },
        },
      },
      "AuthTokensOrgTraits": {
        "docs": "Carries Rev org info.",
        "properties": {
          "display_name": {
            "docs": "The display name of the Rev org.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "The domain of the Rev org.",
            "type": "optional<string>",
          },
        },
      },
      "AuthTokensRevInfo": {
        "docs": "Carries info corresponding to the Rev user to be provisioned and/or
issue a Rev session token.
",
        "properties": {
          "org_ref": {
            "docs": "An identifier which uniquely identifies a Rev org.",
            "type": "optional<string>",
          },
          "org_traits": "optional<AuthTokensOrgTraits>",
          "rev_user_id": {
            "docs": "The unique ID of the Rev user.",
            "type": "optional<string>",
          },
          "user_ref": {
            "docs": "An identifier which uniquely identifies a Rev user.",
            "type": "string",
          },
          "user_traits": "optional<AuthTokensUserTraits>",
        },
      },
      "AuthTokensUpdateResponse": {
        "docs": "Response for the request to update the token metadata.",
        "properties": {
          "token": "AuthToken",
        },
      },
      "AuthTokensUserTraits": {
        "docs": "Carries Rev user info.",
        "properties": {
          "display_name": {
            "docs": "The display name of the Rev user.",
            "type": "optional<string>",
          },
          "email": {
            "docs": "The email address of the Rev user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "The full name of the Rev user.",
            "type": "optional<string>",
          },
        },
      },
      "Capability": "PartBase",
      "CapabilitySummary": "PartBaseSummary",
      "DevOrgAuthConnectionsCreateRequest": {
        "base-properties": {
          "display_name": {
            "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
        },
        "discriminant": "type",
        "docs": "Request to create a new enterprise authentication connection.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "DevOrgAuthConnectionsCreateRequestType": {
        "docs": "Defines the type for the authentication connection. Different types of
authentication connections have different configuration parameters.
",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "waad",
        ],
      },
      "DevOrgAuthConnectionsCreateResponse": {
        "docs": "Response for the request to create a new enterprise authentication
connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevOrgAuthConnectionsGetResponse": {
        "docs": "Response object encapsulating the configuration details of an
authentication connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevOrgAuthConnectionsListResponse": {
        "docs": "Response object for the request to list all the social and enterprise
authentication connections configured for a Dev organization.
",
        "properties": {
          "auth_connections": {
            "docs": "List of all the authentication connections currently configured for
a Dev organization.
",
            "type": "list<AuthConnection>",
          },
        },
      },
      "DevOrgAuthConnectionsUpdateRequest": {
        "base-properties": {
          "display_name": {
            "docs": "New display name of the authentication connection. This name will
be visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
          "id": {
            "docs": "ID of the authentication connection which is to be updated.
",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "none": "empty",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "DevOrgAuthConnectionsUpdateRequestType": {
        "docs": "Specifies the type for the authentication connection. Different types
of authentication connections have different configuration parameters
that can be updated.
",
        "enum": [
          "google_apps",
          "none",
          "oidc",
          "samlp",
          "waad",
        ],
      },
      "DevOrgAuthConnectionsUpdateResponse": {
        "docs": "Response for the request to update an enterprise authentication
connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevUser": {
        "docs": undefined,
        "extends": [
          "UserBase",
        ],
        "properties": {
          "external_identities": {
            "docs": "IDs of the Dev User outside the DevRev SOR.",
            "type": "optional<list<ExternalIdentity>>",
          },
        },
      },
      "DevUserSummary": "UserBaseSummary",
      "DevUsersListResponse": {
        "docs": "The response to listing the Dev users.",
        "properties": {
          "dev_users": {
            "docs": "The list of Dev users.",
            "type": "list<DevUser>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "DevUsersSelfResponse": {
        "docs": "The response to getting the information for the authenticated user.
",
        "properties": {
          "dev_user": "DevUser",
        },
      },
      "EnhancementSummary": "PartBaseSummary",
      "ErrorBadRequest": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorBadRequestBadRequest": "map<string, unknown>",
      "ErrorBadRequestInvalidEnumValue": {
        "docs": undefined,
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the field.",
            "type": "list<string>",
          },
          "field_name": {
            "docs": "The field whose enum value is invalid.",
            "type": "string",
          },
          "value": {
            "docs": "The value that was received.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestMissingRequiredField": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The missing field's name.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestParseError": "map<string, unknown>",
      "ErrorBadRequestType": {
        "enum": [
          "bad_request",
          "invalid_enum_value",
          "missing_required_field",
          "parse_error",
          "value_not_permitted",
        ],
      },
      "ErrorBadRequestValueNotPermitted": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The field whose value is not permitted.",
            "type": "string",
          },
          "reason": {
            "docs": "The reason the value isn't permitted.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorBase": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "The message associated with the error.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorForbidden": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorForbiddenForbidden": "map<string, unknown>",
      "ErrorForbiddenType": "literal<"forbidden">",
      "ErrorInternalServerError": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorInternalServerErrorInternalError": "map<string, unknown>",
      "ErrorInternalServerErrorType": "literal<"internal_error">",
      "ErrorNotFound": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorNotFoundNotFound": "map<string, unknown>",
      "ErrorNotFoundType": "literal<"not_found">",
      "ErrorServiceUnavailable": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorServiceUnavailableServiceUnavailable": "map<string, unknown>",
      "ErrorServiceUnavailableType": "literal<"service_unavailable">",
      "ErrorTooManyRequests": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorTooManyRequestsTooManyRequests": "map<string, unknown>",
      "ErrorTooManyRequestsType": "literal<"too_many_requests">",
      "ErrorUnauthorized": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorUnauthorizedType": "literal<"unauthenticated">",
      "ErrorUnauthorizedUnauthenticated": "map<string, unknown>",
      "EventPartCreated": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "EventPartDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the part that was deleted.",
            "type": "string",
          },
        },
      },
      "EventPartUpdated": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "EventRevOrgCreated": {
        "docs": undefined,
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "EventRevOrgDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the Rev organization that was deleted.",
            "type": "string",
          },
        },
      },
      "EventRevOrgUpdated": {
        "docs": undefined,
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "EventTagCreated": {
        "docs": undefined,
        "properties": {
          "tag": "tag",
        },
      },
      "EventTagDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag that was deleted.",
            "type": "string",
          },
        },
      },
      "EventTagUpdated": {
        "docs": undefined,
        "properties": {
          "tag": "tag",
        },
      },
      "EventTimelineEntryCreated": {
        "docs": undefined,
        "properties": {
          "entry": "TimelineEntry",
        },
      },
      "EventTimelineEntryDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the timeline entry that was deleted.",
            "type": "string",
          },
        },
      },
      "EventTimelineEntryUpdated": {
        "docs": undefined,
        "properties": {
          "entry": "TimelineEntry",
        },
      },
      "EventWebhookCreated": {
        "docs": undefined,
        "properties": {
          "webhook": "webhook",
        },
      },
      "EventWebhookDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the webhook that was deleted.",
            "type": "string",
          },
        },
      },
      "EventWebhookUpdated": {
        "docs": undefined,
        "properties": {
          "webhook": "webhook",
        },
      },
      "EventWorkCreated": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "EventWorkDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the work that was deleted.",
            "type": "string",
          },
        },
      },
      "EventWorkUpdated": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "ExternalIdentity": {
        "docs": "External identity of a user.",
        "type": "map<string, unknown>",
      },
      "Feature": "PartBase",
      "FeatureSummary": "PartBaseSummary",
      "GroupSummary": "AtomBaseSummary",
      "IssuePriority": {
        "docs": "Priority of the work based upon impact and criticality.",
        "enum": [
          "p0",
          "p1",
          "p2",
          "p3",
        ],
      },
      "ListMode": {
        "docs": "The iteration mode to use. If "after", then entries after the provided
cursor will be returned, or if no cursor is provided, then from the
beginning. If "before", then entries before the provided cursor will be
returned, or if no cursor is provided, then from the end. Entries will
always be returned in the specified sort-by order.
",
        "enum": [
          "after",
          "before",
        ],
      },
      "OrgBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "display_name": {
            "docs": "Name of the Organization.",
            "type": "optional<string>",
          },
        },
      },
      "OrgBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "display_name": {
            "docs": "Name of the Organization.",
            "type": "optional<string>",
          },
        },
      },
      "OrgEnvironment": {
        "docs": "The environment of the Org. Defaults to 'production' if not specified.
",
        "enum": [
          "production",
          "staging",
          "test",
        ],
      },
      "OrgSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "rev_org": "RevOrgSummary",
        },
      },
      "OrgType": "literal<"rev_org">",
      "PartBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The attached artifacts.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "description": {
            "docs": "Description of the part.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
          "owned_by": {
            "docs": "The users that own the part.",
            "type": "list<UserSummary>",
          },
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
        },
      },
      "PartBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
        },
      },
      "PartSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "CapabilitySummary",
          "enhancement": "EnhancementSummary",
          "feature": "FeatureSummary",
          "product": "ProductSummary",
        },
      },
      "PartType": {
        "enum": [
          "capability",
          "enhancement",
          "feature",
          "product",
        ],
      },
      "PartsCreateRequest": {
        "base-properties": {
          "description": {
            "docs": "Description of the part.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
          "owned_by": {
            "docs": "The users that own the part.",
            "type": "list<string>",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "PartsCreateRequestCapability",
          "enhancement": "PartsCreateRequestEnhancement",
          "feature": "PartsCreateRequestFeature",
          "product": "PartsCreateRequestProduct",
        },
      },
      "PartsCreateRequestCapability": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent product for the capability.",
            "type": "list<string>",
          },
        },
      },
      "PartsCreateRequestEnhancement": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent part on which the enhancement is to be created.
",
            "type": "list<string>",
          },
          "target_close_date": {
            "docs": "Target close date by which enhancement is expected to be closed.
",
            "type": "optional<datetime>",
          },
        },
      },
      "PartsCreateRequestFeature": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent capability/feature for the feature.",
            "type": "list<string>",
          },
        },
      },
      "PartsCreateRequestProduct": "map<string, unknown>",
      "PartsCreateResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "PartsDeleteResponse": "map<string, unknown>",
      "PartsGetResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "PartsListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "parts": {
            "docs": "The list of parts.",
            "type": "list<part>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "PartsUpdateRequest": {
        "base-properties": {
          "description": {
            "docs": "The updated description of the part.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of the part to update.",
            "type": "string",
          },
          "name": {
            "docs": "The updated name of the part.",
            "type": "optional<string>",
          },
          "owned_by": "optional<PartsUpdateRequestOwnedBy>",
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "PartsUpdateRequestCapability",
          "enhancement": "PartsUpdateRequestEnhancement",
          "feature": "PartsUpdateRequestFeature",
          "none": "empty",
          "product": "PartsUpdateRequestProduct",
        },
      },
      "PartsUpdateRequestCapability": "map<string, unknown>",
      "PartsUpdateRequestEnhancement": {
        "docs": undefined,
        "properties": {
          "target_close_date": {
            "docs": "Updates the target close date of the enhancement.",
            "type": "optional<datetime>",
          },
        },
      },
      "PartsUpdateRequestFeature": "map<string, unknown>",
      "PartsUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "PartsUpdateRequestProduct": "map<string, unknown>",
      "PartsUpdateResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "Product": "PartBase",
      "ProductSummary": "PartBaseSummary",
      "RevOrg": {
        "docs": undefined,
        "extends": [
          "OrgBase",
        ],
        "properties": {
          "description": {
            "docs": "Description of the Rev organization.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "type": "optional<string>",
          },
          "external_ref": {
            "docs": "External ref is a unique identifier for the Rev (customer)
organization from your primary customer system of records. If none
is specified, a system-generated identifier will be assigned to the
organization.
",
            "type": "optional<string>",
          },
        },
      },
      "RevOrgSummary": "OrgBaseSummary",
      "RevOrgsCreateResponse": {
        "docs": "Response object for request to create a new Rev organization.
",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevOrgsDeleteResponse": {
        "docs": "The response to deleting a Rev organization.",
        "type": "map<string, unknown>",
      },
      "RevOrgsGetResponse": {
        "docs": "The response to getting a Rev organization's information.",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevOrgsListResponse": {
        "docs": "The response to getting a list of Rev organizations' information.
",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "rev_orgs": {
            "docs": "List with all of the Rev organizations' information.",
            "type": "list<RevOrg>",
          },
        },
      },
      "RevOrgsUpdateResponse": {
        "docs": "Response object to updating Rev organization's information.",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevUserSummary": {
        "docs": undefined,
        "extends": [
          "UserBaseSummary",
        ],
        "properties": {
          "external_ref": {
            "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
            "type": "optional<string>",
          },
          "rev_org": "optional<OrgSummary>",
        },
      },
      "SetTagWithValue": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag.",
            "type": "string",
          },
          "value": {
            "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
            "type": "optional<string>",
          },
        },
      },
      "StageInit": {
        "docs": "Sets an object's initial stage.",
        "properties": {
          "name": {
            "docs": "The name of the stage.",
            "type": "optional<string>",
          },
        },
      },
      "StageUpdate": {
        "docs": "Updates an object's stage.",
        "properties": {
          "name": {
            "docs": "The updated name of the stage, otherwise unchanged if not set.
",
            "type": "optional<string>",
          },
        },
      },
      "SysUserSummary": "UserBaseSummary",
      "TagSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
            "type": "string",
          },
        },
      },
      "TagWithValue": {
        "docs": undefined,
        "properties": {
          "tag": "TagSummary",
          "value": {
            "docs": "The value for the object's association with the tag.",
            "type": "optional<string>",
          },
        },
      },
      "TagsCreateResponse": {
        "docs": "The response to creating a new tag.",
        "properties": {
          "tag": "tag",
        },
      },
      "TagsDeleteResponse": {
        "docs": "The response for deleting a tag.",
        "type": "map<string, unknown>",
      },
      "TagsGetResponse": {
        "docs": "The response to getting a tag's information.",
        "properties": {
          "tag": "tag",
        },
      },
      "TagsListResponse": {
        "docs": "The response to listing the tags.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "The list of tags.",
            "type": "list<tag>",
          },
        },
      },
      "TagsUpdateAllowedValues": {
        "docs": "Specifies an update to a tag's allowed values.",
        "properties": {
          "set": {
            "docs": "Sets the allowed values for the tag.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TagsUpdateResponse": {
        "docs": "The response for updating a tag.",
        "properties": {
          "tag": "tag",
        },
      },
      "TicketSeverity": {
        "docs": "Severity of the ticket.",
        "enum": [
          "blocker",
          "high",
          "low",
          "medium",
        ],
      },
      "TimelineComment": {
        "docs": undefined,
        "extends": [
          "TimelineEntryBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The artifacts for the comment.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "body": {
            "docs": "The comment's body. If the comment has been deleted, then no body
will appear in the response.
",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": {
            "docs": "The SnapKit Body of the comment.",
            "type": "optional<map<string, unknown>>",
          },
        },
      },
      "TimelineCommentBodyType": {
        "docs": "The type of the body to use for the comment.",
        "enum": [
          "snap_kit",
          "text",
        ],
      },
      "TimelineEntriesCreateRequest": {
        "base-properties": {
          "object": {
            "docs": "The ID of the object to create the timeline entry for.",
            "type": "string",
          },
          "visibility": "optional<TimelineEntryVisibility>",
        },
        "discriminant": "type",
        "docs": "The request to create a timeline entry for an object.",
        "union": {
          "timeline_comment": "TimelineEntriesCreateRequestTimelineComment",
        },
      },
      "TimelineEntriesCreateRequestTimelineComment": {
        "docs": undefined,
        "properties": {
          "artifacts": {
            "docs": "The IDs of the artifacts attached to the comment.",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "The comment's body.",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": {
            "docs": "The SnapKit body of the comment.",
            "type": "optional<map<string, unknown>>",
          },
        },
      },
      "TimelineEntriesCreateRequestType": "literal<"timeline_comment">",
      "TimelineEntriesCreateResponse": {
        "docs": "The response to creating a timeline entry for an object.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntriesGetResponse": {
        "docs": "The request to getting a timeline entry.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntriesListResponse": {
        "docs": "The response to listing timeline entries for an object.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "timeline_entries": {
            "docs": "The timeline entries for the object.",
            "type": "list<TimelineEntry>",
          },
        },
      },
      "TimelineEntriesUpdateRequest": {
        "base-properties": {
          "id": {
            "docs": "The ID of the timeline entry to update.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "The request to update a timeline entry.",
        "union": {
          "timeline_comment": "TimelineEntriesUpdateRequestTimelineComment",
        },
      },
      "TimelineEntriesUpdateRequestTimelineComment": {
        "docs": undefined,
        "properties": {
          "artifacts": "optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>",
          "body": {
            "docs": "The updated comment's body.",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": {
            "docs": "The SnapKit body of the comment.",
            "type": "optional<map<string, unknown>>",
          },
        },
      },
      "TimelineEntriesUpdateRequestTimelineCommentArtifacts": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "Adds the provided artifacts to the comment. An artifact cannot be
added more than once, i.e. nothing is done if the artifact is
already attached. Mutually exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "remove": {
            "docs": "Removes the provided artifacts from the comment. If an artifact is
not present, then it's ignored. Mututally exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "set": {
            "docs": "Sets the field to the provided artifacts.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TimelineEntriesUpdateRequestType": "literal<"timeline_comment">",
      "TimelineEntriesUpdateResponse": {
        "docs": "The response to updating a timeline entry.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntry": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "timeline_comment": "TimelineComment",
        },
      },
      "TimelineEntryBase": "AtomBase",
      "TimelineEntryType": "literal<"timeline_comment">",
      "TimelineEntryVisibility": {
        "docs": "The visibility of the entry. If 'private', then the entry is only
visible to the creator, otherwise if not set, then the entry has
default visibility.
",
        "type": "literal<"private">",
      },
      "UserBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "display_name": {
            "docs": "The user's display name. The name is non-unique and mutable.
",
            "type": "optional<string>",
          },
          "display_picture": "optional<ArtifactSummary>",
          "email": {
            "docs": "Email address of the user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "Full name of the user.",
            "type": "optional<string>",
          },
          "phone_numbers": {
            "docs": "Phone numbers of the user.",
            "type": "optional<list<string>>",
          },
          "state": "optional<UserState>",
        },
      },
      "UserBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "display_name": {
            "docs": "The user's display name. The name is non-unique and mutable.
",
            "type": "optional<string>",
          },
          "display_picture": "optional<ArtifactSummary>",
          "email": {
            "docs": "Email address of the user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "Full name of the user.",
            "type": "optional<string>",
          },
          "state": "optional<UserState>",
        },
      },
      "UserState": {
        "docs": "State of the user.",
        "enum": [
          "active",
          "deactivated",
          "locked",
          "shadow",
          "unassigned",
        ],
      },
      "UserSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "dev_user": "DevUserSummary",
          "rev_user": "RevUserSummary",
          "sys_user": "SysUserSummary",
        },
      },
      "UserType": {
        "enum": [
          "dev_user",
          "rev_user",
          "sys_user",
        ],
      },
      "WebhookEventRequest": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The event's ID.",
            "type": "string",
          },
          "part_created": "optional<EventPartCreated>",
          "part_deleted": "optional<EventPartDeleted>",
          "part_updated": "optional<EventPartUpdated>",
          "rev_org_created": "optional<EventRevOrgCreated>",
          "rev_org_deleted": "optional<EventRevOrgDeleted>",
          "rev_org_updated": "optional<EventRevOrgUpdated>",
          "tag_created": "optional<EventTagCreated>",
          "tag_deleted": "optional<EventTagDeleted>",
          "tag_updated": "optional<EventTagUpdated>",
          "timeline_entry_created": "optional<EventTimelineEntryCreated>",
          "timeline_entry_deleted": "optional<EventTimelineEntryDeleted>",
          "timeline_entry_updated": "optional<EventTimelineEntryUpdated>",
          "timestamp": {
            "docs": "Timestamp of the webhook's invocation for the event. Note this
should be used to protect against replay attacks, where the event
should only be processed if the timestamp isn't stale by several
seconds.
",
            "type": "optional<datetime>",
          },
          "type": "optional<WebhookEventType>",
          "verify": "optional<WebhookEventVerify>",
          "webhook_created": "optional<EventWebhookCreated>",
          "webhook_deleted": "optional<EventWebhookDeleted>",
          "webhook_id": {
            "docs": "ID of the webhook for the event.",
            "type": "string",
          },
          "webhook_updated": "optional<EventWebhookUpdated>",
          "work_created": "optional<EventWorkCreated>",
          "work_deleted": "optional<EventWorkDeleted>",
          "work_updated": "optional<EventWorkUpdated>",
        },
      },
      "WebhookEventResponse": {
        "docs": undefined,
        "properties": {
          "challenge": {
            "docs": "The challenge from the "verify" request, otherwise this should not
be set for other request types.
",
            "type": "optional<string>",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "WebhookEventType": {
        "docs": "The event types that the webhook will receive.",
        "enum": [
          "part_created",
          "part_deleted",
          "part_updated",
          "rev_org_created",
          "rev_org_deleted",
          "rev_org_updated",
          "tag_created",
          "tag_deleted",
          "tag_updated",
          "timeline_entry_created",
          "timeline_entry_deleted",
          "timeline_entry_updated",
          "verify",
          "webhook_created",
          "webhook_deleted",
          "webhook_updated",
          "work_created",
          "work_deleted",
          "work_updated",
        ],
      },
      "WebhookEventVerify": {
        "docs": undefined,
        "properties": {
          "challenge": {
            "docs": "The challenge that must be echoed in the response.",
            "type": "string",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "WebhookStatus": {
        "docs": "The status of the webhook.",
        "enum": [
          "active",
          "inactive",
          "unverified",
        ],
      },
      "WebhooksCreateResponse": {
        "docs": "The response to creating a new webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WebhooksDeleteResponse": {
        "docs": "The response to deleting the webhook.",
        "type": "map<string, unknown>",
      },
      "WebhooksGetResponse": {
        "docs": "The response to getting the information for the webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WebhooksListResponse": {
        "docs": "The response to listing the webhooks.",
        "properties": {
          "webhooks": {
            "docs": "The list of webhooks.",
            "type": "list<webhook>",
          },
        },
      },
      "WebhooksUpdateAction": {
        "docs": "The action to update the webhook's status.",
        "enum": [
          "activate",
          "deactivate",
        ],
      },
      "WebhooksUpdateRequestEventTypes": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "The event types to add. If a provided event type is already set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
            "type": "optional<list<WebhookEventType>>",
          },
          "remove": {
            "docs": "The event types to remove. If a provided event type isn't set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
            "type": "optional<list<WebhookEventType>>",
          },
          "set": {
            "docs": "The updated event types, which will replace the webhook's current
event types. Note this is mutually exclusive with 'add' and
'remove'.
",
            "type": "optional<list<WebhookEventType>>",
          },
        },
      },
      "WebhooksUpdateResponse": {
        "docs": "The response to updating the webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WorkBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "applies_to_part": "optional<PartSummary>",
          "artifacts": {
            "docs": "The artifacts attached to the work item.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "body": {
            "docs": "Body of the work object.",
            "type": "optional<string>",
          },
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<UserSummary>",
          },
          "reported_by": {
            "docs": "Users that reported the work.",
            "type": "optional<list<UserSummary>>",
          },
          "stage": "optional<stage>",
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
          "target_close_date": {
            "docs": "Timestamp when the work is expected to be complete.",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
      },
      "WorkType": {
        "enum": [
          "issue",
          "ticket",
        ],
      },
      "WorksCreateRequest": {
        "base-properties": {
          "applies_to_part": {
            "docs": "The [part](https://devrev.ai/docs/product/parts) that the work
applies to. Specifying a part is required when creating tickets and
issues.
",
            "type": "string",
          },
          "artifacts": {
            "docs": "The IDs of the artifacts to associate with the work item.
",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "Body of the work object.",
            "type": "optional<string>",
          },
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<string>",
          },
          "reported_by": {
            "docs": "The users that reported the work.",
            "type": "optional<list<string>>",
          },
          "stage": "optional<StageInit>",
          "tags": {
            "docs": "Tags associated with the work item.",
            "type": "optional<list<SetTagWithValue>>",
          },
          "target_close_date": {
            "docs": "Timestamp for when the work is expected to be complete.",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "WorksCreateRequestIssue",
          "ticket": "WorksCreateRequestTicket",
        },
      },
      "WorksCreateRequestIssue": {
        "docs": undefined,
        "properties": {
          "priority": "optional<IssuePriority>",
          "sprint": {
            "docs": "The sprint that the issue belongs to.",
            "type": "optional<string>",
          },
        },
      },
      "WorksCreateRequestTicket": {
        "docs": undefined,
        "properties": {
          "group": {
            "docs": "The group that the ticket is associated with.",
            "type": "optional<string>",
          },
          "rev_org": {
            "docs": "The Rev organization that the ticket is associated with.",
            "type": "optional<string>",
          },
          "severity": "optional<TicketSeverity>",
        },
      },
      "WorksCreateResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "WorksDeleteResponse": "map<string, unknown>",
      "WorksExportResponse": {
        "docs": undefined,
        "properties": {
          "works": {
            "docs": "The resulting collection of work items.",
            "type": "list<work>",
          },
        },
      },
      "WorksGetResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "WorksListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "works": {
            "docs": "The list of works.",
            "type": "list<work>",
          },
        },
      },
      "WorksUpdateRequest": {
        "base-properties": {
          "applies_to_part": {
            "docs": "Updates the part that the work applies to.",
            "type": "optional<string>",
          },
          "artifacts": "optional<WorksUpdateRequestArtifactIds>",
          "body": {
            "docs": "Updated body of the work object, or unchanged if not provided.
",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The work's ID.",
            "type": "string",
          },
          "owned_by": "optional<WorksUpdateRequestOwnedBy>",
          "reported_by": "optional<WorksUpdateRequestReportedBy>",
          "stage": "optional<StageUpdate>",
          "tags": "optional<WorksUpdateRequestTags>",
          "target_close_date": {
            "docs": "Updates the timestamp for when the work is expected to be complete.
",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Updated title of the work object, or unchanged if not provided.
",
            "type": "optional<string>",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "WorksUpdateRequestIssue",
          "none": "empty",
          "ticket": "WorksUpdateRequestTicket",
        },
      },
      "WorksUpdateRequestArtifactIds": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestIssue": {
        "docs": undefined,
        "properties": {
          "priority": "optional<IssuePriority>",
          "sprint": {
            "docs": "Updates the sprint that the issue belongs to.",
            "type": "optional<string>",
          },
        },
      },
      "WorksUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestReportedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the users that reported the work to the provided user IDs.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestTags": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the provided tags on the work item.",
            "type": "optional<list<SetTagWithValue>>",
          },
        },
      },
      "WorksUpdateRequestTicket": {
        "docs": undefined,
        "properties": {
          "group": {
            "docs": "The group that the ticket is associated with.",
            "type": "optional<string>",
          },
          "rev_org": {
            "docs": "Updates the Rev organization that the ticket is associated with.
",
            "type": "optional<string>",
          },
          "severity": "optional<TicketSeverity>",
        },
      },
      "WorksUpdateResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "empty": "map<string, unknown>",
      "enhancement": {
        "docs": undefined,
        "extends": [
          "PartBase",
        ],
        "properties": {
          "target_close_date": {
            "docs": "Timestamp when the enhancement is expected to be closed.",
            "type": "optional<datetime>",
          },
        },
      },
      "issue": {
        "docs": undefined,
        "extends": [
          "WorkBase",
        ],
        "properties": {
          "priority": "optional<IssuePriority>",
        },
      },
      "part": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "Capability",
          "enhancement": "enhancement",
          "feature": "Feature",
          "product": "Product",
        },
      },
      "stage": {
        "docs": "Describes the current stage of a work item.",
        "properties": {
          "name": {
            "docs": "Current stage name of the work item.",
            "type": "string",
          },
        },
      },
      "tag": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the tag, where a value is provided when a
tag is associated with an object. If empty, then no value should be
provided when the association is made.
",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "An informative description for the tag that should provide context
on the tag's purpose and usage.
",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
            "type": "string",
          },
        },
      },
      "ticket": {
        "docs": undefined,
        "extends": [
          "WorkBase",
        ],
        "properties": {
          "group": "optional<GroupSummary>",
          "rev_org": "optional<OrgSummary>",
          "severity": "optional<TicketSeverity>",
        },
      },
      "webhook": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "event_types": {
            "docs": "The event types that the webhook will receive.",
            "type": "optional<list<WebhookEventType>>",
          },
          "secret": {
            "docs": "The secret to use for verifying webhook events.",
            "type": "string",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "status": "WebhookStatus",
          "url": {
            "docs": "The URL of the webhook endpoint.",
            "type": "string",
          },
        },
      },
      "work": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "issue",
          "ticket": "ticket",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "auth-token",
    "auth-schemes": {
      "auth-token": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Default",
    "display-name": "DevRev REST API",
    "environments": {
      "Default": "https://api.devrev.ai",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
