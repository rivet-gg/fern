// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser valtown docs 1`] = `
{
  "definitionFiles": {
    "alias.yml": {
      "docs": "Many API endpoints
accept IDs instead of user-facing names. The alias
endpoints let you convert between the user-facing name of a
val or another object into an ID that can be used with other
API endpoints",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "alias",
        "endpoints": {
          "username": {
            "auth": false,
            "docs": "Get basic details about a user, given their username",
            "examples": [
              {
                "path-parameters": {
                  "username": "username",
                },
                "response": {
                  "body": {
                    "bio": "bio",
                    "id": "id",
                    "links": {
                      "self": "self",
                    },
                    "profileImageUrl": "profileImageUrl",
                    "url": "url",
                    "username": "username",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/alias/{username}",
            "path-parameters": {
              "username": {
                "docs": "Username of the user who you are looking for",
                "type": "string",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.User",
            },
          },
          "val": {
            "auth": false,
            "docs": "Get a val",
            "examples": [
              {
                "path-parameters": {
                  "username": "username",
                  "val_name": "val_name",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/alias/{username}/{val_name}",
            "path-parameters": {
              "username": {
                "docs": "Username of the user whose val you are looking for",
                "type": "string",
              },
              "val_name": {
                "docs": "Name of the val you’re looking for",
                "type": "string",
              },
            },
            "response": {
              "docs": "A Val",
              "type": "AliasValResponse",
            },
          },
        },
      },
      "types": {
        "AliasValResponse": {
          "docs": "A Val",
          "properties": {
            "author": {
              "docs": "The user who created this val",
              "type": "optional<AliasValResponseAuthor>",
            },
            "code": {
              "docs": "TypeScript code associated with this val",
              "type": "optional<string>",
            },
            "createdAt": "datetime",
            "id": {
              "docs": "This val’s id",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "likeCount": {
              "docs": "How many likes this val has received",
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
            "links": "AliasValResponseLinks",
            "name": {
              "docs": "The name of this val",
              "type": "string",
            },
            "privacy": {
              "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
              "type": "AliasValResponsePrivacy",
            },
            "public": {
              "docs": "Whether this val is available publicly on Val Town",
              "type": "boolean",
            },
            "readme": {
              "docs": "This val’s readme, as Markdown",
              "type": "optional<string>",
            },
            "referenceCount": {
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
            "type": {
              "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
              "type": "AliasValResponseType",
            },
            "url": {
              "docs": "The URL of this val on the Val Town website",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "version": {
              "docs": "The version of this val, starting at zero",
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
          },
        },
        "AliasValResponseAuthor": {
          "docs": "The user who created this val",
          "properties": {
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": "optional<string>",
          },
        },
        "AliasValResponseLinks": {
          "docs": undefined,
          "properties": {
            "module": {
              "docs": "The URL of this Val’s source code as a module",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "self": {
              "docs": "The URL of this val on this API",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "versions": {
              "docs": "The endpoint to retrieve this val’s versions",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
          },
        },
        "AliasValResponsePrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "AliasValResponseType": {
          "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
          "enum": [
            "interval",
            "http",
            "express",
            "email",
            "script",
            "rpc",
            "httpnext",
          ],
        },
      },
    },
    "blobs.yml": {
      "docs": "Blobs",
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "blobs",
        "endpoints": {
          "delete": {
            "auth": true,
            "docs": "Delete a blob",
            "examples": [
              {
                "path-parameters": {
                  "key": "key",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/blob/{key}",
            "path-parameters": {
              "key": {
                "docs": "Key that uniquely identifies this blob",
                "type": "string",
              },
            },
          },
          "get": {
            "auth": false,
            "docs": "Get a blob’s contents.",
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/blob/{key}",
            "path-parameters": {
              "key": {
                "docs": "Key that uniquely identifies this blob",
                "type": "string",
              },
            },
            "response": {
              "docs": "Binary contents of the returned file",
              "type": "file",
            },
          },
          "list": {
            "auth": false,
            "docs": "List blobs in your account",
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "key": "hello_world",
                      "lastModified": "2024-06-24T20:00:59Z",
                      "size": 20,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/blob",
            "request": {
              "name": "BlobsListRequest",
              "query-parameters": {
                "prefix": {
                  "docs": "If specified, only include blobs that start with this string",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of blobs that you’ve stored",
              "type": "list<BlobListingItem>",
            },
          },
          "store": {
            "auth": true,
            "docs": "Store data in blob storage",
            "examples": [
              {
                "path-parameters": {
                  "key": "key",
                },
                "request": "string",
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/blob/{key}",
            "path-parameters": {
              "key": {
                "docs": "Key that uniquely identifies this blob",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": "Binary input data",
                "type": "string",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
          },
        },
      },
      "types": {
        "BlobListingItem": {
          "docs": undefined,
          "properties": {
            "key": "string",
            "lastModified": {
              "docs": "Creation date of the object",
              "type": "optional<datetime>",
            },
            "size": {
              "docs": "Size in bytes of the object",
              "type": "optional<integer>",
            },
          },
        },
      },
    },
    "emails.yml": {
      "docs": "Emails",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "emails",
        "endpoints": {
          "send": {
            "auth": true,
            "docs": "Send emails",
            "errors": [
              "root.EmailsSendRequestInternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "html": "Hello <strong>world</strong>",
                  "subject": "An important message",
                  "text": "Hello world",
                },
                "response": {
                  "body": {
                    "message": "message",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/email",
            "request": {
              "body": {
                "properties": {
                  "attachments": {
                    "docs": "A list of attachments to add to the email",
                    "type": "optional<list<AttachmentObject>>",
                  },
                  "bcc": {
                    "docs": "A single email or list of emails for one of the address fields",
                    "type": "optional<EmailDataInput>",
                  },
                  "cc": {
                    "docs": "A single email or list of emails for one of the address fields",
                    "type": "optional<EmailDataInput>",
                  },
                  "from": "optional<EmailData>",
                  "html": {
                    "docs": "HTML content of the email. Can be specified alongside text",
                    "type": "optional<string>",
                  },
                  "replyToList": {
                    "docs": "A reply-to list of email addresses",
                    "type": "optional<ReplyToList>",
                  },
                  "subject": {
                    "docs": "The subject line of the email",
                    "type": "optional<string>",
                  },
                  "text": {
                    "docs": "Text content of the email, for email clients that may not support HTML",
                    "type": "optional<string>",
                  },
                  "to": {
                    "docs": "A single email or list of emails for one of the address fields",
                    "type": "optional<EmailDataInput>",
                  },
                },
              },
              "headers": undefined,
              "name": "EmailsSendRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successfully sent email",
              "type": "EmailsSendResponse",
            },
          },
        },
      },
      "types": {
        "AttachmentObject": {
          "docs": undefined,
          "properties": {
            "content": "string",
            "contentId": "optional<string>",
            "disposition": "optional<string>",
            "filename": "string",
            "type": "optional<string>",
          },
        },
        "EmailData": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            {
              "docs": "An email address and name",
              "type": "EmailNameAndAddress",
            },
          ],
        },
        "EmailDataInput": {
          "discriminated": false,
          "docs": "A single email or list of emails for one of the address fields",
          "union": [
            "EmailData",
            "list<EmailData>",
          ],
        },
        "EmailNameAndAddress": {
          "docs": "An email address and name",
          "properties": {
            "email": "string",
            "name": "optional<string>",
          },
        },
        "EmailsSendResponse": {
          "docs": "Successfully sent email",
          "properties": {
            "message": "string",
          },
        },
        "ReplyToList": {
          "discriminated": false,
          "docs": "A reply-to list of email addresses",
          "union": [
            {
              "docs": "An email address and name",
              "type": "EmailNameAndAddress",
            },
            "list<EmailNameAndAddress>",
          ],
        },
      },
    },
    "me.yml": {
      "docs": "These endpoints
give access to details and data from the requesting user.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "me",
        "endpoints": {
          "comments": {
            "auth": false,
            "docs": "Get comments related to current user, either given or received",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                  "relationship": "any",
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "comment": "comment",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "val": {
                          "id": "id",
                          "name": "name",
                          "privacy": "public",
                          "version": 1,
                        },
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me/comments",
            "request": {
              "name": "MeCommentsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
                "relationship": {
                  "docs": "Whether to get comments you have received, given, or both",
                  "type": "MeCommentsRequestRelationship",
                },
                "since": {
                  "docs": "Include items created after this date",
                  "type": "optional<datetime>",
                },
                "until": {
                  "docs": "Include items created before this date",
                  "type": "optional<datetime>",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "MeCommentsResponse",
            },
          },
          "get": {
            "auth": false,
            "docs": "Get profile information for the current user",
            "examples": [
              {
                "response": {
                  "body": {
                    "bio": "Hello world",
                    "email": "example@example.com",
                    "id": "00000000-0000-0000-0000-000000000000",
                    "links": {
                      "self": "self",
                    },
                    "profileImageUrl": "profileImageUrl",
                    "tier": "pro",
                    "url": "url",
                    "username": "tmcw",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me",
            "response": {
              "docs": "Your user information, with tier and email included",
              "type": "MeGetResponse",
            },
          },
          "likes": {
            "auth": false,
            "docs": "Get vals liked by the current user",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "code": "code",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "links": {
                          "module": "module",
                          "self": "self",
                          "versions": "versions",
                        },
                        "name": "name",
                        "privacy": "public",
                        "public": true,
                        "type": "interval",
                        "url": "url",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me/likes",
            "request": {
              "name": "MeLikesRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "MeLikesResponse",
            },
          },
          "references": {
            "auth": false,
            "docs": "Get vals that depend on any of the user's vals",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "dependsOn": {
                          "id": "id",
                          "name": "name",
                        },
                        "reference": {
                          "id": "id",
                          "name": "name",
                        },
                        "referencedAt": "2024-01-15T09:30:00Z",
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me/references",
            "request": {
              "name": "MeReferencesRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
                "since": {
                  "docs": "Include items created after this date",
                  "type": "optional<datetime>",
                },
                "until": {
                  "docs": "Include items created before this date",
                  "type": "optional<datetime>",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "MeReferencesResponse",
            },
          },
        },
      },
      "types": {
        "MeCommentsRequestRelationship": {
          "default": "any",
          "enum": [
            "any",
            "received",
            "given",
          ],
        },
        "MeCommentsResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<MeCommentsResponseDataItem>",
            "links": "root.PaginationLinks",
          },
        },
        "MeCommentsResponseDataItem": {
          "docs": undefined,
          "properties": {
            "author": "MeCommentsResponseDataItemAuthor",
            "comment": {
              "docs": "Text of the given comment, in Markdown",
              "type": "string",
            },
            "createdAt": "datetime",
            "id": {
              "docs": "The comment’s id",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "val": "MeCommentsResponseDataItemVal",
          },
        },
        "MeCommentsResponseDataItemAuthor": {
          "docs": undefined,
          "properties": {
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": "optional<string>",
          },
        },
        "MeCommentsResponseDataItemVal": {
          "docs": undefined,
          "properties": {
            "author": {
              "docs": "The user who created this val",
              "type": "optional<MeCommentsResponseDataItemValAuthor>",
            },
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "name": {
              "docs": "Name of the val that is being commented on",
              "type": "string",
            },
            "privacy": {
              "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
              "type": "MeCommentsResponseDataItemValPrivacy",
            },
            "version": {
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
          },
        },
        "MeCommentsResponseDataItemValAuthor": {
          "docs": "The user who created this val",
          "properties": {
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": "optional<string>",
          },
        },
        "MeCommentsResponseDataItemValPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "MeGetResponse": {
          "docs": "Your user information, with tier and email included",
          "properties": {
            "bio": {
              "docs": "The user’s biography, if they have provided one",
              "type": "optional<string>",
            },
            "email": {
              "docs": "Your email address",
              "type": "string",
            },
            "id": {
              "docs": "The ID of this user",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "links": "MeGetResponseLinks",
            "profileImageUrl": {
              "docs": "URL that points to the user’s profile image, if one exists",
              "type": "optional<string>",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "tier": {
              "docs": "Your account tier",
              "type": "optional<MeGetResponseTier>",
            },
            "url": {
              "docs": "URL of this user’s profile on Val Town’s website",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": {
              "docs": "The user’s handle that they chose for themselves. Does not include the @ symbol",
              "type": "optional<string>",
            },
          },
        },
        "MeGetResponseLinks": {
          "docs": undefined,
          "properties": {
            "self": {
              "docs": "URL of this user on this API",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
          },
        },
        "MeGetResponseTier": {
          "docs": "Your account tier",
          "enum": [
            "free",
            "pro",
          ],
        },
        "MeLikesResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<root.BasicVal>",
            "links": "root.PaginationLinks",
          },
        },
        "MeReferencesResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<MeReferencesResponseDataItem>",
            "links": "root.PaginationLinks",
          },
        },
        "MeReferencesResponseDataItem": {
          "docs": "A description of a dependency from one val (reference) to another (dependsOn) that was introduced at a particular time.",
          "properties": {
            "dependsOn": {
              "docs": "A val in a dependency relationship",
              "type": "MeReferencesResponseDataItemDependsOn",
            },
            "reference": {
              "docs": "A val in a dependency relationship",
              "type": "MeReferencesResponseDataItemReference",
            },
            "referencedAt": "datetime",
          },
        },
        "MeReferencesResponseDataItemDependsOn": {
          "docs": "A val in a dependency relationship",
          "properties": {
            "author_id": {
              "docs": "The ID of the person who authored this val",
              "type": "optional<string>",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "id": {
              "docs": "The id of this val",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "name": {
              "docs": "The name of this val",
              "type": "string",
            },
            "username": {
              "docs": "The username of the person who authored this val",
              "type": "optional<string>",
            },
          },
        },
        "MeReferencesResponseDataItemReference": {
          "docs": "A val in a dependency relationship",
          "properties": {
            "author_id": {
              "docs": "The ID of the person who authored this val",
              "type": "optional<string>",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "id": {
              "docs": "The id of this val",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "name": {
              "docs": "The name of this val",
              "type": "string",
            },
            "username": {
              "docs": "The username of the person who authored this val",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "search.yml": {
      "docs": "Search",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "search",
        "endpoints": {
          "vals": {
            "auth": false,
            "docs": "Search for vals across the platform",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                  "query": "query",
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "code": "code",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "links": {
                          "module": "module",
                          "self": "self",
                          "versions": "versions",
                        },
                        "name": "name",
                        "privacy": "public",
                        "public": true,
                        "type": "interval",
                        "url": "url",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/search/vals",
            "request": {
              "name": "SearchValsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
                "query": {
                  "docs": "Search query",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "SearchValsResponse",
            },
          },
        },
      },
      "types": {
        "SearchValsResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<root.BasicVal>",
            "links": "root.PaginationLinks",
          },
        },
      },
    },
    "sqlite.yml": {
      "docs": "SQLite",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "sqlite",
        "endpoints": {
          "batch": {
            "auth": true,
            "docs": "Execute a batch of SQLite statements and return results for all of them",
            "examples": [
              {
                "request": {
                  "mode": "read",
                  "statements": [
                    "SELECT 1;",
                  ],
                },
                "response": {
                  "body": [
                    {
                      "columnTypes": [
                        "number",
                      ],
                      "columns": [
                        "id",
                      ],
                      "lastInsertRowid": "lastInsertRowid",
                      "rows": [
                        [
                          1,
                        ],
                      ],
                      "rowsAffected": 0,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/sqlite/batch",
            "request": {
              "body": {
                "properties": {
                  "mode": "optional<SqliteBatchRequestMode>",
                  "statements": "list<SqliteBatchRequestStatementsItem>",
                },
              },
              "headers": undefined,
              "name": "SqliteBatchRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Array of results from the statements executed",
              "type": "list<root.ResultSet>",
            },
          },
          "execute": {
            "auth": true,
            "docs": "Execute a single SQLite statement and return results",
            "examples": [
              {
                "name": "example1",
                "request": {
                  "statement": "SELECT 1;",
                },
                "response": {
                  "body": {
                    "columnTypes": [
                      "columnTypes",
                    ],
                    "columns": [
                      "columns",
                    ],
                    "lastInsertRowid": "lastInsertRowid",
                    "rows": [
                      [
                        {
                          "key": "value",
                        },
                      ],
                    ],
                    "rowsAffected": 1.1,
                  },
                },
              },
              {
                "name": "example2",
                "request": {
                  "statement": {
                    "args": [
                      1,
                    ],
                    "sql": "SELECT * FROM table WHERE column = ?;",
                  },
                },
                "response": {
                  "body": {
                    "columnTypes": [
                      "columnTypes",
                    ],
                    "columns": [
                      "columns",
                    ],
                    "lastInsertRowid": "lastInsertRowid",
                    "rows": [
                      [
                        {
                          "key": "value",
                        },
                      ],
                    ],
                    "rowsAffected": 1.1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/sqlite/execute",
            "request": {
              "body": {
                "properties": {
                  "statement": "SqliteExecuteRequestStatement",
                },
              },
              "headers": undefined,
              "name": "SqliteExecuteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ResultSet",
            },
          },
        },
      },
      "types": {
        "ParameterizedQuery": {
          "docs": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
          "properties": {
            "args": {
              "docs": "List of arguments to be used in the given statement",
              "type": "StatementArg",
            },
            "sql": {
              "docs": "SQL statement, with ? placeholders for arguments",
              "type": "string",
            },
          },
        },
        "SqliteBatchRequestMode": {
          "enum": [
            "write",
            "read",
            "deferred",
          ],
        },
        "SqliteBatchRequestStatementsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": "Simple SQL statement to run in SQLite",
              "type": "string",
            },
            {
              "docs": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
              "type": "ParameterizedQuery",
            },
          ],
        },
        "SqliteExecuteRequestStatement": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": "Simple SQL statement to run in SQLite",
              "type": "string",
            },
            {
              "docs": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
              "type": "ParameterizedQuery",
            },
          ],
        },
        "StatementArg": {
          "discriminated": false,
          "docs": "List of arguments to be used in the given statement",
          "union": [
            "list<optional<TursoValue>>",
            "map<string, optional<TursoValue>>",
          ],
        },
        "TursoValue": {
          "discriminated": false,
          "docs": "A value to be used as a parameter",
          "union": [
            "string",
            "double",
            "boolean",
          ],
        },
      },
    },
    "users.yml": {
      "docs": "Users",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "users",
        "endpoints": {
          "get": {
            "auth": false,
            "docs": "Get basic information about a user",
            "examples": [
              {
                "path-parameters": {
                  "user_id": "user_id",
                },
                "response": {
                  "body": {
                    "bio": "bio",
                    "id": "id",
                    "links": {
                      "self": "self",
                    },
                    "profileImageUrl": "profileImageUrl",
                    "url": "url",
                    "username": "username",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/users/{user_id}",
            "path-parameters": {
              "user_id": {
                "docs": "User Id",
                "type": "string",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.User",
            },
          },
          "vals": {
            "auth": false,
            "docs": "List a user's vals",
            "examples": [
              {
                "path-parameters": {
                  "user_id": "user_id",
                },
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "code": "code",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "links": {
                          "module": "module",
                          "self": "self",
                          "versions": "versions",
                        },
                        "name": "name",
                        "privacy": "public",
                        "public": true,
                        "type": "interval",
                        "url": "url",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/users/{user_id}/vals",
            "path-parameters": {
              "user_id": {
                "docs": "User Id",
                "type": "string",
              },
            },
            "request": {
              "name": "UsersValsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "UsersValsResponse",
            },
          },
        },
      },
      "types": {
        "UsersValsResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<root.BasicVal>",
            "links": "root.PaginationLinks",
          },
        },
      },
    },
    "vals.yml": {
      "docs": "These endpoints
let you get, create, and run vals.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "vals",
        "endpoints": {
          "cancel": {
            "auth": true,
            "docs": "Cancel a running val",
            "errors": [
              "root.ValsCancelRequestNotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "evaluation_id": "evaluation_id",
                  "val_id": "val_id",
                },
                "response": {
                  "body": {
                    "found": true,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/evaluations/{evaluation_id}/cancel",
            "path-parameters": {
              "evaluation_id": {
                "docs": "The ID of the evaluation - the specific time that a val was run - that you want to cancel",
                "type": "string",
              },
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "response": {
              "docs": "The evaluation_id was successfully searched for and the evaluation was either already done or now has been cancelled",
              "type": "ValsCancelResponse",
            },
          },
          "create": {
            "auth": true,
            "docs": "Create a new val",
            "examples": [
              {
                "request": {
                  "code": "console.log(1);",
                  "name": "myVal",
                  "privacy": "public",
                  "readme": "# My Val",
                  "type": "script",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/vals",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "Val source code as TypeScript",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 256000,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "This val’s name",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "privacy": {
                    "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "type": "optional<ValsCreateRequestPrivacy>",
                  },
                  "readme": {
                    "docs": "Readme contents, as Markdown",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "type": {
                    "default": "script",
                    "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "type": "optional<ValsCreateRequestType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ValsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "createVersion": {
            "auth": true,
            "docs": "Create a new version of a val",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
                "request": {
                  "code": "console.log(1);",
                  "name": "myVal",
                  "privacy": "public",
                  "readme": "# My Val",
                  "type": "script",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "Val source code as TypeScript",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 256000,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "This val’s name",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "privacy": {
                    "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "type": "optional<ValsCreateVersionRequestPrivacy>",
                  },
                  "readme": {
                    "docs": "Readme contents, as Markdown",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "type": {
                    "default": "script",
                    "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "type": "optional<ValsCreateVersionRequestType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ValsCreateVersionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Delete a val",
            "errors": [
              "root.ValsDeleteRequestNotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
          },
          "deleteVersion": {
            "auth": true,
            "docs": "Delete a specific version of a val",
            "errors": [
              "root.ValsDeleteVersionRequestNotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                  "version": 1,
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions/{version}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
              "version": {
                "docs": "The val version",
                "type": "integer",
              },
            },
          },
          "evalGet": {
            "auth": false,
            "docs": "Run JavaScript or TypeScript without saving it permanently as a val",
            "errors": [
              "root.EvalGetRequestBadRequestError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "code": "code",
                },
                "response": {
                  "body": "string",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/eval/{code}",
            "path-parameters": {
              "code": {
                "docs": "TypeScript source code",
                "type": "string",
              },
            },
            "request": {
              "name": "EvalGetRequest",
              "query-parameters": {
                "args": "optional<string>",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "optional<EvalGetResponse>",
            },
          },
          "evalPost": {
            "auth": false,
            "docs": "Run JavaScript or TypeScript without saving it permanently as a val",
            "errors": [
              "root.EvalPostRequestBadRequestError",
            ],
            "examples": [
              {
                "name": "example1",
                "request": {
                  "code": "export default 1",
                },
                "response": {
                  "body": "string",
                },
              },
              {
                "name": "example2",
                "request": {
                  "args": [
                    1,
                  ],
                  "code": "export default function main(value: number) { return value; }",
                },
                "response": {
                  "body": "string",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/eval",
            "request": {
              "body": {
                "properties": {
                  "args": {
                    "docs": "Array of arguments passed to the given function. If this is present, the default export should be a function and will be called with these arguments, and the function result will be returned. If \`args\` is not present, no function calls are made, but you can still return a value using \`export default myVariable\`.",
                    "type": "optional<list<unknown>>",
                  },
                  "code": {
                    "docs": "TypeScript source code",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "EvalPostRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "optional<EvalPostResponse>",
            },
          },
          "get": {
            "auth": false,
            "docs": "Get a val by id",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "getVersion": {
            "auth": false,
            "docs": "Get a specific version of a val",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                  "version": 1,
                },
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions/{version}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
              "version": {
                "docs": "The val version",
                "type": "integer",
              },
            },
            "request": {
              "name": "ValsGetVersionRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "list": {
            "auth": false,
            "docs": "List versions of a val",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "createdAt": "2024-01-15T09:30:00Z",
                        "val_id": "val_id",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "request": {
              "name": "ValsListRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "ValsListResponse",
            },
          },
          "put": {
            "auth": true,
            "docs": "Run an existing val or create a new one",
            "examples": [
              {
                "request": {
                  "code": "console.log(1);",
                  "name": "myVal",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/v1/vals",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "Val source code as TypeScript",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 256000,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "This val’s name",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ValsPutRequest",
              "query-parameters": undefined,
            },
          },
          "runGet": {
            "auth": false,
            "availability": "deprecated",
            "docs": "Run a val, specify any parameters in a querystring",
            "examples": [
              {
                "path-parameters": {
                  "valname": "valname",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/run/{valname}",
            "path-parameters": {
              "valname": {
                "docs": "Name of the val, in concatenated style, like username.valname",
                "type": "string",
              },
            },
            "request": {
              "name": "RunGetRequest",
              "query-parameters": {
                "args": {
                  "docs": "An argument that will be passed to the function as a JavaScript value",
                  "type": "optional<string>",
                },
              },
            },
          },
          "runPost": {
            "auth": false,
            "availability": "deprecated",
            "docs": "Run a val, with arguments in the request body",
            "examples": [
              {
                "path-parameters": {
                  "valname": "valname",
                },
                "request": {
                  "args": [
                    1,
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/run/{valname}",
            "path-parameters": {
              "valname": {
                "docs": "Name of the val, in concatenated style, like username.valname",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "args": "optional<list<unknown>>",
                },
              },
              "headers": undefined,
              "name": "RunPostRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "docs": "Update an existing val",
            "examples": [
              {
                "name": "example1",
                "path-parameters": {
                  "val_id": "val_id",
                },
                "request": {
                  "name": "myVal",
                  "readme": "# Updated readme",
                },
              },
              {
                "name": "example2",
                "path-parameters": {
                  "val_id": "val_id",
                },
                "request": {
                  "type": "http",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "This val’s name",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "privacy": {
                    "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "type": "optional<ValsUpdateRequestPrivacy>",
                  },
                  "readme": {
                    "docs": "Readme contents, as Markdown",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "type": {
                    "docs": "The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "type": "optional<ValsUpdateRequestType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ValsUpdateRequest",
              "query-parameters": undefined,
            },
          },
        },
      },
      "types": {
        "EvalGetResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            "double",
            "map<string, unknown>",
            "list<unknown>",
            "boolean",
          ],
        },
        "EvalPostResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            "double",
            "map<string, unknown>",
            "list<unknown>",
            "boolean",
          ],
        },
        "ValsCancelResponse": {
          "docs": "The evaluation_id was successfully searched for and the evaluation was either already done or now has been cancelled",
          "properties": {
            "found": {
              "docs": "True if the evaluation was found and cancelled",
              "type": "boolean",
            },
          },
        },
        "ValsCreateRequestPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "ValsCreateRequestType": {
          "default": "script",
          "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
          "enum": [
            "http",
            "script",
            "email",
          ],
        },
        "ValsCreateVersionRequestPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "ValsCreateVersionRequestType": {
          "default": "script",
          "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
          "enum": [
            "http",
            "script",
            "email",
          ],
        },
        "ValsListResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<ValsListResponseDataItem>",
            "links": "root.PaginationLinks",
          },
        },
        "ValsListResponseDataItem": {
          "docs": undefined,
          "properties": {
            "createdAt": "datetime",
            "val_id": {
              "docs": "Id of a val",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "version": {
              "docs": "Version of the val",
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
          },
        },
        "ValsUpdateRequestPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "ValsUpdateRequestType": {
          "docs": "The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.",
          "enum": [
            "http",
            "script",
            "email",
          ],
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "EmailsSendRequestInternalServerError": {
        "docs": "Default Response",
        "status-code": 500,
        "type": "EmailsSendRequestInternalServerErrorBody",
      },
      "EvalGetRequestBadRequestError": {
        "docs": "The function throw an error or had invalid syntax",
        "status-code": 400,
        "type": "EvalGetRequestBadRequestErrorBody",
      },
      "EvalPostRequestBadRequestError": {
        "docs": "Default Response",
        "status-code": 400,
        "type": "EvalPostRequestBadRequestErrorBody",
      },
      "ValsCancelRequestNotFoundError": {
        "docs": "Default Response",
        "status-code": 404,
        "type": "string",
      },
      "ValsDeleteRequestNotFoundError": {
        "docs": "The val was not found",
        "status-code": 404,
        "type": "unknown",
      },
      "ValsDeleteVersionRequestNotFoundError": {
        "docs": "The val was not found",
        "status-code": 404,
        "type": "unknown",
      },
    },
    "navigation": [
      "vals",
      "alias",
      "me",
      "users",
      "sqlite",
      "blobs",
      "search",
      "emails",
    ],
    "types": {
      "BasicVal": {
        "docs": "A Val",
        "properties": {
          "author": {
            "docs": "The user who created this val",
            "type": "optional<BasicValAuthor>",
          },
          "code": {
            "docs": "TypeScript code associated with this val",
            "type": "optional<string>",
          },
          "createdAt": "datetime",
          "id": {
            "docs": "This val’s id",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "links": "BasicValLinks",
          "name": {
            "docs": "The name of this val",
            "type": "string",
          },
          "privacy": {
            "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "type": "BasicValPrivacy",
          },
          "public": {
            "docs": "Whether this val is available publicly on Val Town",
            "type": "boolean",
          },
          "type": {
            "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "type": "BasicValType",
          },
          "url": {
            "docs": "The URL of this val on the Val Town website",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "version": {
            "docs": "The version of this val, starting at zero",
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "BasicValAuthor": {
        "docs": "The user who created this val",
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "username": "optional<string>",
        },
      },
      "BasicValLinks": {
        "docs": undefined,
        "properties": {
          "module": {
            "docs": "The URL of this Val’s source code as a module",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "self": {
            "docs": "The URL of this val on this API",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "versions": {
            "docs": "The endpoint to retrieve this val’s versions",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "BasicValPrivacy": {
        "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
        "enum": [
          "public",
          "unlisted",
          "private",
        ],
      },
      "BasicValType": {
        "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
        "enum": [
          "interval",
          "http",
          "express",
          "email",
          "script",
          "rpc",
          "httpnext",
        ],
      },
      "EmailsSendRequestInternalServerErrorBody": {
        "docs": undefined,
        "properties": {
          "error": "string",
        },
      },
      "EvalGetRequestBadRequestErrorBody": {
        "docs": "The function throw an error or had invalid syntax",
        "properties": {
          "error": "string",
          "type": "literal<"error">",
        },
      },
      "EvalPostRequestBadRequestErrorBody": {
        "docs": undefined,
        "properties": {
          "error": "string",
          "type": "literal<"error">",
        },
      },
      "ExtendedVal": {
        "docs": "A Val",
        "properties": {
          "author": {
            "docs": "The user who created this val",
            "type": "optional<ExtendedValAuthor>",
          },
          "code": {
            "docs": "TypeScript code associated with this val",
            "type": "optional<string>",
          },
          "createdAt": "datetime",
          "id": {
            "docs": "This val’s id",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "likeCount": {
            "docs": "How many likes this val has received",
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
          "links": "ExtendedValLinks",
          "name": {
            "docs": "The name of this val",
            "type": "string",
          },
          "privacy": {
            "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "type": "ExtendedValPrivacy",
          },
          "public": {
            "docs": "Whether this val is available publicly on Val Town",
            "type": "boolean",
          },
          "readme": {
            "docs": "This val’s readme, as Markdown",
            "type": "optional<string>",
          },
          "referenceCount": {
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
          "type": {
            "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "type": "ExtendedValType",
          },
          "url": {
            "docs": "The URL of this val on the Val Town website",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "version": {
            "docs": "The version of this val, starting at zero",
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "ExtendedValAuthor": {
        "docs": "The user who created this val",
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "username": "optional<string>",
        },
      },
      "ExtendedValLinks": {
        "docs": undefined,
        "properties": {
          "module": {
            "docs": "The URL of this Val’s source code as a module",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "self": {
            "docs": "The URL of this val on this API",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "versions": {
            "docs": "The endpoint to retrieve this val’s versions",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ExtendedValPrivacy": {
        "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
        "enum": [
          "public",
          "unlisted",
          "private",
        ],
      },
      "ExtendedValType": {
        "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
        "enum": [
          "interval",
          "http",
          "express",
          "email",
          "script",
          "rpc",
          "httpnext",
        ],
      },
      "PaginationLinks": {
        "docs": "Links to use for pagination",
        "properties": {
          "next": {
            "docs": "URL of the next page, if any",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "prev": {
            "docs": "URL of the previous page, if any",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "self": {
            "docs": "URL of this page",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ResultSet": {
        "docs": "Result of executing an SQL statement.",
        "properties": {
          "columnTypes": {
            "docs": "Types of columns.

The types are currently shown for types declared in a SQL table. For column types of function calls, for example, an empty string is returned.",
            "type": "list<string>",
          },
          "columns": {
            "docs": "Names of columns.

Names of columns can be defined using the \`AS\` keyword in SQL:

\`\`\`sql
SELECT author AS author, COUNT(*) AS count FROM books GROUP BY author
\`\`\`",
            "type": "list<string>",
          },
          "lastInsertRowid": {
            "docs": "ROWID of the last inserted row.

This value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
            "type": "optional<ResultSetLastInsertRowid>",
          },
          "rows": {
            "docs": "Rows produced by the statement.",
            "type": "list<list<unknown>>",
          },
          "rowsAffected": {
            "docs": "Number of rows that were affected by an UPDATE, INSERT or DELETE operation.

This value is not specified for other SQL statements.",
            "type": "double",
          },
        },
      },
      "ResultSetLastInsertRowid": {
        "discriminated": false,
        "docs": "ROWID of the last inserted row.

This value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
        "union": [
          "string",
          "double",
        ],
      },
      "User": {
        "docs": "User object",
        "properties": {
          "bio": {
            "docs": "The user’s biography, if they have provided one",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of this user",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "links": "UserLinks",
          "profileImageUrl": {
            "docs": "URL that points to the user’s profile image, if one exists",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "URL of this user’s profile on Val Town’s website",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "username": {
            "docs": "The user’s handle that they chose for themselves. Does not include the @ symbol",
            "type": "optional<string>",
          },
        },
      },
      "UserLinks": {
        "docs": undefined,
        "properties": {
          "self": {
            "docs": "URL of this user on this API",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerAuthScheme",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
    },
    "default-environment": "Production",
    "display-name": "Val Town API",
    "environments": {
      "Production": "https://api.val.town",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api parser valtown simple 1`] = `
{
  "definitionFiles": {
    "alias.yml": {
      "docs": "Many API endpoints
accept IDs instead of user-facing names. The alias
endpoints let you convert between the user-facing name of a
val or another object into an ID that can be used with other
API endpoints",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "alias",
        "endpoints": {
          "username": {
            "auth": false,
            "docs": "Get basic details about a user, given their username",
            "examples": [
              {
                "path-parameters": {
                  "username": "username",
                },
                "response": {
                  "body": {
                    "bio": "bio",
                    "id": "id",
                    "links": {
                      "self": "self",
                    },
                    "profileImageUrl": "profileImageUrl",
                    "url": "url",
                    "username": "username",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/alias/{username}",
            "path-parameters": {
              "username": {
                "docs": "Username of the user who you are looking for",
                "type": "string",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.User",
            },
          },
          "val": {
            "auth": false,
            "docs": "Get a val",
            "examples": [
              {
                "path-parameters": {
                  "username": "username",
                  "val_name": "val_name",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/alias/{username}/{val_name}",
            "path-parameters": {
              "username": {
                "docs": "Username of the user whose val you are looking for",
                "type": "string",
              },
              "val_name": {
                "docs": "Name of the val you’re looking for",
                "type": "string",
              },
            },
            "response": {
              "docs": "A Val",
              "type": "AliasValResponse",
            },
          },
        },
      },
      "types": {
        "AliasValResponse": {
          "docs": "A Val",
          "properties": {
            "author": {
              "docs": "The user who created this val",
              "type": "optional<AliasValResponseAuthor>",
            },
            "code": {
              "docs": "TypeScript code associated with this val",
              "type": "optional<string>",
            },
            "createdAt": "datetime",
            "id": {
              "docs": "This val’s id",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "likeCount": {
              "docs": "How many likes this val has received",
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
            "links": "AliasValResponseLinks",
            "name": {
              "docs": "The name of this val",
              "type": "string",
            },
            "privacy": {
              "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
              "type": "AliasValResponsePrivacy",
            },
            "public": {
              "docs": "Whether this val is available publicly on Val Town",
              "type": "boolean",
            },
            "readme": {
              "docs": "This val’s readme, as Markdown",
              "type": "optional<string>",
            },
            "referenceCount": {
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
            "type": {
              "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
              "type": "AliasValResponseType",
            },
            "url": {
              "docs": "The URL of this val on the Val Town website",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "version": {
              "docs": "The version of this val, starting at zero",
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
          },
        },
        "AliasValResponseAuthor": {
          "docs": "The user who created this val",
          "properties": {
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": "optional<string>",
          },
        },
        "AliasValResponseLinks": {
          "docs": undefined,
          "properties": {
            "module": {
              "docs": "The URL of this Val’s source code as a module",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "self": {
              "docs": "The URL of this val on this API",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "versions": {
              "docs": "The endpoint to retrieve this val’s versions",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
          },
        },
        "AliasValResponsePrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "AliasValResponseType": {
          "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
          "enum": [
            "interval",
            "http",
            "express",
            "email",
            "script",
            "rpc",
            "httpnext",
          ],
        },
      },
    },
    "blobs.yml": {
      "docs": "Blobs",
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "blobs",
        "endpoints": {
          "delete": {
            "auth": true,
            "docs": "Delete a blob",
            "examples": [
              {
                "path-parameters": {
                  "key": "key",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/blob/{key}",
            "path-parameters": {
              "key": {
                "docs": "Key that uniquely identifies this blob",
                "type": "string",
              },
            },
          },
          "get": {
            "auth": false,
            "docs": "Get a blob’s contents.",
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/blob/{key}",
            "path-parameters": {
              "key": {
                "docs": "Key that uniquely identifies this blob",
                "type": "string",
              },
            },
            "response": {
              "docs": "Binary contents of the returned file",
              "type": "file",
            },
          },
          "list": {
            "auth": false,
            "docs": "List blobs in your account",
            "examples": [
              {
                "response": {
                  "body": [
                    {
                      "key": "hello_world",
                      "lastModified": "2024-06-24T20:00:59Z",
                      "size": 20,
                    },
                  ],
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/blob",
            "request": {
              "name": "BlobsListRequest",
              "query-parameters": {
                "prefix": {
                  "docs": "If specified, only include blobs that start with this string",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of blobs that you’ve stored",
              "type": "list<BlobListingItem>",
            },
          },
          "store": {
            "auth": true,
            "docs": "Store data in blob storage",
            "examples": [
              {
                "path-parameters": {
                  "key": "key",
                },
                "request": "string",
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/blob/{key}",
            "path-parameters": {
              "key": {
                "docs": "Key that uniquely identifies this blob",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": "Binary input data",
                "type": "string",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
          },
        },
      },
      "types": {
        "BlobListingItem": {
          "docs": undefined,
          "properties": {
            "key": "string",
            "lastModified": {
              "docs": "Creation date of the object",
              "type": "optional<datetime>",
            },
            "size": {
              "docs": "Size in bytes of the object",
              "type": "optional<integer>",
            },
          },
        },
      },
    },
    "emails.yml": {
      "docs": "Emails",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "emails",
        "endpoints": {
          "send": {
            "auth": true,
            "docs": "Send emails",
            "errors": [
              "root.InternalServerError",
            ],
            "examples": [
              {
                "request": {
                  "html": "Hello <strong>world</strong>",
                  "subject": "An important message",
                  "text": "Hello world",
                },
                "response": {
                  "body": {
                    "message": "message",
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/email",
            "request": {
              "body": {
                "properties": {
                  "attachments": {
                    "docs": "A list of attachments to add to the email",
                    "type": "optional<list<AttachmentObject>>",
                  },
                  "bcc": {
                    "docs": "A single email or list of emails for one of the address fields",
                    "type": "optional<EmailDataInput>",
                  },
                  "cc": {
                    "docs": "A single email or list of emails for one of the address fields",
                    "type": "optional<EmailDataInput>",
                  },
                  "from": "optional<EmailData>",
                  "html": {
                    "docs": "HTML content of the email. Can be specified alongside text",
                    "type": "optional<string>",
                  },
                  "replyToList": {
                    "docs": "A reply-to list of email addresses",
                    "type": "optional<ReplyToList>",
                  },
                  "subject": {
                    "docs": "The subject line of the email",
                    "type": "optional<string>",
                  },
                  "text": {
                    "docs": "Text content of the email, for email clients that may not support HTML",
                    "type": "optional<string>",
                  },
                  "to": {
                    "docs": "A single email or list of emails for one of the address fields",
                    "type": "optional<EmailDataInput>",
                  },
                },
              },
              "headers": undefined,
              "name": "EmailsSendRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successfully sent email",
              "type": "EmailsSendResponse",
            },
          },
        },
      },
      "types": {
        "AttachmentObject": {
          "docs": undefined,
          "properties": {
            "content": "string",
            "contentId": "optional<string>",
            "disposition": "optional<string>",
            "filename": "string",
            "type": "optional<string>",
          },
        },
        "EmailData": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            {
              "docs": "An email address and name",
              "type": "EmailNameAndAddress",
            },
          ],
        },
        "EmailDataInput": {
          "discriminated": false,
          "docs": "A single email or list of emails for one of the address fields",
          "union": [
            "EmailData",
            "list<EmailData>",
          ],
        },
        "EmailNameAndAddress": {
          "docs": "An email address and name",
          "properties": {
            "email": "string",
            "name": "optional<string>",
          },
        },
        "EmailsSendResponse": {
          "docs": "Successfully sent email",
          "properties": {
            "message": "string",
          },
        },
        "ReplyToList": {
          "discriminated": false,
          "docs": "A reply-to list of email addresses",
          "union": [
            {
              "docs": "An email address and name",
              "type": "EmailNameAndAddress",
            },
            "list<EmailNameAndAddress>",
          ],
        },
      },
    },
    "me.yml": {
      "docs": "These endpoints
give access to details and data from the requesting user.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "me",
        "endpoints": {
          "comments": {
            "auth": false,
            "docs": "Get comments related to current user, either given or received",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                  "relationship": "any",
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "comment": "comment",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "val": {
                          "id": "id",
                          "name": "name",
                          "privacy": "public",
                          "version": 1,
                        },
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me/comments",
            "request": {
              "name": "MeCommentsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
                "relationship": {
                  "docs": "Whether to get comments you have received, given, or both",
                  "type": "MeCommentsRequestRelationship",
                },
                "since": {
                  "docs": "Include items created after this date",
                  "type": "optional<datetime>",
                },
                "until": {
                  "docs": "Include items created before this date",
                  "type": "optional<datetime>",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "MeCommentsResponse",
            },
          },
          "get": {
            "auth": false,
            "docs": "Get profile information for the current user",
            "examples": [
              {
                "response": {
                  "body": {
                    "bio": "Hello world",
                    "email": "example@example.com",
                    "id": "00000000-0000-0000-0000-000000000000",
                    "links": {
                      "self": "self",
                    },
                    "profileImageUrl": "profileImageUrl",
                    "tier": "pro",
                    "url": "url",
                    "username": "tmcw",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me",
            "response": {
              "docs": "Your user information, with tier and email included",
              "type": "MeGetResponse",
            },
          },
          "likes": {
            "auth": false,
            "docs": "Get vals liked by the current user",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "code": "code",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "links": {
                          "module": "module",
                          "self": "self",
                          "versions": "versions",
                        },
                        "name": "name",
                        "privacy": "public",
                        "public": true,
                        "type": "interval",
                        "url": "url",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me/likes",
            "request": {
              "name": "MeLikesRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "MeLikesResponse",
            },
          },
          "references": {
            "auth": false,
            "docs": "Get vals that depend on any of the user's vals",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "dependsOn": {
                          "id": "id",
                          "name": "name",
                        },
                        "reference": {
                          "id": "id",
                          "name": "name",
                        },
                        "referencedAt": "2024-01-15T09:30:00Z",
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/me/references",
            "request": {
              "name": "MeReferencesRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
                "since": {
                  "docs": "Include items created after this date",
                  "type": "optional<datetime>",
                },
                "until": {
                  "docs": "Include items created before this date",
                  "type": "optional<datetime>",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "MeReferencesResponse",
            },
          },
        },
      },
      "types": {
        "MeCommentsRequestRelationship": {
          "default": "any",
          "enum": [
            "any",
            "received",
            "given",
          ],
        },
        "MeCommentsResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<MeCommentsResponseDataItem>",
            "links": "root.PaginationLinks",
          },
        },
        "MeCommentsResponseDataItem": {
          "docs": undefined,
          "properties": {
            "author": "MeCommentsResponseDataItemAuthor",
            "comment": {
              "docs": "Text of the given comment, in Markdown",
              "type": "string",
            },
            "createdAt": "datetime",
            "id": {
              "docs": "The comment’s id",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "val": "MeCommentsResponseDataItemVal",
          },
        },
        "MeCommentsResponseDataItemAuthor": {
          "docs": undefined,
          "properties": {
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": "optional<string>",
          },
        },
        "MeCommentsResponseDataItemVal": {
          "docs": undefined,
          "properties": {
            "author": {
              "docs": "The user who created this val",
              "type": "optional<MeCommentsResponseDataItemValAuthor>",
            },
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "name": {
              "docs": "Name of the val that is being commented on",
              "type": "string",
            },
            "privacy": {
              "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
              "type": "MeCommentsResponseDataItemValPrivacy",
            },
            "version": {
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
          },
        },
        "MeCommentsResponseDataItemValAuthor": {
          "docs": "The user who created this val",
          "properties": {
            "id": {
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": "optional<string>",
          },
        },
        "MeCommentsResponseDataItemValPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "MeGetResponse": {
          "docs": "Your user information, with tier and email included",
          "properties": {
            "bio": {
              "docs": "The user’s biography, if they have provided one",
              "type": "optional<string>",
            },
            "email": {
              "docs": "Your email address",
              "type": "string",
            },
            "id": {
              "docs": "The ID of this user",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "links": "MeGetResponseLinks",
            "profileImageUrl": {
              "docs": "URL that points to the user’s profile image, if one exists",
              "type": "optional<string>",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "tier": {
              "docs": "Your account tier",
              "type": "optional<MeGetResponseTier>",
            },
            "url": {
              "docs": "URL of this user’s profile on Val Town’s website",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "username": {
              "docs": "The user’s handle that they chose for themselves. Does not include the @ symbol",
              "type": "optional<string>",
            },
          },
        },
        "MeGetResponseLinks": {
          "docs": undefined,
          "properties": {
            "self": {
              "docs": "URL of this user on this API",
              "type": "string",
              "validation": {
                "format": "uri",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
          },
        },
        "MeGetResponseTier": {
          "docs": "Your account tier",
          "enum": [
            "free",
            "pro",
          ],
        },
        "MeLikesResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<root.BasicVal>",
            "links": "root.PaginationLinks",
          },
        },
        "MeReferencesResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<MeReferencesResponseDataItem>",
            "links": "root.PaginationLinks",
          },
        },
        "MeReferencesResponseDataItem": {
          "docs": "A description of a dependency from one val (reference) to another (dependsOn) that was introduced at a particular time.",
          "properties": {
            "dependsOn": {
              "docs": "A val in a dependency relationship",
              "type": "MeReferencesResponseDataItemDependsOn",
            },
            "reference": {
              "docs": "A val in a dependency relationship",
              "type": "MeReferencesResponseDataItemReference",
            },
            "referencedAt": "datetime",
          },
        },
        "MeReferencesResponseDataItemDependsOn": {
          "docs": "A val in a dependency relationship",
          "properties": {
            "author_id": {
              "docs": "The ID of the person who authored this val",
              "type": "optional<string>",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "id": {
              "docs": "The id of this val",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "name": {
              "docs": "The name of this val",
              "type": "string",
            },
            "username": {
              "docs": "The username of the person who authored this val",
              "type": "optional<string>",
            },
          },
        },
        "MeReferencesResponseDataItemReference": {
          "docs": "A val in a dependency relationship",
          "properties": {
            "author_id": {
              "docs": "The ID of the person who authored this val",
              "type": "optional<string>",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "id": {
              "docs": "The id of this val",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "name": {
              "docs": "The name of this val",
              "type": "string",
            },
            "username": {
              "docs": "The username of the person who authored this val",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "search.yml": {
      "docs": "Search",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "search",
        "endpoints": {
          "vals": {
            "auth": false,
            "docs": "Search for vals across the platform",
            "examples": [
              {
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                  "query": "query",
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "code": "code",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "links": {
                          "module": "module",
                          "self": "self",
                          "versions": "versions",
                        },
                        "name": "name",
                        "privacy": "public",
                        "public": true,
                        "type": "interval",
                        "url": "url",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/search/vals",
            "request": {
              "name": "SearchValsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
                "query": {
                  "docs": "Search query",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "SearchValsResponse",
            },
          },
        },
      },
      "types": {
        "SearchValsResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<root.BasicVal>",
            "links": "root.PaginationLinks",
          },
        },
      },
    },
    "sqlite.yml": {
      "docs": "SQLite",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "sqlite",
        "endpoints": {
          "batch": {
            "auth": true,
            "docs": "Execute a batch of SQLite statements and return results for all of them",
            "examples": [
              {
                "request": {
                  "mode": "read",
                  "statements": [
                    "SELECT 1;",
                  ],
                },
                "response": {
                  "body": [
                    {
                      "columnTypes": [
                        "number",
                      ],
                      "columns": [
                        "id",
                      ],
                      "lastInsertRowid": "lastInsertRowid",
                      "rows": [
                        [
                          1,
                        ],
                      ],
                      "rowsAffected": 0,
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/sqlite/batch",
            "request": {
              "body": {
                "properties": {
                  "mode": "optional<SqliteBatchRequestMode>",
                  "statements": "list<SqliteBatchRequestStatementsItem>",
                },
              },
              "headers": undefined,
              "name": "SqliteBatchRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Array of results from the statements executed",
              "type": "list<root.ResultSet>",
            },
          },
          "execute": {
            "auth": true,
            "docs": "Execute a single SQLite statement and return results",
            "examples": [
              {
                "name": "example1",
                "request": {
                  "statement": "SELECT 1;",
                },
                "response": {
                  "body": {
                    "columnTypes": [
                      "columnTypes",
                    ],
                    "columns": [
                      "columns",
                    ],
                    "lastInsertRowid": "lastInsertRowid",
                    "rows": [
                      [
                        {
                          "key": "value",
                        },
                      ],
                    ],
                    "rowsAffected": 1.1,
                  },
                },
              },
              {
                "name": "example2",
                "request": {
                  "statement": {
                    "args": [
                      1,
                    ],
                    "sql": "SELECT * FROM table WHERE column = ?;",
                  },
                },
                "response": {
                  "body": {
                    "columnTypes": [
                      "columnTypes",
                    ],
                    "columns": [
                      "columns",
                    ],
                    "lastInsertRowid": "lastInsertRowid",
                    "rows": [
                      [
                        {
                          "key": "value",
                        },
                      ],
                    ],
                    "rowsAffected": 1.1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/sqlite/execute",
            "request": {
              "body": {
                "properties": {
                  "statement": "SqliteExecuteRequestStatement",
                },
              },
              "headers": undefined,
              "name": "SqliteExecuteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ResultSet",
            },
          },
        },
      },
      "types": {
        "ParameterizedQuery": {
          "docs": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
          "properties": {
            "args": {
              "docs": "List of arguments to be used in the given statement",
              "type": "StatementArg",
            },
            "sql": {
              "docs": "SQL statement, with ? placeholders for arguments",
              "type": "string",
            },
          },
        },
        "SqliteBatchRequestMode": {
          "enum": [
            "write",
            "read",
            "deferred",
          ],
        },
        "SqliteBatchRequestStatementsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": "Simple SQL statement to run in SQLite",
              "type": "string",
            },
            {
              "docs": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
              "type": "ParameterizedQuery",
            },
          ],
        },
        "SqliteExecuteRequestStatement": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": "Simple SQL statement to run in SQLite",
              "type": "string",
            },
            {
              "docs": "A parameterized SQL query. See https://docs.turso.tech/sdk/ts/reference#batch-transactions for reference",
              "type": "ParameterizedQuery",
            },
          ],
        },
        "StatementArg": {
          "discriminated": false,
          "docs": "List of arguments to be used in the given statement",
          "union": [
            "list<optional<TursoValue>>",
            "map<string, optional<TursoValue>>",
          ],
        },
        "TursoValue": {
          "discriminated": false,
          "docs": "A value to be used as a parameter",
          "union": [
            "string",
            "double",
            "boolean",
          ],
        },
      },
    },
    "users.yml": {
      "docs": "Users",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "users",
        "endpoints": {
          "get": {
            "auth": false,
            "docs": "Get basic information about a user",
            "examples": [
              {
                "path-parameters": {
                  "user_id": "user_id",
                },
                "response": {
                  "body": {
                    "bio": "bio",
                    "id": "id",
                    "links": {
                      "self": "self",
                    },
                    "profileImageUrl": "profileImageUrl",
                    "url": "url",
                    "username": "username",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/users/{user_id}",
            "path-parameters": {
              "user_id": {
                "docs": "User Id",
                "type": "string",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.User",
            },
          },
          "vals": {
            "auth": false,
            "docs": "List a user's vals",
            "examples": [
              {
                "path-parameters": {
                  "user_id": "user_id",
                },
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "author": {
                          "id": "id",
                        },
                        "code": "code",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "links": {
                          "module": "module",
                          "self": "self",
                          "versions": "versions",
                        },
                        "name": "name",
                        "privacy": "public",
                        "public": true,
                        "type": "interval",
                        "url": "url",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/users/{user_id}/vals",
            "path-parameters": {
              "user_id": {
                "docs": "User Id",
                "type": "string",
              },
            },
            "request": {
              "name": "UsersValsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "UsersValsResponse",
            },
          },
        },
      },
      "types": {
        "UsersValsResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<root.BasicVal>",
            "links": "root.PaginationLinks",
          },
        },
      },
    },
    "vals.yml": {
      "docs": "These endpoints
let you get, create, and run vals.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "vals",
        "endpoints": {
          "cancel": {
            "auth": true,
            "docs": "Cancel a running val",
            "errors": [
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "evaluation_id": "evaluation_id",
                  "val_id": "val_id",
                },
                "response": {
                  "body": {
                    "found": true,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/evaluations/{evaluation_id}/cancel",
            "path-parameters": {
              "evaluation_id": {
                "docs": "The ID of the evaluation - the specific time that a val was run - that you want to cancel",
                "type": "string",
              },
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "response": {
              "docs": "The evaluation_id was successfully searched for and the evaluation was either already done or now has been cancelled",
              "type": "ValsCancelResponse",
            },
          },
          "create": {
            "auth": true,
            "docs": "Create a new val",
            "examples": [
              {
                "request": {
                  "code": "console.log(1);",
                  "name": "myVal",
                  "privacy": "public",
                  "readme": "# My Val",
                  "type": "script",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/vals",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "Val source code as TypeScript",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 256000,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "This val’s name",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "privacy": {
                    "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "type": "optional<ValsCreateRequestPrivacy>",
                  },
                  "readme": {
                    "docs": "Readme contents, as Markdown",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "type": {
                    "default": "script",
                    "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "type": "optional<ValsCreateRequestType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ValsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "createVersion": {
            "auth": true,
            "docs": "Create a new version of a val",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
                "request": {
                  "code": "console.log(1);",
                  "name": "myVal",
                  "privacy": "public",
                  "readme": "# My Val",
                  "type": "script",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "Val source code as TypeScript",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 256000,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "This val’s name",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "privacy": {
                    "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "type": "optional<ValsCreateVersionRequestPrivacy>",
                  },
                  "readme": {
                    "docs": "Readme contents, as Markdown",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "type": {
                    "default": "script",
                    "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "type": "optional<ValsCreateVersionRequestType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ValsCreateVersionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Delete a val",
            "errors": [
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
          },
          "deleteVersion": {
            "auth": true,
            "docs": "Delete a specific version of a val",
            "errors": [
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                  "version": 1,
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions/{version}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
              "version": {
                "docs": "The val version",
                "type": "integer",
              },
            },
          },
          "evalGet": {
            "auth": false,
            "docs": "Run JavaScript or TypeScript without saving it permanently as a val",
            "errors": [
              "root.BadRequestError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "code": "code",
                },
                "response": {
                  "body": "string",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/eval/{code}",
            "path-parameters": {
              "code": {
                "docs": "TypeScript source code",
                "type": "string",
              },
            },
            "request": {
              "name": "EvalGetRequest",
              "query-parameters": {
                "args": "optional<string>",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "optional<EvalGetResponse>",
            },
          },
          "evalPost": {
            "auth": false,
            "docs": "Run JavaScript or TypeScript without saving it permanently as a val",
            "errors": [
              "root.BadRequestError",
            ],
            "examples": [
              {
                "name": "example1",
                "request": {
                  "code": "export default 1",
                },
                "response": {
                  "body": "string",
                },
              },
              {
                "name": "example2",
                "request": {
                  "args": [
                    1,
                  ],
                  "code": "export default function main(value: number) { return value; }",
                },
                "response": {
                  "body": "string",
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/eval",
            "request": {
              "body": {
                "properties": {
                  "args": {
                    "docs": "Array of arguments passed to the given function. If this is present, the default export should be a function and will be called with these arguments, and the function result will be returned. If \`args\` is not present, no function calls are made, but you can still return a value using \`export default myVariable\`.",
                    "type": "optional<list<unknown>>",
                  },
                  "code": {
                    "docs": "TypeScript source code",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "EvalPostRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Default Response",
              "type": "optional<EvalPostResponse>",
            },
          },
          "get": {
            "auth": false,
            "docs": "Get a val by id",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "getVersion": {
            "auth": false,
            "docs": "Get a specific version of a val",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                  "version": 1,
                },
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "author": {
                      "id": "id",
                      "username": "username",
                    },
                    "code": "code",
                    "createdAt": "2024-01-15T09:30:00Z",
                    "id": "id",
                    "likeCount": 1,
                    "links": {
                      "module": "module",
                      "self": "self",
                      "versions": "versions",
                    },
                    "name": "name",
                    "privacy": "public",
                    "public": true,
                    "readme": "readme",
                    "referenceCount": 1,
                    "type": "interval",
                    "url": "url",
                    "version": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions/{version}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
              "version": {
                "docs": "The val version",
                "type": "integer",
              },
            },
            "request": {
              "name": "ValsGetVersionRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "Default Response",
              "type": "root.ExtendedVal",
            },
          },
          "list": {
            "auth": false,
            "docs": "List versions of a val",
            "examples": [
              {
                "path-parameters": {
                  "val_id": "val_id",
                },
                "query-parameters": {
                  "limit": 1,
                  "offset": 1,
                },
                "response": {
                  "body": {
                    "data": [
                      {
                        "createdAt": "2024-01-15T09:30:00Z",
                        "val_id": "val_id",
                        "version": 1,
                      },
                    ],
                    "links": {
                      "next": "next",
                      "prev": "prev",
                      "self": "self",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}/versions",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "request": {
              "name": "ValsListRequest",
              "query-parameters": {
                "limit": {
                  "docs": "Maximum items to return in each paginated response",
                  "type": "integer",
                },
                "offset": {
                  "docs": "Number of items to skip in order to deliver paginated results",
                  "type": "integer",
                },
              },
            },
            "response": {
              "docs": "A paginated result set",
              "type": "ValsListResponse",
            },
          },
          "put": {
            "auth": true,
            "docs": "Run an existing val or create a new one",
            "examples": [
              {
                "request": {
                  "code": "console.log(1);",
                  "name": "myVal",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/v1/vals",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "Val source code as TypeScript",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 256000,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "This val’s name",
                    "type": "string",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "headers": undefined,
              "name": "ValsPutRequest",
              "query-parameters": undefined,
            },
          },
          "runGet": {
            "auth": false,
            "availability": "deprecated",
            "docs": "Run a val, specify any parameters in a querystring",
            "examples": [
              {
                "path-parameters": {
                  "valname": "valname",
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/run/{valname}",
            "path-parameters": {
              "valname": {
                "docs": "Name of the val, in concatenated style, like username.valname",
                "type": "string",
              },
            },
            "request": {
              "name": "RunGetRequest",
              "query-parameters": {
                "args": {
                  "docs": "An argument that will be passed to the function as a JavaScript value",
                  "type": "optional<string>",
                },
              },
            },
          },
          "runPost": {
            "auth": false,
            "availability": "deprecated",
            "docs": "Run a val, with arguments in the request body",
            "examples": [
              {
                "path-parameters": {
                  "valname": "valname",
                },
                "request": {
                  "args": [
                    1,
                  ],
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/run/{valname}",
            "path-parameters": {
              "valname": {
                "docs": "Name of the val, in concatenated style, like username.valname",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "args": "optional<list<unknown>>",
                },
              },
              "headers": undefined,
              "name": "RunPostRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "docs": "Update an existing val",
            "examples": [
              {
                "name": "example1",
                "path-parameters": {
                  "val_id": "val_id",
                },
                "request": {
                  "name": "myVal",
                  "readme": "# Updated readme",
                },
              },
              {
                "name": "example2",
                "path-parameters": {
                  "val_id": "val_id",
                },
                "request": {
                  "type": "http",
                },
              },
            ],
            "method": "PUT",
            "pagination": undefined,
            "path": "/v1/vals/{val_id}",
            "path-parameters": {
              "val_id": {
                "docs": "Id of a val",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "This val’s name",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 48,
                      "minLength": 1,
                      "pattern": undefined,
                    },
                  },
                  "privacy": {
                    "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
                    "type": "optional<ValsUpdateRequestPrivacy>",
                  },
                  "readme": {
                    "docs": "Readme contents, as Markdown",
                    "type": "optional<string>",
                    "validation": {
                      "format": undefined,
                      "maxLength": 8192,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "type": {
                    "docs": "The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.",
                    "type": "optional<ValsUpdateRequestType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ValsUpdateRequest",
              "query-parameters": undefined,
            },
          },
        },
      },
      "types": {
        "EvalGetResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            "double",
            "map<string, unknown>",
            "list<unknown>",
            "boolean",
          ],
        },
        "EvalPostResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            "double",
            "map<string, unknown>",
            "list<unknown>",
            "boolean",
          ],
        },
        "ValsCancelResponse": {
          "docs": "The evaluation_id was successfully searched for and the evaluation was either already done or now has been cancelled",
          "properties": {
            "found": {
              "docs": "True if the evaluation was found and cancelled",
              "type": "boolean",
            },
          },
        },
        "ValsCreateRequestPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "ValsCreateRequestType": {
          "default": "script",
          "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
          "enum": [
            "http",
            "script",
            "email",
          ],
        },
        "ValsCreateVersionRequestPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "ValsCreateVersionRequestType": {
          "default": "script",
          "docs": "The type of the val you want to create. Note that this does not include interval vals, because they cannot be created through the API yet.",
          "enum": [
            "http",
            "script",
            "email",
          ],
        },
        "ValsListResponse": {
          "docs": "A paginated result set",
          "properties": {
            "data": "list<ValsListResponseDataItem>",
            "links": "root.PaginationLinks",
          },
        },
        "ValsListResponseDataItem": {
          "docs": undefined,
          "properties": {
            "createdAt": "datetime",
            "val_id": {
              "docs": "Id of a val",
              "type": "string",
              "validation": {
                "format": "uuid",
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
            "version": {
              "docs": "Version of the val",
              "type": "integer",
              "validation": {
                "exclusiveMax": undefined,
                "exclusiveMin": undefined,
                "max": undefined,
                "min": 0,
                "multipleOf": undefined,
              },
            },
          },
        },
        "ValsUpdateRequestPrivacy": {
          "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
          "enum": [
            "public",
            "unlisted",
            "private",
          ],
        },
        "ValsUpdateRequestType": {
          "docs": "The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.",
          "enum": [
            "http",
            "script",
            "email",
          ],
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "docs": "Default Response",
        "status-code": 400,
        "type": "BadRequestErrorBody",
      },
      "InternalServerError": {
        "docs": "Default Response",
        "status-code": 500,
        "type": "InternalServerErrorBody",
      },
      "NotFoundError": {
        "status-code": 404,
        "type": "unknown",
      },
    },
    "navigation": [
      "vals",
      "alias",
      "me",
      "users",
      "sqlite",
      "blobs",
      "search",
      "emails",
    ],
    "types": {
      "BadRequestErrorBody": {
        "docs": "The function throw an error or had invalid syntax",
        "properties": {
          "error": "string",
          "type": "literal<"error">",
        },
      },
      "BasicVal": {
        "docs": "A Val",
        "properties": {
          "author": {
            "docs": "The user who created this val",
            "type": "optional<BasicValAuthor>",
          },
          "code": {
            "docs": "TypeScript code associated with this val",
            "type": "optional<string>",
          },
          "createdAt": "datetime",
          "id": {
            "docs": "This val’s id",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "links": "BasicValLinks",
          "name": {
            "docs": "The name of this val",
            "type": "string",
          },
          "privacy": {
            "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "type": "BasicValPrivacy",
          },
          "public": {
            "docs": "Whether this val is available publicly on Val Town",
            "type": "boolean",
          },
          "type": {
            "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "type": "BasicValType",
          },
          "url": {
            "docs": "The URL of this val on the Val Town website",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "version": {
            "docs": "The version of this val, starting at zero",
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "BasicValAuthor": {
        "docs": "The user who created this val",
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "username": "optional<string>",
        },
      },
      "BasicValLinks": {
        "docs": undefined,
        "properties": {
          "module": {
            "docs": "The URL of this Val’s source code as a module",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "self": {
            "docs": "The URL of this val on this API",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "versions": {
            "docs": "The endpoint to retrieve this val’s versions",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "BasicValPrivacy": {
        "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
        "enum": [
          "public",
          "unlisted",
          "private",
        ],
      },
      "BasicValType": {
        "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
        "enum": [
          "interval",
          "http",
          "express",
          "email",
          "script",
          "rpc",
          "httpnext",
        ],
      },
      "ExtendedVal": {
        "docs": "A Val",
        "properties": {
          "author": {
            "docs": "The user who created this val",
            "type": "optional<ExtendedValAuthor>",
          },
          "code": {
            "docs": "TypeScript code associated with this val",
            "type": "optional<string>",
          },
          "createdAt": "datetime",
          "id": {
            "docs": "This val’s id",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "likeCount": {
            "docs": "How many likes this val has received",
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
          "links": "ExtendedValLinks",
          "name": {
            "docs": "The name of this val",
            "type": "string",
          },
          "privacy": {
            "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
            "type": "ExtendedValPrivacy",
          },
          "public": {
            "docs": "Whether this val is available publicly on Val Town",
            "type": "boolean",
          },
          "readme": {
            "docs": "This val’s readme, as Markdown",
            "type": "optional<string>",
          },
          "referenceCount": {
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
          "type": {
            "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
            "type": "ExtendedValType",
          },
          "url": {
            "docs": "The URL of this val on the Val Town website",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "version": {
            "docs": "The version of this val, starting at zero",
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 0,
              "multipleOf": undefined,
            },
          },
        },
      },
      "ExtendedValAuthor": {
        "docs": "The user who created this val",
        "properties": {
          "id": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "username": "optional<string>",
        },
      },
      "ExtendedValLinks": {
        "docs": undefined,
        "properties": {
          "module": {
            "docs": "The URL of this Val’s source code as a module",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "self": {
            "docs": "The URL of this val on this API",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "versions": {
            "docs": "The endpoint to retrieve this val’s versions",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ExtendedValPrivacy": {
        "docs": "This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.",
        "enum": [
          "public",
          "unlisted",
          "private",
        ],
      },
      "ExtendedValType": {
        "docs": "The type of a val. HTTP can receive web requests, Email can receive emails, Cron runs periodically, and Script can be used for libraries or one-off calculations",
        "enum": [
          "interval",
          "http",
          "express",
          "email",
          "script",
          "rpc",
          "httpnext",
        ],
      },
      "InternalServerErrorBody": {
        "docs": undefined,
        "properties": {
          "error": "string",
        },
      },
      "PaginationLinks": {
        "docs": "Links to use for pagination",
        "properties": {
          "next": {
            "docs": "URL of the next page, if any",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "prev": {
            "docs": "URL of the previous page, if any",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "self": {
            "docs": "URL of this page",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
      "ResultSet": {
        "docs": "Result of executing an SQL statement.",
        "properties": {
          "columnTypes": {
            "docs": "Types of columns.

The types are currently shown for types declared in a SQL table. For column types of function calls, for example, an empty string is returned.",
            "type": "list<string>",
          },
          "columns": {
            "docs": "Names of columns.

Names of columns can be defined using the \`AS\` keyword in SQL:

\`\`\`sql
SELECT author AS author, COUNT(*) AS count FROM books GROUP BY author
\`\`\`",
            "type": "list<string>",
          },
          "lastInsertRowid": {
            "docs": "ROWID of the last inserted row.

This value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
            "type": "optional<ResultSetLastInsertRowid>",
          },
          "rows": {
            "docs": "Rows produced by the statement.",
            "type": "list<list<unknown>>",
          },
          "rowsAffected": {
            "docs": "Number of rows that were affected by an UPDATE, INSERT or DELETE operation.

This value is not specified for other SQL statements.",
            "type": "double",
          },
        },
      },
      "ResultSetLastInsertRowid": {
        "discriminated": false,
        "docs": "ROWID of the last inserted row.

This value is not specified if the SQL statement was not an INSERT or if the table was not a ROWID table.",
        "union": [
          "string",
          "double",
        ],
      },
      "User": {
        "docs": "User object",
        "properties": {
          "bio": {
            "docs": "The user’s biography, if they have provided one",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of this user",
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "links": "UserLinks",
          "profileImageUrl": {
            "docs": "URL that points to the user’s profile image, if one exists",
            "type": "optional<string>",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "url": {
            "docs": "URL of this user’s profile on Val Town’s website",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "username": {
            "docs": "The user’s handle that they chose for themselves. Does not include the @ symbol",
            "type": "optional<string>",
          },
        },
      },
      "UserLinks": {
        "docs": undefined,
        "properties": {
          "self": {
            "docs": "URL of this user on this API",
            "type": "string",
            "validation": {
              "format": "uri",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerAuthScheme",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
    },
    "default-environment": "Production",
    "display-name": "Val Town API",
    "environments": {
      "Production": "https://api.val.town",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
