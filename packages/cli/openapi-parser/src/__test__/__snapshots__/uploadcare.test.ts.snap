// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser uploadcare parse open api 1`] = `
{
  "apiVersion": null,
  "basePath": null,
  "channel": [],
  "description": "### Summary
Upload API provides several ways of uploading files to Uploadcare servers in a
secure and reliable way.

### API endpoints
Upload API's root is located at \`https://upload.uploadcare.com/\`.
**Note**: All API endpoints end with a forward slash \`/\`. Please do not forget to include it.

### API clients
Please checkout [API clients](https://uploadcare.com/docs/integrations/) page for a
list of official and third party Upload API clients.

### File storage
Every uploaded file is **temporary** by nature and subject to be deleted within a
24-hour period. **Mark the file as stored** to make it permanent:
* On upload via the [\`UPLOADCARE_STORE\` flag](/api-refs/upload-api/#operation/baseUpload)
* [Store](/api-refs/rest-api/v0.6.0/#operation/storeFile) or
  [copy](/api-refs/rest-api/v0.6.0/#operation/createLocalCopy) an already uploaded
  file via [REST API](/api-refs/rest-api/v0.6.0/).

**Note**: \`UPLOADCARE_STORE=auto\` parameter delegates the choice of the
file storing behavior to a project
[auto-store](https://app.uploadcare.com/projects/-/settings/#storage)
setting (which is enabled by default). 

### File delivery
Once uploaded, your files become available via our [CDN](https://uploadcare.com/docs/delivery/).
The CDN includes on the fly image processing features and can work as a proxy.
Please check the referenced page to learn more.
",
  "endpoints": [
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Direct file uploads comply with the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) standard.
In other words, you can perform a direct upload by making an HTTP POST request with the Content-Type
header set to \`multipart/form-data\`.

**Note**: Direct file uploads support files smaller than 100 megabytes only.
If you would like to upload larger files, please use [Multipart Uploads](/api-refs/upload-api/#operation/multipartFileUploadStart) instead.

File upload example with curl:

\`\`\`
curl -F "UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY" -F "my_file.jpg=@my_file.jpg" "https://upload.uploadcare.com/base/"
\`\`\`
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The request contains too many HTTP POST fields.",
                },
              },
              "name": "request-fields-number-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "HTTP POST request parsing failed.",
                },
              },
              "name": "post-request-parser-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key \`subsystem\` has a duplicate.",
                },
              },
              "name": "file-metadata-key-duplicate",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key can not be empty.",
                },
              },
              "name": "file-metadata-key-empty",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key \`subsystem\` contains symbols not allowed by the metadata key format.",
                },
              },
              "name": "file-metadata-key-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Length of file metadata key \`aaa...\` can not be more than 64 symbols.",
                },
              },
              "name": "file-metadata-key-length-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of the file metadata key \`subsystem\` can not be empty.",
                },
              },
              "name": "file-metadata-value-empty",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of file metadata key \`subsystem\` contains symbols not allowed by the metadata value format.",
                },
              },
              "name": "file-metadata-value-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of file metadata's key \`subsystem\` can not be more than 512 symbols in length.",
                },
              },
              "name": "file-metadata-value-length-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "A file can not have more than 50 metadata keys.",
                },
              },
              "name": "file-metadata-keys-number-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`signature\` is required.",
                },
              },
              "name": "signature-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` is required.",
                },
              },
              "name": "signature-expiration-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` must be a UNIX timestamp.",
                },
              },
              "name": "signature-expiration-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Request does not contain files.",
                },
              },
              "name": "files-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File is too large.",
                },
              },
              "name": "file-size-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Uploading of these file types is not allowed.",
                },
              },
              "name": "file-type-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The file is infected by Win.Test.EICAR_HDB-1 virus.",
                },
              },
              "name": "file-infected",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "requestFiledsNumberLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "postRequestParserFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyDuplicatedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyEmptyError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyLengthTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueEmptyError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueLengthTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeysNumberTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEleven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwelve",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThirteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFourteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "filesRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFifteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileSizeLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySixteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileTypeForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeventeen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileInfectedError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "UPLOADCARE_PUB_KEY is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "UPLOADCARE_PUB_KEY is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Autostore is disabled.",
                },
              },
              "name": "auto-store-is-disabled",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                },
              },
              "name": "project-public-key-removed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked.",
                },
              },
              "name": "account-blocked",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked for non payment.",
                },
              },
              "name": "account-unpaid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Upload failed.",
                },
              },
              "name": "upload-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has reached its limits.",
                },
              },
              "name": "account-limits-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Expired signature.",
                },
              },
              "name": "signature-expiration",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Invalid signature.",
                },
              },
              "name": "signature-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadcarePublicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadcarePublicKeyInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "autoStoreDisabledError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "projectPublicKeyRemovedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountBlockedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountUnpaidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountLimitsExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "413": {
          "description": "The size of the request is too large.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The size of the request is too large.",
                },
              },
              "name": null,
            },
          ],
          "generatedName": "ContentTooLargeError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "ContentTooLargeErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": "The size of the request is too large.",
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        "429": {
          "description": "Request was throttled.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Request was throttled.",
                },
              },
              "name": null,
            },
          ],
          "generatedName": "TooManyRequestsError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "TooManyRequestsErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": "Request was throttled.",
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { base } from '@uploadcare/upload-client'

// fileData must be \`Blob\` or \`File\` or \`Buffer\`
const result = await base(
  fileData,
  {
    publicKey: 'YOUR_PUBLIC_KEY',
    store: 'auto',
    metadata: {
      subsystem: 'uploader',
      pet: 'cat'
    }
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$fileInfo = $uploader->fromPath(__DIR__ . '/squirrel.jpg', null, null, 'auto', [
    'system' => 'php-uploader',
    'pet' => 'cat',
]);
echo \\sprintf("URL: %s, ID: %s, Mime type: %s\\n", $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());
foreach ($fileInfo->getMetadata() as $key => $value) {
    echo \\sprintf("%s: %s\\n", $key, $value);
}
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
with open('test1.txt', 'rb') as file_object:
    ucare_file = uploadcare.upload(file_object)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

source_file = File.open('image.png')
uploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

guard let url = Bundle.main.url(forResource: "squirrel", withExtension: "jpg"),
      let data = try? Data(contentsOf: url) else { return }
let metadata = ["subsystem": "uploader", "pet": "cat"]

let file = try await uploadcare.uploadFile(data, withName: "random_file_name.jpg", store: .auto) { progress in
  print("progress: \\(progress)")
}
prkint(file)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uri = "content://com.android.providers.media.documents/document/image%3A1000001178".toUri()
val file = FileUploader(uploadcare, uri = uri, context = context).upload()
Log.d("TAG", file.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": null,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "UPLOADCARE_PUB_KEY": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "filename",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "BaseUploadRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "POST",
      "operationId": "baseUpload",
      "pagination": null,
      "path": "/base/",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": null,
        "name": null,
        "properties": [
          {
            "description": null,
            "key": "UPLOADCARE_PUB_KEY",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "BaseUploadRequestUploadcarePubKey",
                "groupName": null,
                "nameOverride": null,
                "schema": "projectPublicKeyType",
                "type": "reference",
              },
            },
          },
          {
            "description": null,
            "key": "UPLOADCARE_STORE",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "baseUploadRequestUploadcareStore",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "BaseUploadRequestUploadcareStore",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "storeType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": "File's content",
            "key": "{filename}",
            "schema": {
              "isArray": true,
              "isOptional": false,
              "type": "file",
            },
          },
          {
            "description": null,
            "key": "metadata[{key}]",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "baseUploadRequestMetadataKey",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "BaseUploadRequestMetadataKey",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "metadataValue",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "signature",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "baseUploadRequestSignature",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "BaseUploadRequestSignature",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "expire",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "baseUploadRequestExpire",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "BaseUploadRequestExpire",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "expireType",
                  "type": "reference",
                },
              },
            },
          },
        ],
        "type": "multipart",
      },
      "requestNameOverride": null,
      "response": {
        "description": "The file was uploaded successfully.",
        "responseProperty": null,
        "schema": {
          "additionalProperties": false,
          "allOf": [],
          "allOfPropertyConflicts": [],
          "availability": null,
          "description": "JSON object where the key is the file name of the uploaded file and
the value is the unique ID of the file on our systems.
",
          "generatedName": "BaseUploadResponse",
          "groupName": null,
          "nameOverride": null,
          "properties": [
            {
              "audiences": [],
              "availability": null,
              "conflict": {},
              "generatedName": "baseUploadResponseFilename",
              "key": "filename",
              "nameOverride": null,
              "schema": {
                "availability": null,
                "description": null,
                "generatedName": "baseUploadResponseFilename",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "BaseUploadResponseFilename",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": {
                    "default": null,
                    "format": "uuid",
                    "maxLength": null,
                    "minLength": null,
                    "pattern": null,
                    "type": "string",
                  },
                  "type": "primitive",
                },
              },
            },
          ],
          "type": "object",
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Direct uploads",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to
explicitly trigger [AWS S3 Transfer Acceleration](https://aws.amazon.com/s3/transfer-acceleration/).
When you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.

To upload large files, 3 requests are sent in sequence:
1. \`/multipart/start/\`
2. \`<presigned-url-x>\`
3. \`/multipart/complete/\`.

**Note**: Multipart uploads support files larger than 10 megabytes only.
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The request contains too many HTTP POST fields.",
                },
              },
              "name": "request-fields-number-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "HTTP POST request parsing failed.",
                },
              },
              "name": "post-request-parser-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key \`subsystem\` has a duplicate.",
                },
              },
              "name": "file-metadata-key-duplicate",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key can not be empty.",
                },
              },
              "name": "file-metadata-key-empty",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key \`subsystem\` contains symbols not allowed by the metadata key format.",
                },
              },
              "name": "file-metadata-key-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Length of file metadata key \`aaa...\` can not be more than 64 symbols.",
                },
              },
              "name": "file-metadata-key-length-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of the file metadata key \`subsystem\` can not be empty.",
                },
              },
              "name": "file-metadata-value-empty",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of file metadata key \`subsystem\` contains symbols not allowed by the metadata value format.",
                },
              },
              "name": "file-metadata-value-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of file metadata's key \`subsystem\` can not be more than 512 symbols in length.",
                },
              },
              "name": "file-metadata-value-length-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "A file can not have more than 50 metadata keys.",
                },
              },
              "name": "file-metadata-keys-number-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`signature\` is required.",
                },
              },
              "name": "signature-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` is required.",
                },
              },
              "name": "signature-expiration-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` must be a UNIX timestamp.",
                },
              },
              "name": "signature-expiration-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "filename is required.",
                },
              },
              "name": "request-param-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "size should be integer.",
                },
              },
              "name": "multipart-size-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File size exceeds project limit.",
                },
              },
              "name": "multipart-file-size-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File size can not be less than 10485760 bytes. Please use direct upload instead of multipart.",
                },
              },
              "name": "multipart-file-size-too-small",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Multipart Upload Part Size should be an integer.",
                },
              },
              "name": "multipart-part-size-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Multipart Upload Part Size can not be less than 5242880 bytes.",
                },
              },
              "name": "multipart-part-size-too-small",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Multipart Upload Part Size can not be more than 5368709120 bytes.",
                },
              },
              "name": "multipart-part-size-too-big",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "requestFiledsNumberLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "postRequestParserFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyDuplicatedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyEmptyError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyLengthTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueEmptyError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueLengthTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeysNumberTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEleven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwelve",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThirteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFourteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "requestParamRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFifteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartSizeInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySixteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartFileSizeLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeventeen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartFileSizeTooSmallError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEighteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartPartSizeInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyNineteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartPartSizeTooSmallError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwenty",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartPartSizeTooBigError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "UPLOADCARE_PUB_KEY is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "UPLOADCARE_PUB_KEY is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Autostore is disabled.",
                },
              },
              "name": "auto-store-is-disabled",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                },
              },
              "name": "project-public-key-removed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked.",
                },
              },
              "name": "account-blocked",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked for non payment.",
                },
              },
              "name": "account-unpaid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Upload failed.",
                },
              },
              "name": "upload-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has reached its limits.",
                },
              },
              "name": "account-limits-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Expired signature.",
                },
              },
              "name": "signature-expiration",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Invalid signature.",
                },
              },
              "name": "signature-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadcarePublicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadcarePublicKeyInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "autoStoreDisabledError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "projectPublicKeyRemovedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountBlockedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountUnpaidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountLimitsExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "429": {
          "description": "Request was throttled.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Request was throttled.",
                },
              },
              "name": null,
            },
          ],
          "generatedName": "TooManyRequestsError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "TooManyRequestsErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": "Request was throttled.",
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { multipartStart } from '@uploadcare/upload-client'

const result = await multipartStart(
  27796904,
  {
    publicKey: 'YOUR_PUBLIC_KEY',
    store: 'auto',
    fileName: 'myfile.mp4',
    contentType: 'video/mp4',
    metadata: {
      subsystem: 'uploader',
      pet: 'cat'
    }
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$path = '/path-to-large-file.zip';
$handle = \\fopen($path, 'rb');
$response = $uploader->fromResource($handle, null, null, 'auto', [
    'size' => \\filesize($path), // The "size" is the metadata key
]);
echo \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
with open('test1.txt', 'rb') as file_object:
    ucare_file = uploadcare.multipart_upload(file_object)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

source_file = File.open('image.png')
uploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

guard let url = Bundle.main.url(forResource: "Mona_Lisa_23mb", withExtension: "jpg"),
      let data = try? Data(contentsOf: url) else { return }

let metadata = ["subsystem": "uploader", "pet": "cat"]
let onProgress: (Double)->Void = { (progress) in
  print("progress: \\(progress)")
}

let file = try await uploadcare.uploadAPI.multipartUpload(data, withName: "Mona_Lisa_big.jpg", store: .auto, metadata: metadata, onProgress)
print(file)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uri = "content://com.android.providers.media.documents/document/image%3A1000001178".toUri()
val file = FileUploader(uploadcare, uri = uri, context = context).upload()
Log.d("TAG", file.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": null,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "UPLOADCARE_PUB_KEY": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
              "content_type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "content_type",
                },
              },
              "filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "filename",
                },
              },
              "size": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 1,
                },
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "parts": {
                "type": "array",
                "value": [
                  {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "<presigned-url-1>",
                    },
                  },
                  {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "<presigned-url-2>",
                    },
                  },
                  {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "<presigned-url-3>",
                    },
                  },
                  {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "<presigned-url-4>",
                    },
                  },
                  {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "<presigned-url-5>",
                    },
                  },
                ],
              },
              "uuid": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "67947755-1584-4e3f-902b-d4e2bf76a841",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "MultipartFileUploadStartRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "POST",
      "operationId": "multipartFileUploadStart",
      "pagination": null,
      "path": "/multipart/start/",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": null,
        "name": null,
        "properties": [
          {
            "description": null,
            "key": "UPLOADCARE_PUB_KEY",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "MultipartFileUploadStartRequestUploadcarePubKey",
                "groupName": null,
                "nameOverride": null,
                "schema": "projectPublicKeyType",
                "type": "reference",
              },
            },
          },
          {
            "description": null,
            "key": "UPLOADCARE_STORE",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "multipartFileUploadStartRequestUploadcareStore",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "MultipartFileUploadStartRequestUploadcareStore",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "storeType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "filename",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": "Original file name of the uploaded file",
                "generatedName": "MultipartFileUploadStartRequestFilename",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": null,
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
          {
            "description": null,
            "key": "size",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": "Precise file size of the uploaded file (in bytes).
**Note**: The size should not exceed max file size cap for your project.
",
                "generatedName": "MultipartFileUploadStartRequestSize",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "exclusiveMaximum": null,
                  "exclusiveMinimum": null,
                  "maximum": null,
                  "minimum": null,
                  "multipleOf": null,
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
          {
            "description": null,
            "key": "part_size",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "multipartFileUploadStartRequestPartSize",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": "Multipart Uploads expect that you will split the uploaded file into equally sized
parts (except for the last part) and then will upload them to AWS S3 (possibly in parallel).
By default, we assume that you will upload the files in 5 megabyte chunks,
so we return a list of presigned AWS S3 URLs accordingly.
If you intend to upload large files (for example, larger than a gigabyte),
we recommend to bump the part size and to pass the expected chunk size
to us as a value of the \`part_size\` parameter (in bytes).
",
                  "generatedName": "MultipartFileUploadStartRequestPartSize",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": {
                    "default": 5242880,
                    "exclusiveMaximum": null,
                    "exclusiveMinimum": null,
                    "maximum": 5368709120,
                    "minimum": 5242880,
                    "multipleOf": null,
                    "type": "int",
                  },
                  "type": "primitive",
                },
              },
            },
          },
          {
            "description": null,
            "key": "content_type",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": "File's MIME-type.",
                "generatedName": "MultipartFileUploadStartRequestContentType",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": null,
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
          {
            "description": null,
            "key": "metadata[{key}]",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "multipartFileUploadStartRequestMetadataKey",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "MultipartFileUploadStartRequestMetadataKey",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "metadataValue",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "signature",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "multipartFileUploadStartRequestSignature",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "MultipartFileUploadStartRequestSignature",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "expire",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "multipartFileUploadStartRequestExpire",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "MultipartFileUploadStartRequestExpire",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "expireType",
                  "type": "reference",
                },
              },
            },
          },
        ],
        "type": "multipart",
      },
      "requestNameOverride": null,
      "response": {
        "description": "Multipart upload started successfully.",
        "responseProperty": null,
        "schema": {
          "additionalProperties": false,
          "allOf": [],
          "allOfPropertyConflicts": [],
          "availability": null,
          "description": null,
          "generatedName": "MultipartFileUploadStartResponse",
          "groupName": null,
          "nameOverride": null,
          "properties": [
            {
              "audiences": [],
              "availability": null,
              "conflict": {},
              "generatedName": "multipartFileUploadStartResponseUuid",
              "key": "uuid",
              "nameOverride": null,
              "schema": {
                "availability": null,
                "description": "File's UUID.",
                "generatedName": "MultipartFileUploadStartResponseUuid",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": "uuid",
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
            {
              "audiences": [],
              "availability": null,
              "conflict": {},
              "generatedName": "multipartFileUploadStartResponseParts",
              "key": "parts",
              "nameOverride": null,
              "schema": {
                "availability": null,
                "description": null,
                "generatedName": "MultipartFileUploadStartResponseParts",
                "groupName": null,
                "nameOverride": null,
                "type": "array",
                "value": {
                  "availability": null,
                  "description": "Upload file parts here.",
                  "generatedName": "MultipartFileUploadStartResponsePartsItem",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": {
                    "default": null,
                    "format": "uri",
                    "maxLength": null,
                    "minLength": null,
                    "pattern": null,
                    "type": "string",
                  },
                  "type": "primitive",
                },
              },
            },
          ],
          "type": "object",
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Start multipart upload",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the
\`/multipart/start/\` endpoint.

Each uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.
You can upload the file parts in parallel provided that the byte order stays unchanged.

**Note**: You MUST define \`Content-Type\` header for your data.
",
      "errors": {},
      "examples": [
        {
          "type": "unknown",
          "value": {
            "code-samples": [
              {
                "code": "import { multipartUpload } from '@uploadcare/upload-client'

// partData is a chunk of the uploaded file's content
// must be \`Blob\` or \`File\` or \`Buffer\`
const result = await multipartUpload(
  partData,
  '<presigned-url-x>'
)
",
                "docs": undefined,
                "install": undefined,
                "language": "JavaScript",
                "name": "JS",
              },
              {
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$path = '/path-to-large-file.zip';
$handle = \\fopen($path, 'rb');
$response = $uploader->fromResource($handle, null, null, 'auto', [
    'size' => \\filesize($path), // The "size" is the metadata key
]);
echo \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());
",
                "docs": undefined,
                "install": undefined,
                "language": "PHP",
                "name": "PHP",
              },
              {
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
with open('test1.txt', 'rb') as file_object:
    ucare_file = uploadcare.multipart_upload(file_object)
",
                "docs": undefined,
                "install": undefined,
                "language": "Python",
                "name": "Python",
              },
              {
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

source_file = File.open('image.png')
uploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)
",
                "docs": undefined,
                "install": undefined,
                "language": "Ruby",
                "name": "Ruby",
              },
              {
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

guard let url = Bundle.main.url(forResource: "Mona_Lisa_23mb", withExtension: "jpg"),
      let data = try? Data(contentsOf: url) else { return }

let metadata = ["subsystem": "uploader", "pet": "cat"]
let onProgress: (Double)->Void = { (progress) in
  print("progress: \\(progress)")
}

let file = try await uploadcare.uploadAPI.multipartUpload(data, withName: "Mona_Lisa_big.jpg", store: .auto, metadata: metadata, onProgress)
print(file)
",
                "docs": undefined,
                "install": undefined,
                "language": "Swift",
                "name": "Swift",
              },
              {
                "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uri = "content://com.android.providers.media.documents/document/image%3A1000001178".toUri()
val file = FileUploader(uploadcare, uri = uri, context = context).upload()
Log.d("TAG", file.toString())
",
                "docs": undefined,
                "install": undefined,
                "language": "Kotlin",
                "name": "Kotlin",
              },
            ],
          },
        },
      ],
      "generatedRequestName": "MultipartFileUploadPartRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "PUT",
      "operationId": "multipartFileUploadPart",
      "pagination": null,
      "path": "/<presigned-url-x>",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": null,
        "type": "octetStream",
      },
      "requestNameOverride": null,
      "response": null,
      "sdkName": null,
      "server": [],
      "summary": "Upload individual file parts",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Once all the file parts have been uploaded successfully, complete the
upload session to assemble all the file parts into a single resulting file.
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The request contains too many HTTP POST fields.",
                },
              },
              "name": "request-fields-number-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "HTTP POST request parsing failed.",
                },
              },
              "name": "post-request-parser-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "uuid is required.",
                },
              },
              "name": "multipart-file-id-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "uuid is invalid.",
                },
              },
              "name": "uuid-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File is already uploaded.",
                },
              },
              "name": "multipart-file-already-uploaded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Uploaded size is more than expected.",
                },
              },
              "name": "multipart-upload-size-too-large",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File size mismatch. Not all parts uploaded?",
                },
              },
              "name": "multipart-upload-size-too-small",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Can not complete upload. Wrong parts size?",
                },
              },
              "name": "multipart-file-completion-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Uploading of these file types is not allowed.",
                },
              },
              "name": "file-type-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The file is infected by Win.Test.EICAR_HDB-1 virus.",
                },
              },
              "name": "file-infected",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "requestFiledsNumberLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "postRequestParserFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartFileIdRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uuidInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartFileAlreadyUploadedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartUploadSizeTooLargeError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartUploadSizeTooSmallError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "multipartFileCompletionFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileTypeForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileInfectedError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "UPLOADCARE_PUB_KEY is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "UPLOADCARE_PUB_KEY is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadcarePublicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadcarePublicKeyInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "404": {
          "description": "File with specified UUID was not found.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File is not found.",
                },
              },
              "name": "file-not-found",
            },
          ],
          "generatedName": "NotFoundError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "NotFoundErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": "fileNotFoundError",
            "type": "reference",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { multipartComplete } from '@uploadcare/upload-client'

const result = await multipartComplete(
  '67947755-1584-4e3f-902b-d4e2bf76a841',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$path = '/path-to-large-file.zip';
$handle = \\fopen($path, 'rb');
$response = $uploader->fromResource($handle, null, null, 'auto', [
    'size' => \\filesize($path), // The "size" is the metadata key
]);
echo \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
with open('test1.txt', 'rb') as file_object:
    ucare_file = uploadcare.multipart_upload(file_object)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

source_file = File.open('image.png')
uploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you

import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

guard let url = Bundle.main.url(forResource: "Mona_Lisa_23mb", withExtension: "jpg"),
      let data = try? Data(contentsOf: url) else { return }

let metadata = ["subsystem": "uploader", "pet": "cat"]
let onProgress: (Double)->Void = { (progress) in
  print("progress: \\(progress)")
}

let file = try await uploadcare.uploadAPI.multipartUpload(data, withName: "Mona_Lisa_big.jpg", store: .auto, metadata: metadata, onProgress)
print(file)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uri = "content://com.android.providers.media.documents/document/image%3A1000001178".toUri()
val file = FileUploader(uploadcare, uri = uri, context = context).upload()
Log.d("TAG", file.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": null,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "UPLOADCARE_PUB_KEY": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
              "uuid": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "uuid",
                },
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "content_info": {
                "properties": {
                  "image": {
                    "properties": {
                      "color_mode": {
                        "type": "enum",
                        "value": "RGB",
                      },
                      "datetime_original": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime",
                          "value": "2018-09-13T16:23:40",
                        },
                      },
                      "dpi": {
                        "type": "array",
                        "value": [
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                        ],
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "JPEG",
                        },
                      },
                      "geo_location": {
                        "properties": {
                          "latitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 55.62013611111111,
                            },
                          },
                          "longitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 37.66299166666666,
                            },
                          },
                        },
                        "type": "object",
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 4032,
                        },
                      },
                      "orientation": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 6,
                        },
                      },
                      "sequence": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "value": false,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 3024,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "mime": {
                    "properties": {
                      "mime": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image/jpeg",
                        },
                      },
                      "subtype": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "jpeg",
                        },
                      },
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image",
                        },
                      },
                    },
                    "type": "object",
                  },
                  "video": {
                    "properties": {
                      "audio": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 78,
                                },
                              },
                              "channels": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 2,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "aac",
                                },
                              },
                              "sample_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 44100,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 393,
                        },
                      },
                      "duration": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 261827,
                        },
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "mp4",
                        },
                      },
                      "video": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 315,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "h264",
                                },
                              },
                              "frame_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "double",
                                  "value": 30,
                                },
                              },
                              "height": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 360,
                                },
                              },
                              "width": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 640,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
              "done": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "file_id": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG0412_123.JPG",
                },
              },
              "image_info": {
                "properties": {
                  "color_mode": {
                    "type": "enum",
                    "value": "RGB",
                  },
                  "datetime_original": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime",
                      "value": "2018-09-13T16:23:40",
                    },
                  },
                  "dpi": {
                    "type": "array",
                    "value": [
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                    ],
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "JPEG",
                    },
                  },
                  "geo_location": {
                    "properties": {
                      "latitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 55.62013611111111,
                        },
                      },
                      "longitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 37.66299166666666,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "height": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 4032,
                    },
                  },
                  "orientation": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 6,
                    },
                  },
                  "sequence": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                  "width": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 3024,
                    },
                  },
                },
                "type": "object",
              },
              "is_image": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_ready": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_stored": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "metadata": {
                "type": "map",
                "value": [
                  {
                    "key": {
                      "type": "string",
                      "value": "subsystem",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "uploader",
                        },
                      },
                    },
                  },
                  {
                    "key": {
                      "type": "string",
                      "value": "pet",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "cat",
                        },
                      },
                    },
                  },
                ],
              },
              "mime_type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "image/jpeg",
                },
              },
              "original_filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG-0412_123.JPG",
                },
              },
              "s3_bucket": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "custom-s3-bucket-name",
                },
              },
              "size": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "total": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "uuid": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "video_info": {
                "properties": {
                  "audio": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 78,
                        },
                      },
                      "channels": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "2",
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "aac",
                        },
                      },
                      "sample_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 44100,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "bitrate": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 393,
                    },
                  },
                  "duration": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 261827,
                    },
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "mp4",
                    },
                  },
                  "video": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 315,
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "h264",
                        },
                      },
                      "frame_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 30,
                        },
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 360,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 640,
                        },
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "MultipartFileUploadCompleteRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "POST",
      "operationId": "multipartFileUploadComplete",
      "pagination": null,
      "path": "/multipart/complete/",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": null,
        "name": null,
        "properties": [
          {
            "description": null,
            "key": "UPLOADCARE_PUB_KEY",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "MultipartFileUploadCompleteRequestUploadcarePubKey",
                "groupName": null,
                "nameOverride": null,
                "schema": "projectPublicKeyType",
                "type": "reference",
              },
            },
          },
          {
            "description": null,
            "key": "uuid",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": "File's UUID from the \`/multipart/start/\` endpoint.",
                "generatedName": "MultipartFileUploadCompleteRequestUuid",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": "uuid",
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        ],
        "type": "multipart",
      },
      "requestNameOverride": null,
      "response": {
        "description": "The file was uploaded successfully.",
        "responseProperty": null,
        "schema": {
          "availability": null,
          "description": null,
          "generatedName": "MultipartFileUploadCompleteResponse",
          "groupName": null,
          "nameOverride": null,
          "schema": "fileUploadInfo",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Complete multipart upload",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the
fetched file to your project.

#### Upload tokens
Requests to the endpoint return a JSON dictionary with a \`token\` that can be further used
to [check the status](/api-refs/upload-api/#operation/fromURLUploadStatus) of the upload
request.

**Note:** The token is not a file ID and can't be used to address the file directly.
The actual file ID should be retrieved by calling the \`/from_url/status/\` endpoint.

#### Duplicates prevention
By default, every call to the \`/from_url/\` endpoint with the same \`source_url\` results in
a new upload leading to file duplication.

If you would like Uploadcare to keep track of the requested URLs and avoid the duplicate
uploads, pass the \`save_URL_duplicates\` and \`check_URL_duplicates\` parameters described below.
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The request contains too many HTTP POST fields.",
                },
              },
              "name": "request-fields-number-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "HTTP POST request parsing failed.",
                },
              },
              "name": "post-request-parser-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key \`subsystem\` has a duplicate.",
                },
              },
              "name": "file-metadata-key-duplicate",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key can not be empty.",
                },
              },
              "name": "file-metadata-key-empty",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File's metadata key \`subsystem\` contains symbols not allowed by the metadata key format.",
                },
              },
              "name": "file-metadata-key-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Length of file metadata key \`aaa...\` can not be more than 64 symbols.",
                },
              },
              "name": "file-metadata-key-length-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of the file metadata key \`subsystem\` can not be empty.",
                },
              },
              "name": "file-metadata-value-empty",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of file metadata key \`subsystem\` contains symbols not allowed by the metadata value format.",
                },
              },
              "name": "file-metadata-value-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Value of file metadata's key \`subsystem\` can not be more than 512 symbols in length.",
                },
              },
              "name": "file-metadata-value-length-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "A file can not have more than 50 metadata keys.",
                },
              },
              "name": "file-metadata-keys-number-too-big",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`signature\` is required.",
                },
              },
              "name": "signature-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` is required.",
                },
              },
              "name": "signature-expiration-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` must be a UNIX timestamp.",
                },
              },
              "name": "signature-expiration-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "source_url is required.",
                },
              },
              "name": "source-url-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Failed to parse URL.",
                },
              },
              "name": "url-parsing-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "No URL scheme supplied.",
                },
              },
              "name": "url-scheme-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Invalid URL scheme.",
                },
              },
              "name": "url-scheme-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "No URL host supplied.",
                },
              },
              "name": "url-host-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Source is blacklisted.",
                },
              },
              "name": "url-blacklisted",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Host does not exist.",
                },
              },
              "name": "hostname-not-found",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "URL host is malformed.",
                },
              },
              "name": "url-host-malformed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Only public IPs are allowed.",
                },
              },
              "name": "url-host-private-ip-forbidden",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "requestFiledsNumberLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "postRequestParserFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyDuplicatedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyEmptyError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeyLengthTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueEmptyError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataValueLengthTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileMetadataKeysNumberTooBigError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEleven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwelve",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThirteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFourteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "sourceURLRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFifteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlParsingFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySixteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlSchemeRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeventeen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlSchemeInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEighteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlHostRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyNineteen",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlBlacklistedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwenty",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "hostnameNotFoundError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwentyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlHostMalformedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwentyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "urlHostPrivateIPForbiddenError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Autostore is disabled.",
                },
              },
              "name": "auto-store-is-disabled",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                },
              },
              "name": "project-public-key-removed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked.",
                },
              },
              "name": "account-blocked",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked for non payment.",
                },
              },
              "name": "account-unpaid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Upload failed.",
                },
              },
              "name": "upload-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has reached its limits.",
                },
              },
              "name": "account-limits-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Expired signature.",
                },
              },
              "name": "signature-expiration",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Invalid signature.",
                },
              },
              "name": "signature-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "autoStoreDisabledError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "projectPublicKeyRemovedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountBlockedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountUnpaidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountLimitsExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyNine",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "429": {
          "description": "Request was throttled.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Request was throttled.",
                },
              },
              "name": null,
            },
          ],
          "generatedName": "TooManyRequestsError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "TooManyRequestsErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": "Request was throttled.",
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { fromUrl } from '@uploadcare/upload-client'

const result = await fromUrl(
  'https://source.unsplash.com/featured',
  {
    publicKey: 'YOUR_PUBLIC_KEY',
    metadata: {
      subsystem: 'uploader',
      pet: 'cat'
    }
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$url = 'https://source.unsplash.com/featured';
$token = $uploader->fromUrl($url, null, null, 'auto', [
    'action' => 'upload from URL', // The "Action" is the metadata key
    'checkDuplicates' => true,
    'storeDuplicates' => false,
]);
echo \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
ucare_file = uploadcare.upload_from_url_sync(
    "https://source.unsplash.com/featured",
    check_duplicates=True,
    save_duplicates=False
)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"

source_url = "https://source.unsplash.com/featured"
uploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let url = URL(string: "https://source.unsplash.com/featured")!
let task = UploadFromURLTask(sourceUrl: url)
  .store(.auto)
  .setMetadata("uploader", forKey: "subsystem")
  .setMetadata("cat", forKey: "pet")

let file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)
print(file)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uploader = UrlUploader(
    client = uploadcare,
    sourceUrl = "https://source.unsplash.com/featured"
)
val file = uploader.upload()
Log.d("TAG", file.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "type-token",
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "pub_key": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
              "source_url": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "source_url",
                },
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "token": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                },
              },
              "type": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "token",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
        {
          "codeSamples": [
            {
              "code": "import { fromUrl } from '@uploadcare/upload-client'

const result = await fromUrl(
  'https://source.unsplash.com/featured',
  {
    publicKey: 'YOUR_PUBLIC_KEY',
    metadata: {
      subsystem: 'uploader',
      pet: 'cat'
    }
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$url = 'https://source.unsplash.com/featured';
$token = $uploader->fromUrl($url, null, null, 'auto', [
    'action' => 'upload from URL', // The "Action" is the metadata key
    'checkDuplicates' => true,
    'storeDuplicates' => false,
]);
echo \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
ucare_file = uploadcare.upload_from_url_sync(
    "https://source.unsplash.com/featured",
    check_duplicates=True,
    save_duplicates=False
)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"

source_url = "https://source.unsplash.com/featured"
uploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let url = URL(string: "https://source.unsplash.com/featured")!
let task = UploadFromURLTask(sourceUrl: url)
  .store(.auto)
  .setMetadata("uploader", forKey: "subsystem")
  .setMetadata("cat", forKey: "pet")

let file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)
print(file)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uploader = UrlUploader(
    client = uploadcare,
    sourceUrl = "https://source.unsplash.com/featured"
)
val file = uploader.upload()
Log.d("TAG", file.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "type-file-info",
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "pub_key": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
              "source_url": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "source_url",
                },
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "content_info": {
                "properties": {
                  "image": {
                    "properties": {
                      "color_mode": {
                        "type": "enum",
                        "value": "RGB",
                      },
                      "datetime_original": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime",
                          "value": "2018-09-13T16:23:40",
                        },
                      },
                      "dpi": {
                        "type": "array",
                        "value": [
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                        ],
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "JPEG",
                        },
                      },
                      "geo_location": {
                        "properties": {
                          "latitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 55.62013611111111,
                            },
                          },
                          "longitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 37.66299166666666,
                            },
                          },
                        },
                        "type": "object",
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 4032,
                        },
                      },
                      "orientation": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 6,
                        },
                      },
                      "sequence": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "value": false,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 3024,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "mime": {
                    "properties": {
                      "mime": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image/jpeg",
                        },
                      },
                      "subtype": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "jpeg",
                        },
                      },
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image",
                        },
                      },
                    },
                    "type": "object",
                  },
                  "video": {
                    "properties": {
                      "audio": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 78,
                                },
                              },
                              "channels": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 2,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "aac",
                                },
                              },
                              "sample_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 44100,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 393,
                        },
                      },
                      "duration": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 261827,
                        },
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "mp4",
                        },
                      },
                      "video": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 315,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "h264",
                                },
                              },
                              "frame_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "double",
                                  "value": 30,
                                },
                              },
                              "height": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 360,
                                },
                              },
                              "width": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 640,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
              "done": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "file_id": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG0412_123.JPG",
                },
              },
              "image_info": {
                "properties": {
                  "color_mode": {
                    "type": "enum",
                    "value": "RGB",
                  },
                  "datetime_original": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime",
                      "value": "2018-09-13T16:23:40",
                    },
                  },
                  "dpi": {
                    "type": "array",
                    "value": [
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                    ],
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "JPEG",
                    },
                  },
                  "geo_location": {
                    "properties": {
                      "latitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 55.62013611111111,
                        },
                      },
                      "longitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 37.66299166666666,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "height": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 4032,
                    },
                  },
                  "orientation": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 6,
                    },
                  },
                  "sequence": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                  "width": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 3024,
                    },
                  },
                },
                "type": "object",
              },
              "is_image": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_ready": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_stored": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "metadata": {
                "type": "map",
                "value": [
                  {
                    "key": {
                      "type": "string",
                      "value": "subsystem",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "uploader",
                        },
                      },
                    },
                  },
                  {
                    "key": {
                      "type": "string",
                      "value": "pet",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "cat",
                        },
                      },
                    },
                  },
                ],
              },
              "mime_type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "image/jpeg",
                },
              },
              "original_filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG-0412_123.JPG",
                },
              },
              "s3_bucket": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "custom-s3-bucket-name",
                },
              },
              "size": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "total": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "type": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "file_info",
                },
              },
              "uuid": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "video_info": {
                "properties": {
                  "audio": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 78,
                        },
                      },
                      "channels": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "2",
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "aac",
                        },
                      },
                      "sample_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 44100,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "bitrate": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 393,
                    },
                  },
                  "duration": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 261827,
                    },
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "mp4",
                    },
                  },
                  "video": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 315,
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "h264",
                        },
                      },
                      "frame_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 30,
                        },
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 360,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 640,
                        },
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "FromUrlUploadRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "POST",
      "operationId": "fromURLUpload",
      "pagination": null,
      "path": "/from_url/",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": null,
        "name": null,
        "properties": [
          {
            "description": null,
            "key": "pub_key",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadRequestPubKey",
                "groupName": null,
                "nameOverride": null,
                "schema": "projectPublicKeyType",
                "type": "reference",
              },
            },
          },
          {
            "description": null,
            "key": "source_url",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": "Source URL of the file to fetch and upload.

**Note**: The URL should point to a resource publicly available via HTTP/HTTPS.
",
                "generatedName": "FromUrlUploadRequestSourceUrl",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": "uri",
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
          {
            "description": null,
            "key": "store",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestStore",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "FromUrlUploadRequestStore",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "storeType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "filename",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestFilename",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": "Sets the file name of the resource fetched from the source URL.
If not defined, the file name is obtained from either HTTP
response headers or the \`source_url\`'s path.

**Note:** The filename will be sanitized to only contain the following symbols:
\`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._\`.
",
                  "generatedName": "FromUrlUploadRequestFilename",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": {
                    "default": null,
                    "format": null,
                    "maxLength": null,
                    "minLength": null,
                    "pattern": null,
                    "type": "string",
                  },
                  "type": "primitive",
                },
              },
            },
          },
          {
            "description": null,
            "key": "check_URL_duplicates",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestCheckUrlDuplicates",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "default": {
                    "availability": null,
                    "casing": {
                      "camel": null,
                      "pascal": null,
                      "screamingSnake": null,
                      "snake": null,
                    },
                    "description": null,
                    "generatedName": "Zero",
                    "nameOverride": null,
                    "value": "0",
                  },
                  "description": "If set to "1", enables the \`source_url\` duplicates prevention.
Specifically, if the \`source_url\` had already been fetched and uploaded previously,
this request will return information about the already uploaded file.
",
                  "generatedName": "FromUrlUploadRequestCheckUrlDuplicates",
                  "groupName": null,
                  "nameOverride": null,
                  "type": "enum",
                  "values": [
                    {
                      "availability": null,
                      "casing": {
                        "camel": null,
                        "pascal": null,
                        "screamingSnake": null,
                        "snake": null,
                      },
                      "description": null,
                      "generatedName": "Zero",
                      "nameOverride": null,
                      "value": "0",
                    },
                    {
                      "availability": null,
                      "casing": {
                        "camel": null,
                        "pascal": null,
                        "screamingSnake": null,
                        "snake": null,
                      },
                      "description": null,
                      "generatedName": "One",
                      "nameOverride": null,
                      "value": "1",
                    },
                  ],
                },
              },
            },
          },
          {
            "description": null,
            "key": "save_URL_duplicates",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestSaveUrlDuplicates",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "default": null,
                  "description": "Determines if the requested \`source_url\` should be kept in the history of
fetched/uploaded URLs. If the value is not defined explicitly, it is set
to the value of the \`check_URL_duplicates\` parameter.
",
                  "generatedName": "FromUrlUploadRequestSaveUrlDuplicates",
                  "groupName": null,
                  "nameOverride": null,
                  "type": "enum",
                  "values": [
                    {
                      "availability": null,
                      "casing": {
                        "camel": null,
                        "pascal": null,
                        "screamingSnake": null,
                        "snake": null,
                      },
                      "description": null,
                      "generatedName": "Zero",
                      "nameOverride": null,
                      "value": "0",
                    },
                    {
                      "availability": null,
                      "casing": {
                        "camel": null,
                        "pascal": null,
                        "screamingSnake": null,
                        "snake": null,
                      },
                      "description": null,
                      "generatedName": "One",
                      "nameOverride": null,
                      "value": "1",
                    },
                  ],
                },
              },
            },
          },
          {
            "description": null,
            "key": "metadata[{key}]",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestMetadataKey",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "FromUrlUploadRequestMetadataKey",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "metadataValue",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "signature",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestSignature",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "FromUrlUploadRequestSignature",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "expire",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "fromUrlUploadRequestExpire",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "FromUrlUploadRequestExpire",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "expireType",
                  "type": "reference",
                },
              },
            },
          },
        ],
        "type": "multipart",
      },
      "requestNameOverride": null,
      "response": {
        "description": "Status Token or File Info of an already downloaded file.",
        "responseProperty": null,
        "schema": {
          "type": "oneOf",
          "value": {
            "availability": null,
            "description": null,
            "generatedName": "FromUrlUploadResponse",
            "groupName": null,
            "nameOverride": null,
            "schemas": [
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadResponseZero",
                "groupName": null,
                "nameOverride": null,
                "schema": "fromURLUploadResponseSchema",
                "type": "reference",
              },
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadResponseOne",
                "groupName": null,
                "nameOverride": null,
                "schema": "fileUploadInfoFromURL",
                "type": "reference",
              },
            ],
            "type": "undisciminated",
          },
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Upload files from URLs",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "The endpoint notifies about the progress of the task by changing the value of the \`status\` field:
  * the field is set to \`waiting\` initially
  * once the system starts processing the request, the field is set to \`progress\`
  * if the file is fetched and uploaded successfully, the \`status\` field is set to \`success\`
    and the endpoint returns a JSON object holding information about the uploaded file
  * if the system fails to fetch/upload the file, the \`status\` field is set to \`error\` and
    the \`error\` field is set to the cause of the error.
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "token is required.",
                },
              },
              "name": "token-required",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "BadRequestErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": "tokenRequiredError",
            "type": "reference",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'

const result = await fromUrlStatus(
  '945ebb27-1fd6-46c6-a859-b9893712d650',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');
echo \\sprintf('Upload status is %s', $status);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')
print(file.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

token = '945ebb27-1fd6-46c6-a859-b9893712d650'
puts Uploadcare::Uploader.get_upload_from_url_status(token)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let status = try await uploadcare.uploadAPI.uploadStatus(forToken: "945ebb27-1fd6-46c6-a859-b9893712d650")
print(status)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val status = uploadcare.getFromUrlStatus(token = "945ebb27-1fd6-46c6-a859-b9893712d650")
Log.d("TAG", status.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "status-waiting",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "status": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "waiting",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
        {
          "codeSamples": [
            {
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'

const result = await fromUrlStatus(
  '945ebb27-1fd6-46c6-a859-b9893712d650',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');
echo \\sprintf('Upload status is %s', $status);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')
print(file.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

token = '945ebb27-1fd6-46c6-a859-b9893712d650'
puts Uploadcare::Uploader.get_upload_from_url_status(token)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let status = try await uploadcare.uploadAPI.uploadStatus(forToken: "945ebb27-1fd6-46c6-a859-b9893712d650")
print(status)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val status = uploadcare.getFromUrlStatus(token = "945ebb27-1fd6-46c6-a859-b9893712d650")
Log.d("TAG", status.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "status-progress",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "done": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "value": 134427,
                },
              },
              "status": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "progress",
                },
              },
              "total": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "value": 732434,
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
        {
          "codeSamples": [
            {
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'

const result = await fromUrlStatus(
  '945ebb27-1fd6-46c6-a859-b9893712d650',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');
echo \\sprintf('Upload status is %s', $status);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')
print(file.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

token = '945ebb27-1fd6-46c6-a859-b9893712d650'
puts Uploadcare::Uploader.get_upload_from_url_status(token)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let status = try await uploadcare.uploadAPI.uploadStatus(forToken: "945ebb27-1fd6-46c6-a859-b9893712d650")
print(status)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val status = uploadcare.getFromUrlStatus(token = "945ebb27-1fd6-46c6-a859-b9893712d650")
Log.d("TAG", status.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "status-success",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "content_info": {
                "properties": {
                  "image": {
                    "properties": {
                      "color_mode": {
                        "type": "enum",
                        "value": "RGB",
                      },
                      "datetime_original": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime",
                          "value": "2018-09-13T16:23:40",
                        },
                      },
                      "dpi": {
                        "type": "array",
                        "value": [
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                        ],
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "JPEG",
                        },
                      },
                      "geo_location": {
                        "properties": {
                          "latitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 55.62013611111111,
                            },
                          },
                          "longitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 37.66299166666666,
                            },
                          },
                        },
                        "type": "object",
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 4032,
                        },
                      },
                      "orientation": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 6,
                        },
                      },
                      "sequence": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "value": false,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 3024,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "mime": {
                    "properties": {
                      "mime": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image/jpeg",
                        },
                      },
                      "subtype": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "jpeg",
                        },
                      },
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image",
                        },
                      },
                    },
                    "type": "object",
                  },
                  "video": {
                    "properties": {
                      "audio": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 78,
                                },
                              },
                              "channels": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 2,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "aac",
                                },
                              },
                              "sample_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 44100,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 393,
                        },
                      },
                      "duration": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 261827,
                        },
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "mp4",
                        },
                      },
                      "video": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 315,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "h264",
                                },
                              },
                              "frame_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "double",
                                  "value": 30,
                                },
                              },
                              "height": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 360,
                                },
                              },
                              "width": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 640,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
              "done": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "file_id": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG0412_123.JPG",
                },
              },
              "image_info": {
                "properties": {
                  "color_mode": {
                    "type": "enum",
                    "value": "RGB",
                  },
                  "datetime_original": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime",
                      "value": "2018-09-13T16:23:40",
                    },
                  },
                  "dpi": {
                    "type": "array",
                    "value": [
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                    ],
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "JPEG",
                    },
                  },
                  "geo_location": {
                    "properties": {
                      "latitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 55.62013611111111,
                        },
                      },
                      "longitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 37.66299166666666,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "height": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 4032,
                    },
                  },
                  "orientation": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 6,
                    },
                  },
                  "sequence": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                  "width": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 3024,
                    },
                  },
                },
                "type": "object",
              },
              "is_image": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_ready": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_stored": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "metadata": {
                "type": "map",
                "value": [
                  {
                    "key": {
                      "type": "string",
                      "value": "subsystem",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "uploader",
                        },
                      },
                    },
                  },
                  {
                    "key": {
                      "type": "string",
                      "value": "pet",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "cat",
                        },
                      },
                    },
                  },
                ],
              },
              "mime_type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "image/jpeg",
                },
              },
              "original_filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG-0412_123.JPG",
                },
              },
              "s3_bucket": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "custom-s3-bucket-name",
                },
              },
              "size": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "status": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "success",
                },
              },
              "total": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "uuid": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "video_info": {
                "properties": {
                  "audio": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 78,
                        },
                      },
                      "channels": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "2",
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "aac",
                        },
                      },
                      "sample_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 44100,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "bitrate": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 393,
                    },
                  },
                  "duration": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 261827,
                    },
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "mp4",
                    },
                  },
                  "video": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 315,
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "h264",
                        },
                      },
                      "frame_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 30,
                        },
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 360,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 640,
                        },
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "type": "full",
        },
        {
          "codeSamples": [
            {
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'

const result = await fromUrlStatus(
  '945ebb27-1fd6-46c6-a859-b9893712d650',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');
echo \\sprintf('Upload status is %s', $status);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')
print(file.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

token = '945ebb27-1fd6-46c6-a859-b9893712d650'
puts Uploadcare::Uploader.get_upload_from_url_status(token)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let status = try await uploadcare.uploadAPI.uploadStatus(forToken: "945ebb27-1fd6-46c6-a859-b9893712d650")
print(status)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val status = uploadcare.getFromUrlStatus(token = "945ebb27-1fd6-46c6-a859-b9893712d650")
Log.d("TAG", status.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "status-error",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "error": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "HTTP client error: 404.",
                },
              },
              "error_code": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "DownloadFileHTTPClientError",
                },
              },
              "status": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "error",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
        {
          "codeSamples": [
            {
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'

const result = await fromUrlStatus(
  '945ebb27-1fd6-46c6-a859-b9893712d650',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');
echo \\sprintf('Upload status is %s', $status);
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')
print(file.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

token = '945ebb27-1fd6-46c6-a859-b9893712d650'
puts Uploadcare::Uploader.get_upload_from_url_status(token)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let status = try await uploadcare.uploadAPI.uploadStatus(forToken: "945ebb27-1fd6-46c6-a859-b9893712d650")
print(status)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val status = uploadcare.getFromUrlStatus(token = "945ebb27-1fd6-46c6-a859-b9893712d650")
Log.d("TAG", status.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": "status-unknown",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "status": {
                "type": "literal",
                "value": {
                  "type": "string",
                  "value": "unknown",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "FromUrlUploadStatusRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "GET",
      "operationId": "fromURLUploadStatus",
      "pagination": null,
      "path": "/from_url/status/",
      "pathParameters": [],
      "queryParameters": [
        {
          "availability": null,
          "description": "Token returned by the \`/from_url/\` endpoint that identifies a request to fetch/upload a file from a URL.",
          "name": "token",
          "parameterNameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FromUrlUploadStatusRequestToken",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": "uuid",
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "request": null,
      "requestNameOverride": null,
      "response": {
        "description": "Request was processed successfully.
",
        "responseProperty": null,
        "schema": {
          "type": "oneOf",
          "value": {
            "availability": null,
            "description": null,
            "generatedName": "FromUrlUploadStatusResponse",
            "groupName": null,
            "nameOverride": null,
            "schemas": [
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadStatusResponseZero",
                "groupName": null,
                "nameOverride": null,
                "schema": "fileUploadInfoWaitingStatus",
                "type": "reference",
              },
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadStatusResponseOne",
                "groupName": null,
                "nameOverride": null,
                "schema": "fileUploadInfoProgressStatus",
                "type": "reference",
              },
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadStatusResponseTwo",
                "groupName": null,
                "nameOverride": null,
                "schema": "fileUploadInfoSuccessStatus",
                "type": "reference",
              },
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadStatusResponseThree",
                "groupName": null,
                "nameOverride": null,
                "schema": "fileUploadInfoErrorStatus",
                "type": "reference",
              },
              {
                "availability": null,
                "description": null,
                "generatedName": "FromUrlUploadStatusResponseFour",
                "groupName": null,
                "nameOverride": null,
                "schema": "fileUploadInfoUnknownStatus",
                "type": "reference",
              },
            ],
            "type": "undisciminated",
          },
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Check the status of a task to fetch/upload a file from a URL",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "file_id is required.",
                },
              },
              "name": "file-id-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "file_id is invalid.",
                },
              },
              "name": "file-id-invalid",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileIdRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "fileIdInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "404": {
          "description": "File with specified UUID was not found.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "File is not found.",
                },
              },
              "name": "file-not-found",
            },
          ],
          "generatedName": "NotFoundError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "NotFoundErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": "fileNotFoundError",
            "type": "reference",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { info } from '@uploadcare/upload-client'

const result = await info(
  'be3b4d5e-179d-460e-8a5d-69112ac86cbb',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$fileInfo = (new Uploadcare\\Api($configuration))->file()->fileInfo(string $uuid);
echo \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file = uploadcare.file('740e1b8c-1ad8-4324-b7ec-112c79d8eac2')
print(file.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

uuid = '740e1b8c-1ad8-4324-b7ec-112c79d8eac2'
info = Uploadcare::File.info(uuid)
puts info.inspect
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let file = try await uploadcare.uploadAPI.fileInfo(withFileId: "740e1b8c-1ad8-4324-b7ec-112c79d8eac2")
print(file)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val file = uploadcare.getUploadedFile(fileId = "740e1b8c-1ad8-4324-b7ec-112c79d8eac2")
Log.d("TAG", file.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": null,
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "pub_key",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
            },
            {
              "name": "file_id",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "67947755-1584-4e3f-902b-d4e2bf76a841",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "content_info": {
                "properties": {
                  "image": {
                    "properties": {
                      "color_mode": {
                        "type": "enum",
                        "value": "RGB",
                      },
                      "datetime_original": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime",
                          "value": "2018-09-13T16:23:40",
                        },
                      },
                      "dpi": {
                        "type": "array",
                        "value": [
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                          {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 72,
                            },
                          },
                        ],
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "JPEG",
                        },
                      },
                      "geo_location": {
                        "properties": {
                          "latitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 55.62013611111111,
                            },
                          },
                          "longitude": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "value": 37.66299166666666,
                            },
                          },
                        },
                        "type": "object",
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 4032,
                        },
                      },
                      "orientation": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 6,
                        },
                      },
                      "sequence": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "value": false,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 3024,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "mime": {
                    "properties": {
                      "mime": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image/jpeg",
                        },
                      },
                      "subtype": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "jpeg",
                        },
                      },
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "image",
                        },
                      },
                    },
                    "type": "object",
                  },
                  "video": {
                    "properties": {
                      "audio": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 78,
                                },
                              },
                              "channels": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 2,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "aac",
                                },
                              },
                              "sample_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 44100,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 393,
                        },
                      },
                      "duration": {
                        "type": "primitive",
                        "value": {
                          "type": "int",
                          "value": 261827,
                        },
                      },
                      "format": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "mp4",
                        },
                      },
                      "video": {
                        "type": "array",
                        "value": [
                          {
                            "properties": {
                              "bitrate": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 315,
                                },
                              },
                              "codec": {
                                "type": "primitive",
                                "value": {
                                  "type": "string",
                                  "value": "h264",
                                },
                              },
                              "frame_rate": {
                                "type": "primitive",
                                "value": {
                                  "type": "double",
                                  "value": 30,
                                },
                              },
                              "height": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 360,
                                },
                              },
                              "width": {
                                "type": "primitive",
                                "value": {
                                  "type": "int",
                                  "value": 640,
                                },
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
              "done": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "file_id": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG0412_123.JPG",
                },
              },
              "image_info": {
                "properties": {
                  "color_mode": {
                    "type": "enum",
                    "value": "RGB",
                  },
                  "datetime_original": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime",
                      "value": "2018-09-13T16:23:40",
                    },
                  },
                  "dpi": {
                    "type": "array",
                    "value": [
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                      {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 72,
                        },
                      },
                    ],
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "JPEG",
                    },
                  },
                  "geo_location": {
                    "properties": {
                      "latitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 55.62013611111111,
                        },
                      },
                      "longitude": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 37.66299166666666,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "height": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 4032,
                    },
                  },
                  "orientation": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 6,
                    },
                  },
                  "sequence": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                  "width": {
                    "type": "primitive",
                    "value": {
                      "type": "int",
                      "value": 3024,
                    },
                  },
                },
                "type": "object",
              },
              "is_image": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_ready": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "is_stored": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "value": true,
                },
              },
              "metadata": {
                "type": "map",
                "value": [
                  {
                    "key": {
                      "type": "string",
                      "value": "subsystem",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "uploader",
                        },
                      },
                    },
                  },
                  {
                    "key": {
                      "type": "string",
                      "value": "pet",
                    },
                    "value": {
                      "type": "unknown",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "cat",
                        },
                      },
                    },
                  },
                ],
              },
              "mime_type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "image/jpeg",
                },
              },
              "original_filename": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "IMG-0412_123.JPG",
                },
              },
              "s3_bucket": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "custom-s3-bucket-name",
                },
              },
              "size": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "total": {
                "type": "primitive",
                "value": {
                  "type": "int",
                  "value": 2667636,
                },
              },
              "uuid": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                },
              },
              "video_info": {
                "properties": {
                  "audio": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 78,
                        },
                      },
                      "channels": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "2",
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "aac",
                        },
                      },
                      "sample_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 44100,
                        },
                      },
                    },
                    "type": "object",
                  },
                  "bitrate": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 393,
                    },
                  },
                  "duration": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "value": 261827,
                    },
                  },
                  "format": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "mp4",
                    },
                  },
                  "video": {
                    "properties": {
                      "bitrate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 315,
                        },
                      },
                      "codec": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "value": "h264",
                        },
                      },
                      "frame_rate": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 30,
                        },
                      },
                      "height": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 360,
                        },
                      },
                      "width": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "value": 640,
                        },
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "FileUploadInfoRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "GET",
      "operationId": "fileUploadInfo",
      "pagination": null,
      "path": "/info/",
      "pathParameters": [],
      "queryParameters": [
        {
          "availability": null,
          "description": null,
          "name": "pub_key",
          "parameterNameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FileUploadInfoRequestPubKey",
            "groupName": null,
            "nameOverride": null,
            "schema": "projectPublicKeyType",
            "type": "reference",
          },
        },
        {
          "availability": null,
          "description": "File's unique ID.",
          "name": "file_id",
          "parameterNameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FileUploadInfoRequestFileId",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": "uuid",
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "request": null,
      "requestNameOverride": null,
      "response": {
        "description": "File information was retrieved successfully.",
        "responseProperty": null,
        "schema": {
          "availability": null,
          "description": null,
          "generatedName": "FileUploadInfoResponse",
          "groupName": null,
          "nameOverride": null,
          "schema": "fileUploadInfo",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Get information about an uploaded file",
      "tags": [
        "Upload",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Create a file group from a set of already uploaded files.

The most common use case for creating a file group is when a user uploads
multiple files at once and then wants to display them together.

**Note:** A group itself and files within it MUST belong to the same project.

**Note:** Groups are immutable and the only way to add/remove a file to a group
is to create a new one.
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "The request contains too many HTTP POST fields.",
                },
              },
              "name": "request-fields-number-limit-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "HTTP POST request parsing failed.",
                },
              },
              "name": "post-request-parser-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`signature\` is required.",
                },
              },
              "name": "signature-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` is required.",
                },
              },
              "name": "signature-expiration-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "\`expire\` must be a UNIX timestamp.",
                },
              },
              "name": "signature-expiration-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "This is not valid file url: wrong-uuid.",
                },
              },
              "name": "group-files-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "No files[N] parameters found.",
                },
              },
              "name": "group-file-url-parsing-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Some files not found.",
                },
              },
              "name": "group-files-not-found",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "requestFiledsNumberLimitExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "postRequestParserFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "groupFilesInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "groupFileURLParsingFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "groupFilesNotFoundError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                },
              },
              "name": "project-public-key-removed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked.",
                },
              },
              "name": "account-blocked",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has been blocked for non payment.",
                },
              },
              "name": "account-unpaid",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Upload failed.",
                },
              },
              "name": "upload-failed",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Account has reached its limits.",
                },
              },
              "name": "account-limits-exceeded",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Expired signature.",
                },
              },
              "name": "signature-expiration",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Invalid signature.",
                },
              },
              "name": "signature-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyInvalidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "projectPublicKeyRemovedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyThree",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountBlockedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFour",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountUnpaidError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyFive",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "uploadFailedError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySix",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "accountLimitsExceededError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodySeven",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureExpirationError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyEight",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { group } from '@uploadcare/upload-client'

const result = await group(
  [
    'd6d34fa9-addd-472c-868d-2e5c105f9fcd',
    'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'
  ],
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$result = $uploader->groupFiles(['d6d34fa9-addd-472c-868d-2e5c105f9fcd', 'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/']);
echo \\sprintf('Response status is %s', $result->getStatusCode());
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, File, FileGroup

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file_1 = uploadcare.file('d6d34fa9-addd-472c-868d-2e5c105f9fcd')
file_2 = uploadcare.file('b1026315-8116-4632-8364-607e64fca723/-/resize/x800/')
file_group = uploadcare.create_file_group([file_1, file_2])
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"

uuids = [
  'd6d34fa9-addd-472c-868d-2e5c105f9fcd',
  'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'
]
group = Uploadcare::Group.create(uuids)
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let filesIds = ["d6d34fa9-addd-472c-868d-2e5c105f9fcd", "b1026315-8116-4632-8364-607e64fca723/-/resize/x800/"]
let group = try await uploadAPI.createFilesGroup(fileIds: filesIds)
print(group)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val uuids = listOf(
    "d6d34fa9-addd-472c-868d-2e5c105f9fcd",
    "b1026315-8116-4632-8364-607e64fca723/-/resize/x800/"
)
val group = uploadcare.createGroup(fileIds = uuids)
Log.d("TAG", group.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": null,
          "pathParameters": [],
          "queryParameters": [],
          "request": {
            "properties": {
              "files[]": {
                "type": "array",
                "value": [
                  {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "value": "files[]",
                    },
                  },
                ],
              },
              "pub_key": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
            },
            "type": "object",
          },
          "response": {
            "properties": {
              "cdn_url": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                },
              },
              "datetime_created": {
                "type": "primitive",
                "value": {
                  "type": "datetime",
                  "value": "2018-09-12T10:03:38.686710Z",
                },
              },
              "datetime_stored": {
                "type": "primitive",
                "value": {
                  "type": "datetime",
                  "value": "2015-09-21T12:39:13.953757Z",
                },
              },
              "files": {
                "type": "array",
                "value": [
                  {
                    "type": "unknown",
                    "value": {
                      "type": "map",
                      "value": [
                        {
                          "key": {
                            "type": "string",
                            "value": "default_effects",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "resize/x800/",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "uuid",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "file_id",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "size",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "int",
                              "value": 2667636,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "total",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "int",
                              "value": 2667636,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "done",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "int",
                              "value": 2667636,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "original_filename",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "IMG-0412_123.JPG",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "filename",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "IMG0412_123.JPG",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "mime_type",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "image/jpeg",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "image_info",
                          },
                          "value": {
                            "type": "map",
                            "value": [
                              {
                                "key": {
                                  "type": "string",
                                  "value": "color_mode",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "RGB",
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "orientation",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "int",
                                    "value": 6,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "format",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "JPEG",
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "height",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "int",
                                    "value": 4032,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "width",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "int",
                                    "value": 3024,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "sequence",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "boolean",
                                    "value": false,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "geo_location",
                                },
                                "value": {
                                  "type": "map",
                                  "value": [
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "latitude",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "double",
                                          "value": 55.62013611111111,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "longitude",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "double",
                                          "value": 37.66299166666666,
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "dpi",
                                },
                                "value": {
                                  "type": "array",
                                  "value": [
                                    {
                                      "type": "primitive",
                                      "value": {
                                        "type": "int",
                                        "value": 72,
                                      },
                                    },
                                    {
                                      "type": "primitive",
                                      "value": {
                                        "type": "int",
                                        "value": 72,
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "content_info",
                          },
                          "value": {
                            "type": "map",
                            "value": [
                              {
                                "key": {
                                  "type": "string",
                                  "value": "mime",
                                },
                                "value": {
                                  "type": "map",
                                  "value": [
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "mime",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "image/jpeg",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "type",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "image",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "subtype",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "jpeg",
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "image",
                                },
                                "value": {
                                  "type": "map",
                                  "value": [
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "color_mode",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "RGB",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "orientation",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "int",
                                          "value": 6,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "format",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "JPEG",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "height",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "int",
                                          "value": 4032,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "width",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "int",
                                          "value": 3024,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "sequence",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "boolean",
                                          "value": false,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "geo_location",
                                      },
                                      "value": {
                                        "type": "map",
                                        "value": [
                                          {
                                            "key": {
                                              "type": "string",
                                              "value": "latitude",
                                            },
                                            "value": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "double",
                                                "value": 55.62013611111111,
                                              },
                                            },
                                          },
                                          {
                                            "key": {
                                              "type": "string",
                                              "value": "longitude",
                                            },
                                            "value": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "double",
                                                "value": 37.66299166666666,
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "dpi",
                                      },
                                      "value": {
                                        "type": "array",
                                        "value": [
                                          {
                                            "type": "primitive",
                                            "value": {
                                              "type": "int",
                                              "value": 72,
                                            },
                                          },
                                          {
                                            "type": "primitive",
                                            "value": {
                                              "type": "int",
                                              "value": 72,
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "metadata",
                          },
                          "value": {
                            "type": "map",
                            "value": [
                              {
                                "key": {
                                  "type": "string",
                                  "value": "subsystem",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "uploader",
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "pet",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "cat",
                                  },
                                },
                              },
                            ],
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "is_image",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean",
                              "value": true,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "is_stored",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean",
                              "value": true,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "is_ready",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean",
                              "value": true,
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
              "files_count": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "value": 1,
                },
              },
              "id": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "0d712319-b970-4602-850c-bae1ced521a6~1",
                },
              },
              "url": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "CreateFilesGroupRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "POST",
      "operationId": "createFilesGroup",
      "pagination": null,
      "path": "/group/",
      "pathParameters": [],
      "queryParameters": [],
      "request": {
        "description": null,
        "name": null,
        "properties": [
          {
            "description": null,
            "key": "pub_key",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "CreateFilesGroupRequestPubKey",
                "groupName": null,
                "nameOverride": null,
                "schema": "projectPublicKeyType",
                "type": "reference",
              },
            },
          },
          {
            "description": null,
            "key": "files[]",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": "Set of files you want to add to the group.
Each element can be a file UUID with or without the applied image
processing operations.
",
                "generatedName": "CreateFilesGroupRequestFiles",
                "groupName": null,
                "nameOverride": null,
                "type": "array",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "CreateFilesGroupRequestFilesItem",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": {
                    "default": null,
                    "format": null,
                    "maxLength": null,
                    "minLength": null,
                    "pattern": null,
                    "type": "string",
                  },
                  "type": "primitive",
                },
              },
            },
          },
          {
            "description": null,
            "key": "signature",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "createFilesGroupRequestSignature",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "CreateFilesGroupRequestSignature",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "signatureType",
                  "type": "reference",
                },
              },
            },
          },
          {
            "description": null,
            "key": "expire",
            "schema": {
              "type": "json",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "createFilesGroupRequestExpire",
                "groupName": null,
                "nameOverride": null,
                "type": "optional",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "CreateFilesGroupRequestExpire",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "expireType",
                  "type": "reference",
                },
              },
            },
          },
        ],
        "type": "multipart",
      },
      "requestNameOverride": null,
      "response": {
        "description": "The group was created successfully.",
        "responseProperty": null,
        "schema": {
          "availability": null,
          "description": null,
          "generatedName": "CreateFilesGroupResponse",
          "groupName": null,
          "nameOverride": null,
          "schema": "groupInfo",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Create a file group",
      "tags": [
        "Groups",
      ],
    },
    {
      "audiences": [],
      "authed": false,
      "availability": null,
      "description": "Returns a JSON object with information about a file group (when the group was created,
number of the files in the group, etc).
",
      "errors": {
        "400": {
          "description": "Request failed input parameters validation.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "Null characters are not allowed.",
                },
              },
              "name": "null-characters-forbidden",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "group_id is required.",
                },
              },
              "name": "group-id-required",
            },
          ],
          "generatedName": "BadRequestError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "BadRequestErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "nullCharactersForbiddenError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "BadRequestErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "groupIdRequiredError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "403": {
          "description": "Request was not allowed.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is required.",
                },
              },
              "name": "public-key-is-required",
            },
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "pub_key is invalid.",
                },
              },
              "name": "public-key-is-invalid",
            },
          ],
          "generatedName": "ForbiddenError",
          "nameOverride": null,
          "schema": {
            "type": "oneOf",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "ForbiddenErrorBody",
              "groupName": null,
              "nameOverride": null,
              "schemas": [
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyZero",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyRequiredError",
                  "type": "reference",
                },
                {
                  "availability": null,
                  "description": null,
                  "generatedName": "ForbiddenErrorBodyOne",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": "publicKeyInvalidError",
                  "type": "reference",
                },
              ],
              "type": "undisciminated",
            },
          },
        },
        "404": {
          "description": "Group with specified UUID was not found.",
          "examples": [
            {
              "description": null,
              "example": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "group_id is invalid.",
                },
              },
              "name": "group-not-found",
            },
          ],
          "generatedName": "NotFoundError",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "NotFoundErrorBody",
            "groupName": null,
            "nameOverride": null,
            "schema": "groupNotFoundError",
            "type": "reference",
          },
        },
      },
      "examples": [
        {
          "codeSamples": [
            {
              "code": "import { groupInfo } from '@uploadcare/upload-client'

const result = await groupInfo(
  '0d712319-b970-4602-850c-bae1ced521a6~1',
  {
    publicKey: 'YOUR_PUBLIC_KEY'
  }
)
",
              "description": null,
              "install": null,
              "language": "JavaScript",
              "name": "JS",
              "type": "language",
            },
            {
              "code": "<?php
$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);

$uploader = new Uploadcare\\Uploader\\Uploader($configuration);
$groupInfo = $uploader->groupInfo('0d712319-b970-4602-850c-bae1ced521a6~1');
echo $groupInfo->getBody()->getContents();
",
              "description": null,
              "install": null,
              "language": "PHP",
              "name": "PHP",
              "type": "language",
            },
            {
              "code": "from pyuploadcare import Uploadcare, FileGroup

uploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')
file_group = uploadcare.file_group('0d712319-b970-4602-850c-bae1ced521a6~1')
print(file_group.info)
",
              "description": null,
              "install": null,
              "language": "Python",
              "name": "Python",
              "type": "language",
            },
            {
              "code": "require 'uploadcare'
Uploadcare.config.public_key = "YOUR_PUBLIC_KEY"
Uploadcare.config.secret_key = "YOUR_SECRET_KEY"

uuid = '0d712319-b970-4602-850c-bae1ced521a6~1'
info = Uploadcare::Group.info(uuid)
puts info.inspect
",
              "description": null,
              "install": null,
              "language": "Ruby",
              "name": "Ruby",
              "type": "language",
            },
            {
              "code": "import Uploadcare

let uploadcare = Uploadcare(withPublicKey: "YOUR_PUBLIC_KEY", secretKey: "YOUR_SECRET_KEY")

let group = try await uploadcare.uploadAPI.filesGroupInfo(groupId: "0d712319-b970-4602-850c-bae1ced521a6~1")
print(group)
",
              "description": null,
              "install": null,
              "language": "Swift",
              "name": "Swift",
              "type": "language",
            },
            {
              "code": "import com.uploadcare.android.library.api.UploadcareClient

val uploadcare = UploadcareClient(publicKey = "YOUR_PUBLIC_KEY", secretKey = "YOUR_SECRET_KEY")

val group = uploadcare.getUploadedGroup(groupId = "0d712319-b970-4602-850c-bae1ced521a6~1")
Log.d("TAG", group.toString())
",
              "description": null,
              "install": null,
              "language": "Kotlin",
              "name": "Kotlin",
              "type": "language",
            },
          ],
          "description": null,
          "headers": [],
          "name": null,
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "pub_key",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "caa9d29da887ee88ffe6",
                },
              },
            },
            {
              "name": "group_id",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "d52d7136-a2e5-4338-9f45-affbf83b857d~2",
                },
              },
            },
          ],
          "request": null,
          "response": {
            "properties": {
              "cdn_url": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                },
              },
              "datetime_created": {
                "type": "primitive",
                "value": {
                  "type": "datetime",
                  "value": "2018-09-12T10:03:38.686710Z",
                },
              },
              "datetime_stored": {
                "type": "primitive",
                "value": {
                  "type": "datetime",
                  "value": "2015-09-21T12:39:13.953757Z",
                },
              },
              "files": {
                "type": "array",
                "value": [
                  {
                    "type": "unknown",
                    "value": {
                      "type": "map",
                      "value": [
                        {
                          "key": {
                            "type": "string",
                            "value": "default_effects",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "resize/x800/",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "uuid",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "file_id",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "size",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "int",
                              "value": 2667636,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "total",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "int",
                              "value": 2667636,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "done",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "int",
                              "value": 2667636,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "original_filename",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "IMG-0412_123.JPG",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "filename",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "IMG0412_123.JPG",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "mime_type",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "value": "image/jpeg",
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "image_info",
                          },
                          "value": {
                            "type": "map",
                            "value": [
                              {
                                "key": {
                                  "type": "string",
                                  "value": "color_mode",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "RGB",
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "orientation",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "int",
                                    "value": 6,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "format",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "JPEG",
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "height",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "int",
                                    "value": 4032,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "width",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "int",
                                    "value": 3024,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "sequence",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "boolean",
                                    "value": false,
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "geo_location",
                                },
                                "value": {
                                  "type": "map",
                                  "value": [
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "latitude",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "double",
                                          "value": 55.62013611111111,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "longitude",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "double",
                                          "value": 37.66299166666666,
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "dpi",
                                },
                                "value": {
                                  "type": "array",
                                  "value": [
                                    {
                                      "type": "primitive",
                                      "value": {
                                        "type": "int",
                                        "value": 72,
                                      },
                                    },
                                    {
                                      "type": "primitive",
                                      "value": {
                                        "type": "int",
                                        "value": 72,
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "content_info",
                          },
                          "value": {
                            "type": "map",
                            "value": [
                              {
                                "key": {
                                  "type": "string",
                                  "value": "mime",
                                },
                                "value": {
                                  "type": "map",
                                  "value": [
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "mime",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "image/jpeg",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "type",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "image",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "subtype",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "jpeg",
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "image",
                                },
                                "value": {
                                  "type": "map",
                                  "value": [
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "color_mode",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "RGB",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "orientation",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "int",
                                          "value": 6,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "format",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string",
                                          "value": "JPEG",
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "height",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "int",
                                          "value": 4032,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "width",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "int",
                                          "value": 3024,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "sequence",
                                      },
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "boolean",
                                          "value": false,
                                        },
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "geo_location",
                                      },
                                      "value": {
                                        "type": "map",
                                        "value": [
                                          {
                                            "key": {
                                              "type": "string",
                                              "value": "latitude",
                                            },
                                            "value": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "double",
                                                "value": 55.62013611111111,
                                              },
                                            },
                                          },
                                          {
                                            "key": {
                                              "type": "string",
                                              "value": "longitude",
                                            },
                                            "value": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "double",
                                                "value": 37.66299166666666,
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                    {
                                      "key": {
                                        "type": "string",
                                        "value": "dpi",
                                      },
                                      "value": {
                                        "type": "array",
                                        "value": [
                                          {
                                            "type": "primitive",
                                            "value": {
                                              "type": "int",
                                              "value": 72,
                                            },
                                          },
                                          {
                                            "type": "primitive",
                                            "value": {
                                              "type": "int",
                                              "value": 72,
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "metadata",
                          },
                          "value": {
                            "type": "map",
                            "value": [
                              {
                                "key": {
                                  "type": "string",
                                  "value": "subsystem",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "uploader",
                                  },
                                },
                              },
                              {
                                "key": {
                                  "type": "string",
                                  "value": "pet",
                                },
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string",
                                    "value": "cat",
                                  },
                                },
                              },
                            ],
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "is_image",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean",
                              "value": true,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "is_stored",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean",
                              "value": true,
                            },
                          },
                        },
                        {
                          "key": {
                            "type": "string",
                            "value": "is_ready",
                          },
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean",
                              "value": true,
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
              "files_count": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "value": 1,
                },
              },
              "id": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "0d712319-b970-4602-850c-bae1ced521a6~1",
                },
              },
              "url": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "value": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                },
              },
            },
            "type": "object",
          },
          "type": "full",
        },
      ],
      "generatedRequestName": "FilesGroupInfoRequest",
      "headers": [],
      "idempotent": null,
      "internal": null,
      "method": "GET",
      "operationId": "filesGroupInfo",
      "pagination": null,
      "path": "/group/info/",
      "pathParameters": [],
      "queryParameters": [
        {
          "availability": null,
          "description": null,
          "name": "pub_key",
          "parameterNameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FilesGroupInfoRequestPubKey",
            "groupName": null,
            "nameOverride": null,
            "schema": "projectPublicKeyType",
            "type": "reference",
          },
        },
        {
          "availability": null,
          "description": "Group's unique ID. Group IDs look like \`UUID~N\`, where the \`~N\` part reflects the number of the files in the group.
",
          "name": "group_id",
          "parameterNameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FilesGroupInfoRequestGroupId",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
      ],
      "request": null,
      "requestNameOverride": null,
      "response": {
        "description": "File group information was retrieved successfully.",
        "responseProperty": null,
        "schema": {
          "availability": null,
          "description": null,
          "generatedName": "FilesGroupInfoResponse",
          "groupName": null,
          "nameOverride": null,
          "schema": "groupInfo",
          "type": "reference",
        },
        "type": "json",
      },
      "sdkName": null,
      "server": [],
      "summary": "Get information about a file group",
      "tags": [
        "Groups",
      ],
    },
  ],
  "globalHeaders": [],
  "groups": {},
  "hasEndpointsMarkedInternal": false,
  "idempotencyHeaders": [],
  "nonRequestReferencedSchemas": [
    "projectPublicKeyType",
    "storeType",
    "metadataValue",
    "signatureType",
    "expireType",
    "requestFiledsNumberLimitExceededError",
    "postRequestParserFailedError",
    "nullCharactersForbiddenError",
    "fileMetadataKeyDuplicatedError",
    "fileMetadataKeyEmptyError",
    "fileMetadataKeyForbiddenError",
    "fileMetadataKeyLengthTooBigError",
    "fileMetadataValueEmptyError",
    "fileMetadataValueForbiddenError",
    "fileMetadataValueLengthTooBigError",
    "fileMetadataKeysNumberTooBigError",
    "signatureRequiredError",
    "signatureExpirationRequiredError",
    "signatureExpirationInvalidError",
    "filesRequiredError",
    "fileSizeLimitExceededError",
    "fileTypeForbiddenError",
    "fileInfectedError",
    "uploadcarePublicKeyRequiredError",
    "uploadcarePublicKeyInvalidError",
    "autoStoreDisabledError",
    "projectPublicKeyRemovedError",
    "accountBlockedError",
    "accountUnpaidError",
    "uploadFailedError",
    "accountLimitsExceededError",
    "signatureExpirationError",
    "signatureInvalidError",
    "requestParamRequiredError",
    "multipartSizeInvalidError",
    "multipartFileSizeLimitExceededError",
    "multipartFileSizeTooSmallError",
    "multipartPartSizeInvalidError",
    "multipartPartSizeTooSmallError",
    "multipartPartSizeTooBigError",
    "multipartFileIdRequiredError",
    "uuidInvalidError",
    "multipartFileAlreadyUploadedError",
    "multipartUploadSizeTooLargeError",
    "multipartUploadSizeTooSmallError",
    "multipartFileCompletionFailedError",
    "fileNotFoundError",
    "fileUploadInfo",
    "sourceURLRequiredError",
    "urlParsingFailedError",
    "urlSchemeRequiredError",
    "urlSchemeInvalidError",
    "urlHostRequiredError",
    "urlBlacklistedError",
    "hostnameNotFoundError",
    "urlHostMalformedError",
    "urlHostPrivateIPForbiddenError",
    "publicKeyRequiredError",
    "publicKeyInvalidError",
    "fromURLUploadResponseSchema",
    "fileUploadInfoFromURL",
    "tokenRequiredError",
    "fileUploadInfoWaitingStatus",
    "fileUploadInfoProgressStatus",
    "fileUploadInfoSuccessStatus",
    "fileUploadInfoErrorStatus",
    "fileUploadInfoUnknownStatus",
    "fileIdRequiredError",
    "fileIdInvalidError",
    "groupFilesInvalidError",
    "groupFileURLParsingFailedError",
    "groupFilesNotFoundError",
    "groupInfo",
    "groupIdRequiredError",
    "groupNotFoundError",
    "imageInfo",
    "legacyVideoInfo",
    "contentInfo",
    "metadata",
    "schemas-imageInfo",
    "videoInfo",
  ],
  "schemas": {
    "accountBlockedError": {
      "availability": null,
      "description": null,
      "generatedName": "AccountBlockedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Account has been blocked.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "accountLimitsExceededError": {
      "availability": null,
      "description": null,
      "generatedName": "AccountLimitsExceededError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Account has reached its limits.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "accountUnpaidError": {
      "availability": null,
      "description": null,
      "generatedName": "AccountUnpaidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Account has been blocked for non payment.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "autoStoreDisabledError": {
      "availability": null,
      "description": null,
      "generatedName": "AutoStoreDisabledError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Autostore is disabled.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "contentInfo": {
      "availability": null,
      "description": "Information about file content.",
      "generatedName": "ContentInfo",
      "groupName": null,
      "nameOverride": null,
      "type": "nullable",
      "value": {
        "additionalProperties": false,
        "allOf": [],
        "allOfPropertyConflicts": [],
        "availability": null,
        "description": "Information about file content.",
        "generatedName": "ContentInfo",
        "groupName": null,
        "nameOverride": null,
        "properties": [
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "contentInfoMime",
            "key": "mime",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "contentInfoMime",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "additionalProperties": false,
                "allOf": [],
                "allOfPropertyConflicts": [],
                "availability": null,
                "description": "MIME type.",
                "generatedName": "ContentInfoMime",
                "groupName": null,
                "nameOverride": null,
                "properties": [
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "contentInfoMimeMime",
                    "key": "mime",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": "Full MIME type.",
                      "generatedName": "ContentInfoMimeMime",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "format": null,
                        "maxLength": null,
                        "minLength": null,
                        "pattern": null,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "contentInfoMimeType",
                    "key": "type",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": "Type of MIME type.",
                      "generatedName": "ContentInfoMimeType",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "format": null,
                        "maxLength": null,
                        "minLength": null,
                        "pattern": null,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "contentInfoMimeSubtype",
                    "key": "subtype",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": "Subtype of MIME type.",
                      "generatedName": "ContentInfoMimeSubtype",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "format": null,
                        "maxLength": null,
                        "minLength": null,
                        "pattern": null,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                  },
                ],
                "type": "object",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "contentInfoImage",
            "key": "image",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "contentInfoImage",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "ContentInfoImage",
                "groupName": null,
                "nameOverride": null,
                "schema": "schemas-imageInfo",
                "type": "reference",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "contentInfoVideo",
            "key": "video",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "contentInfoVideo",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "ContentInfoVideo",
                "groupName": null,
                "nameOverride": null,
                "schema": "videoInfo",
                "type": "reference",
              },
            },
          },
        ],
        "type": "object",
      },
    },
    "expireType": {
      "availability": null,
      "description": "\`expire\` must be sent along with your upload request if you would like to use signed uploads.
The parameter defines the time during which your signature is valid. It's a UNIX timestamp.
See [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.
",
      "generatedName": "ExpireType",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": null,
        "exclusiveMaximum": null,
        "exclusiveMinimum": null,
        "maximum": null,
        "minimum": null,
        "multipleOf": null,
        "type": "double",
      },
      "type": "primitive",
    },
    "fileIdInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "FileIdInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "file_id is invalid.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileIdRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "FileIdRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "file_id is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileInfectedError": {
      "availability": null,
      "description": null,
      "generatedName": "FileInfectedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "The file is infected by <VIRUS-NAME> virus.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataKeyDuplicatedError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataKeyDuplicatedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File's metadata key \`<KEY>\` has a duplicate.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataKeyEmptyError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataKeyEmptyError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File's metadata key can not be empty.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataKeyForbiddenError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataKeyForbiddenError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File's metadata key \`<KEY>\` contains symbols not allowed by the metadata key format.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataKeyLengthTooBigError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataKeyLengthTooBigError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Length of file metadata key \`<KEY>\` can not be more than <LENGTH> symbols.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataKeysNumberTooBigError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataKeysNumberTooBigError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "A file can not have more than <NUMBER> metadata keys.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataValueEmptyError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataValueEmptyError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Value of the file metadata key \`<KEY>\` can not be empty.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataValueForbiddenError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataValueForbiddenError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Value of file metadata key \`<KEY>\` contains symbols not allowed by the metadata value format.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileMetadataValueLengthTooBigError": {
      "availability": null,
      "description": null,
      "generatedName": "FileMetadataValueLengthTooBigError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Value of file metadata's key \`<KEY>\` can not be more than <LENGTH> symbols in length.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileNotFoundError": {
      "availability": null,
      "description": null,
      "generatedName": "FileNotFoundError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File is not found.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileSizeLimitExceededError": {
      "availability": null,
      "description": null,
      "generatedName": "FileSizeLimitExceededError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File is too large.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileTypeForbiddenError": {
      "availability": null,
      "description": null,
      "generatedName": "FileTypeForbiddenError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Uploading of these file types is not allowed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fileUploadInfo": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": "Information about an uploaded file.",
      "generatedName": "FileUploadInfo",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoUuid",
          "key": "uuid",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "File's unique ID.",
            "generatedName": "FileUploadInfoUuid",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": "uuid",
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoFileId",
          "key": "file_id",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Same as \`uuid\`",
            "generatedName": "FileUploadInfoFileId",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": "uuid",
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoSize",
          "key": "size",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "File's size in bytes.",
            "generatedName": "FileUploadInfoSize",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "exclusiveMaximum": null,
              "exclusiveMinimum": null,
              "maximum": null,
              "minimum": null,
              "multipleOf": null,
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoTotal",
          "key": "total",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Same as \`size\`.",
            "generatedName": "FileUploadInfoTotal",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "exclusiveMaximum": null,
              "exclusiveMinimum": null,
              "maximum": null,
              "minimum": null,
              "multipleOf": null,
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoDone",
          "key": "done",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Same as \`size\`.",
            "generatedName": "FileUploadInfoDone",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "exclusiveMaximum": null,
              "exclusiveMinimum": null,
              "maximum": null,
              "minimum": null,
              "multipleOf": null,
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoOriginalFilename",
          "key": "original_filename",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Original file of the uploaded file.",
            "generatedName": "FileUploadInfoOriginalFilename",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoFilename",
          "key": "filename",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Sanitized \`original_filename\`.",
            "generatedName": "FileUploadInfoFilename",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoMimeType",
          "key": "mime_type",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "File's MIME-type.",
            "generatedName": "FileUploadInfoMimeType",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoImageInfo",
          "key": "image_info",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FileUploadInfoImageInfo",
            "groupName": null,
            "nameOverride": null,
            "schema": "imageInfo",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoVideoInfo",
          "key": "video_info",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FileUploadInfoVideoInfo",
            "groupName": null,
            "nameOverride": null,
            "schema": "legacyVideoInfo",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoContentInfo",
          "key": "content_info",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FileUploadInfoContentInfo",
            "groupName": null,
            "nameOverride": null,
            "schema": "contentInfo",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoMetadata",
          "key": "metadata",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "FileUploadInfoMetadata",
            "groupName": null,
            "nameOverride": null,
            "schema": "metadata",
            "type": "reference",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoIsImage",
          "key": "is_image",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "True if the uploaded file is an image of a supported file format.",
            "generatedName": "FileUploadInfoIsImage",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoIsStored",
          "key": "is_stored",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "True if the file has been marked as stored.",
            "generatedName": "FileUploadInfoIsStored",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoIsReady",
          "key": "is_ready",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "True if the file is ready to be fetched from Uploadcare's CDN.",
            "generatedName": "FileUploadInfoIsReady",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoS3Bucket",
          "key": "s3_bucket",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoS3Bucket",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
              "generatedName": "FileUploadInfoS3Bucket",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": null,
                "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
                "generatedName": "FileUploadInfoS3Bucket",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": null,
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "fileUploadInfoErrorStatus": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": null,
      "generatedName": "FileUploadInfoErrorStatus",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoErrorStatusStatus",
          "key": "status",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoErrorStatusStatus",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The system failed to fetch and/or upload the file.
",
              "generatedName": "FileUploadInfoErrorStatusStatus",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "error",
              },
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoErrorStatusError",
          "key": "error",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoErrorStatusError",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Human readable description of the issue with the fetch/upload task.
",
              "generatedName": "FileUploadInfoErrorStatusError",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": null,
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoErrorStatusErrorCode",
          "key": "error_code",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoErrorStatusErrorCode",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Machine readable error code.

Note: See the [Errors > FromURL upload errors](#tag/Errors) section of this
page for a full list of all possible error codes.
",
              "generatedName": "FileUploadInfoErrorStatusErrorCode",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": null,
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "fileUploadInfoFromURL": {
      "additionalProperties": false,
      "allOf": [
        {
          "availability": null,
          "description": null,
          "generatedName": "FileUploadInfo",
          "groupName": null,
          "nameOverride": null,
          "schema": "fileUploadInfo",
        },
      ],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": null,
      "generatedName": "FileUploadInfoFromUrl",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoFromUrlType",
          "key": "type",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoFromUrlType",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "FileUploadInfoFromUrlType",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "file_info",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "fileUploadInfoProgressStatus": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": null,
      "generatedName": "FileUploadInfoProgressStatus",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoProgressStatusStatus",
          "key": "status",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoProgressStatusStatus",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The system is fetching/uploading the file.
",
              "generatedName": "FileUploadInfoProgressStatusStatus",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "progress",
              },
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoProgressStatusTotal",
          "key": "total",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoProgressStatusTotal",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The expected size of the fetched file (in bytes).

**Note:** the value can be missing if the server we are fetching the file from
does not provide the information or if the server is returning the file in, for
example, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).
",
              "generatedName": "FileUploadInfoProgressStatusTotal",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": null,
                "description": "The expected size of the fetched file (in bytes).

**Note:** the value can be missing if the server we are fetching the file from
does not provide the information or if the server is returning the file in, for
example, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).
",
                "generatedName": "FileUploadInfoProgressStatusTotal",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "exclusiveMaximum": null,
                  "exclusiveMinimum": null,
                  "maximum": null,
                  "minimum": null,
                  "multipleOf": null,
                  "type": "double",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoProgressStatusDone",
          "key": "done",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoProgressStatusDone",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "How many bytes of the file have been fetched so far.
",
              "generatedName": "FileUploadInfoProgressStatusDone",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": null,
                "minimum": null,
                "multipleOf": null,
                "type": "double",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "fileUploadInfoSuccessStatus": {
      "additionalProperties": false,
      "allOf": [
        {
          "availability": null,
          "description": null,
          "generatedName": "FileUploadInfo",
          "groupName": null,
          "nameOverride": null,
          "schema": "fileUploadInfo",
        },
      ],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": null,
      "generatedName": "FileUploadInfoSuccessStatus",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoSuccessStatusStatus",
          "key": "status",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoSuccessStatusStatus",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The file has been fetched/uploaded successfully.",
              "generatedName": "FileUploadInfoSuccessStatusStatus",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "success",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "fileUploadInfoUnknownStatus": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": null,
      "generatedName": "FileUploadInfoUnknownStatus",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoUnknownStatusStatus",
          "key": "status",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoUnknownStatusStatus",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The system does not have information about the task.

Note: Uploadcare stores information about the \`/from_url/\` tasks for a limited
period of time only. The endpoint can return the status \`unknown\` for the tasks
that are tool old (or that have not been created at all).
",
              "generatedName": "FileUploadInfoUnknownStatusStatus",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "unknown",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "fileUploadInfoWaitingStatus": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": null,
      "generatedName": "FileUploadInfoWaitingStatus",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fileUploadInfoWaitingStatusStatus",
          "key": "status",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fileUploadInfoWaitingStatusStatus",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The system is preparing to handle the request.
",
              "generatedName": "FileUploadInfoWaitingStatusStatus",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "waiting",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "filesRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "FilesRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Request does not contain files.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "fromURLUploadResponseSchema": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": "\`/from_url/\` upload response.",
      "generatedName": "FromUrlUploadResponseSchema",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fromUrlUploadResponseSchemaType",
          "key": "type",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fromUrlUploadResponseSchemaType",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": null,
              "generatedName": "FromUrlUploadResponseSchemaType",
              "groupName": null,
              "nameOverride": null,
              "type": "literal",
              "value": {
                "type": "string",
                "value": "token",
              },
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "fromUrlUploadResponseSchemaToken",
          "key": "token",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "fromUrlUploadResponseSchemaToken",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Token to identify a \`/from_url/\` request.",
              "generatedName": "FromUrlUploadResponseSchemaToken",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": "uuid",
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
      ],
      "type": "object",
    },
    "groupFileURLParsingFailedError": {
      "availability": null,
      "description": null,
      "generatedName": "GroupFileUrlParsingFailedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "No files[N] parameters found.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "groupFilesInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "GroupFilesInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "This is not valid file url: %s.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "groupFilesNotFoundError": {
      "availability": null,
      "description": null,
      "generatedName": "GroupFilesNotFoundError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Some files not found.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "groupIdRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "GroupIdRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "group_id is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "groupInfo": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": "File group information object.",
      "generatedName": "GroupInfo",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "groupInfoId",
          "key": "id",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "groupInfoId",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Group's unique ID.",
              "generatedName": "GroupInfoId",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": null,
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "groupInfoDatetimeCreated",
          "key": "datetime_created",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "groupInfoDatetimeCreated",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "ISO-8601 date and time when the group was created.",
              "generatedName": "GroupInfoDatetimeCreated",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "type": "datetime",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": "Deprecated",
          "conflict": {},
          "generatedName": "groupInfoDatetimeStored",
          "key": "datetime_stored",
          "nameOverride": null,
          "schema": {
            "availability": "Deprecated",
            "description": null,
            "generatedName": "groupInfoDatetimeStored",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": "Deprecated",
              "description": "ISO-8601 date and time when the group was marked as stored.",
              "generatedName": "GroupInfoDatetimeStored",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": "Deprecated",
                "description": "ISO-8601 date and time when the group was marked as stored.",
                "generatedName": "GroupInfoDatetimeStored",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "type": "datetime",
                },
                "type": "primitive",
              },
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "groupInfoFilesCount",
          "key": "files_count",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "groupInfoFilesCount",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Number of the files in the group.",
              "generatedName": "GroupInfoFilesCount",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": null,
                "minimum": null,
                "multipleOf": null,
                "type": "double",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "groupInfoCdnUrl",
          "key": "cdn_url",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "groupInfoCdnUrl",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Group's CDN URL.",
              "generatedName": "GroupInfoCdnUrl",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": "uri",
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "groupInfoUrl",
          "key": "url",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "groupInfoUrl",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "Group's API resource URL. See the [REST API](/api-refs/rest-api/) documentation for details.",
              "generatedName": "GroupInfoUrl",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": "uri",
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "groupInfoFiles",
          "key": "files",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "groupInfoFiles",
            "groupName": null,
            "nameOverride": null,
            "type": "optional",
            "value": {
              "availability": null,
              "description": "The list of files in the group. An array may contain null values if a file has been removed.
",
              "generatedName": "GroupInfoFiles",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": null,
                "description": "The list of files in the group. An array may contain null values if a file has been removed.
",
                "generatedName": "GroupInfoFiles",
                "groupName": null,
                "nameOverride": null,
                "type": "array",
                "value": {
                  "generatedName": "GroupInfoFiles",
                  "nameOverride": null,
                  "type": "unknown",
                },
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "groupNotFoundError": {
      "availability": null,
      "description": null,
      "generatedName": "GroupNotFoundError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "group_id is invalid.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "hostnameNotFoundError": {
      "availability": null,
      "description": null,
      "generatedName": "HostnameNotFoundError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Host does not exist.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "imageInfo": {
      "availability": null,
      "description": "Image metadata.",
      "generatedName": "ImageInfo",
      "groupName": null,
      "nameOverride": null,
      "type": "nullable",
      "value": {
        "additionalProperties": false,
        "allOf": [],
        "allOfPropertyConflicts": [],
        "availability": null,
        "description": "Image metadata.",
        "generatedName": "ImageInfo",
        "groupName": null,
        "nameOverride": null,
        "properties": [
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoColorMode",
            "key": "color_mode",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "default": null,
              "description": "Image color mode.",
              "generatedName": "ImageInfoColorMode",
              "groupName": null,
              "nameOverride": null,
              "type": "enum",
              "values": [
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "RGB",
                  "nameOverride": null,
                  "value": "RGB",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "RGBA",
                  "nameOverride": null,
                  "value": "RGBA",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "RGBa",
                  "nameOverride": null,
                  "value": "RGBa",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "RGBX",
                  "nameOverride": null,
                  "value": "RGBX",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "L",
                  "nameOverride": null,
                  "value": "L",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "LA",
                  "nameOverride": null,
                  "value": "LA",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "La",
                  "nameOverride": null,
                  "value": "La",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "P",
                  "nameOverride": null,
                  "value": "P",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "PA",
                  "nameOverride": null,
                  "value": "PA",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "CMYK",
                  "nameOverride": null,
                  "value": "CMYK",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "YCbCr",
                  "nameOverride": null,
                  "value": "YCbCr",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "HSV",
                  "nameOverride": null,
                  "value": "HSV",
                },
                {
                  "availability": null,
                  "casing": {
                    "camel": null,
                    "pascal": null,
                    "screamingSnake": null,
                    "snake": null,
                  },
                  "description": null,
                  "generatedName": "LAB",
                  "nameOverride": null,
                  "value": "LAB",
                },
              ],
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoOrientation",
            "key": "orientation",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Image orientation from EXIF.",
              "generatedName": "ImageInfoOrientation",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": null,
                "description": "Image orientation from EXIF.",
                "generatedName": "ImageInfoOrientation",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "exclusiveMaximum": null,
                  "exclusiveMinimum": null,
                  "maximum": 8,
                  "minimum": 0,
                  "multipleOf": null,
                  "type": "int",
                },
                "type": "primitive",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoFormat",
            "key": "format",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Image format.",
              "generatedName": "ImageInfoFormat",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "format": null,
                "maxLength": null,
                "minLength": null,
                "pattern": null,
                "type": "string",
              },
              "type": "primitive",
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoSequence",
            "key": "sequence",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Set to true if a file contains a sequence of images (GIF for example).",
              "generatedName": "ImageInfoSequence",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "type": "boolean",
              },
              "type": "primitive",
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoHeight",
            "key": "height",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Image height in pixels.",
              "generatedName": "ImageInfoHeight",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": null,
                "minimum": null,
                "multipleOf": null,
                "type": "int",
              },
              "type": "primitive",
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoWidth",
            "key": "width",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Image width in pixels.",
              "generatedName": "ImageInfoWidth",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": null,
                "minimum": null,
                "multipleOf": null,
                "type": "int",
              },
              "type": "primitive",
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoGeoLocation",
            "key": "geo_location",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Geo-location of image from EXIF.",
              "generatedName": "ImageInfoGeoLocation",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "additionalProperties": false,
                "allOf": [],
                "allOfPropertyConflicts": [],
                "availability": null,
                "description": "Geo-location of image from EXIF.",
                "generatedName": "ImageInfoGeoLocation",
                "groupName": null,
                "nameOverride": null,
                "properties": [
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "imageInfoGeoLocationLatitude",
                    "key": "latitude",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": "Location latitude.",
                      "generatedName": "ImageInfoGeoLocationLatitude",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "exclusiveMaximum": null,
                        "exclusiveMinimum": null,
                        "maximum": null,
                        "minimum": null,
                        "multipleOf": null,
                        "type": "double",
                      },
                      "type": "primitive",
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "imageInfoGeoLocationLongitude",
                    "key": "longitude",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": "Location longitude.",
                      "generatedName": "ImageInfoGeoLocationLongitude",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "exclusiveMaximum": null,
                        "exclusiveMinimum": null,
                        "maximum": null,
                        "minimum": null,
                        "multipleOf": null,
                        "type": "double",
                      },
                      "type": "primitive",
                    },
                  },
                ],
                "type": "object",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoDatetimeOriginal",
            "key": "datetime_original",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
              "generatedName": "ImageInfoDatetimeOriginal",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": null,
                "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                "generatedName": "ImageInfoDatetimeOriginal",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "type": "datetime",
                },
                "type": "primitive",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "imageInfoDpi",
            "key": "dpi",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": "Image DPI for two dimensions.",
              "generatedName": "ImageInfoDpi",
              "groupName": null,
              "nameOverride": null,
              "type": "nullable",
              "value": {
                "availability": null,
                "description": "Image DPI for two dimensions.",
                "generatedName": "ImageInfoDpi",
                "groupName": null,
                "nameOverride": null,
                "type": "array",
                "value": {
                  "availability": null,
                  "description": null,
                  "generatedName": "ImageInfoDpiItem",
                  "groupName": null,
                  "nameOverride": null,
                  "schema": {
                    "default": null,
                    "exclusiveMaximum": null,
                    "exclusiveMinimum": null,
                    "maximum": null,
                    "minimum": null,
                    "multipleOf": null,
                    "type": "double",
                  },
                  "type": "primitive",
                },
              },
            },
          },
        ],
        "type": "object",
      },
    },
    "legacyVideoInfo": {
      "availability": null,
      "description": "Video metadata.",
      "generatedName": "LegacyVideoInfo",
      "groupName": null,
      "nameOverride": null,
      "type": "nullable",
      "value": {
        "additionalProperties": false,
        "allOf": [],
        "allOfPropertyConflicts": [],
        "availability": null,
        "description": "Video metadata.",
        "generatedName": "LegacyVideoInfo",
        "groupName": null,
        "nameOverride": null,
        "properties": [
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "legacyVideoInfoDuration",
            "key": "duration",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "legacyVideoInfoDuration",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "availability": null,
                "description": "Video file's duration in milliseconds.",
                "generatedName": "LegacyVideoInfoDuration",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "exclusiveMaximum": null,
                  "exclusiveMinimum": null,
                  "maximum": null,
                  "minimum": null,
                  "multipleOf": null,
                  "type": "double",
                },
                "type": "primitive",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "legacyVideoInfoFormat",
            "key": "format",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "legacyVideoInfoFormat",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "availability": null,
                "description": "Video file's format.",
                "generatedName": "LegacyVideoInfoFormat",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "format": null,
                  "maxLength": null,
                  "minLength": null,
                  "pattern": null,
                  "type": "string",
                },
                "type": "primitive",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "legacyVideoInfoBitrate",
            "key": "bitrate",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "legacyVideoInfoBitrate",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "availability": null,
                "description": "Video file's bitrate.",
                "generatedName": "LegacyVideoInfoBitrate",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "exclusiveMaximum": null,
                  "exclusiveMinimum": null,
                  "maximum": null,
                  "minimum": null,
                  "multipleOf": null,
                  "type": "double",
                },
                "type": "primitive",
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "legacyVideoInfoAudio",
            "key": "audio",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "legacyVideoInfoAudio",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "availability": null,
                "description": "Audio stream's metadata.",
                "generatedName": "LegacyVideoInfoAudio",
                "groupName": null,
                "nameOverride": null,
                "type": "nullable",
                "value": {
                  "additionalProperties": false,
                  "allOf": [],
                  "allOfPropertyConflicts": [],
                  "availability": null,
                  "description": "Audio stream's metadata.",
                  "generatedName": "LegacyVideoInfoAudio",
                  "groupName": null,
                  "nameOverride": null,
                  "properties": [
                    {
                      "audiences": [],
                      "availability": null,
                      "conflict": {},
                      "generatedName": "legacyVideoInfoAudioBitrate",
                      "key": "bitrate",
                      "nameOverride": null,
                      "schema": {
                        "availability": null,
                        "description": null,
                        "generatedName": "legacyVideoInfoAudioBitrate",
                        "groupName": null,
                        "nameOverride": null,
                        "type": "optional",
                        "value": {
                          "availability": null,
                          "description": "Audio stream's bitrate.",
                          "generatedName": "LegacyVideoInfoAudioBitrate",
                          "groupName": null,
                          "nameOverride": null,
                          "type": "nullable",
                          "value": {
                            "availability": null,
                            "description": "Audio stream's bitrate.",
                            "generatedName": "LegacyVideoInfoAudioBitrate",
                            "groupName": null,
                            "nameOverride": null,
                            "schema": {
                              "default": null,
                              "exclusiveMaximum": null,
                              "exclusiveMinimum": null,
                              "maximum": null,
                              "minimum": null,
                              "multipleOf": null,
                              "type": "double",
                            },
                            "type": "primitive",
                          },
                        },
                      },
                    },
                    {
                      "audiences": [],
                      "availability": null,
                      "conflict": {},
                      "generatedName": "legacyVideoInfoAudioCodec",
                      "key": "codec",
                      "nameOverride": null,
                      "schema": {
                        "availability": null,
                        "description": null,
                        "generatedName": "legacyVideoInfoAudioCodec",
                        "groupName": null,
                        "nameOverride": null,
                        "type": "optional",
                        "value": {
                          "availability": null,
                          "description": "Audio stream's codec.",
                          "generatedName": "LegacyVideoInfoAudioCodec",
                          "groupName": null,
                          "nameOverride": null,
                          "type": "nullable",
                          "value": {
                            "availability": null,
                            "description": "Audio stream's codec.",
                            "generatedName": "LegacyVideoInfoAudioCodec",
                            "groupName": null,
                            "nameOverride": null,
                            "schema": {
                              "default": null,
                              "format": null,
                              "maxLength": null,
                              "minLength": null,
                              "pattern": null,
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        },
                      },
                    },
                    {
                      "audiences": [],
                      "availability": null,
                      "conflict": {},
                      "generatedName": "legacyVideoInfoAudioSampleRate",
                      "key": "sample_rate",
                      "nameOverride": null,
                      "schema": {
                        "availability": null,
                        "description": null,
                        "generatedName": "legacyVideoInfoAudioSampleRate",
                        "groupName": null,
                        "nameOverride": null,
                        "type": "optional",
                        "value": {
                          "availability": null,
                          "description": "Audio stream's sample rate.",
                          "generatedName": "LegacyVideoInfoAudioSampleRate",
                          "groupName": null,
                          "nameOverride": null,
                          "type": "nullable",
                          "value": {
                            "availability": null,
                            "description": "Audio stream's sample rate.",
                            "generatedName": "LegacyVideoInfoAudioSampleRate",
                            "groupName": null,
                            "nameOverride": null,
                            "schema": {
                              "default": null,
                              "exclusiveMaximum": null,
                              "exclusiveMinimum": null,
                              "maximum": null,
                              "minimum": null,
                              "multipleOf": null,
                              "type": "double",
                            },
                            "type": "primitive",
                          },
                        },
                      },
                    },
                    {
                      "audiences": [],
                      "availability": null,
                      "conflict": {},
                      "generatedName": "legacyVideoInfoAudioChannels",
                      "key": "channels",
                      "nameOverride": null,
                      "schema": {
                        "availability": null,
                        "description": null,
                        "generatedName": "legacyVideoInfoAudioChannels",
                        "groupName": null,
                        "nameOverride": null,
                        "type": "optional",
                        "value": {
                          "availability": null,
                          "description": "Audio stream's number of channels.",
                          "generatedName": "LegacyVideoInfoAudioChannels",
                          "groupName": null,
                          "nameOverride": null,
                          "type": "nullable",
                          "value": {
                            "availability": null,
                            "description": "Audio stream's number of channels.",
                            "generatedName": "LegacyVideoInfoAudioChannels",
                            "groupName": null,
                            "nameOverride": null,
                            "schema": {
                              "default": null,
                              "format": null,
                              "maxLength": null,
                              "minLength": null,
                              "pattern": null,
                              "type": "string",
                            },
                            "type": "primitive",
                          },
                        },
                      },
                    },
                  ],
                  "type": "object",
                },
              },
            },
          },
          {
            "audiences": [],
            "availability": null,
            "conflict": {},
            "generatedName": "legacyVideoInfoVideo",
            "key": "video",
            "nameOverride": null,
            "schema": {
              "availability": null,
              "description": null,
              "generatedName": "legacyVideoInfoVideo",
              "groupName": null,
              "nameOverride": null,
              "type": "optional",
              "value": {
                "additionalProperties": false,
                "allOf": [],
                "allOfPropertyConflicts": [],
                "availability": null,
                "description": "Video stream's metadata.",
                "generatedName": "LegacyVideoInfoVideo",
                "groupName": null,
                "nameOverride": null,
                "properties": [
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "legacyVideoInfoVideoHeight",
                    "key": "height",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": null,
                      "generatedName": "legacyVideoInfoVideoHeight",
                      "groupName": null,
                      "nameOverride": null,
                      "type": "optional",
                      "value": {
                        "availability": null,
                        "description": "Video stream's image height.",
                        "generatedName": "LegacyVideoInfoVideoHeight",
                        "groupName": null,
                        "nameOverride": null,
                        "schema": {
                          "default": null,
                          "exclusiveMaximum": null,
                          "exclusiveMinimum": null,
                          "maximum": null,
                          "minimum": null,
                          "multipleOf": null,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "legacyVideoInfoVideoWidth",
                    "key": "width",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": null,
                      "generatedName": "legacyVideoInfoVideoWidth",
                      "groupName": null,
                      "nameOverride": null,
                      "type": "optional",
                      "value": {
                        "availability": null,
                        "description": "Video stream's image width.",
                        "generatedName": "LegacyVideoInfoVideoWidth",
                        "groupName": null,
                        "nameOverride": null,
                        "schema": {
                          "default": null,
                          "exclusiveMaximum": null,
                          "exclusiveMinimum": null,
                          "maximum": null,
                          "minimum": null,
                          "multipleOf": null,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "legacyVideoInfoVideoFrameRate",
                    "key": "frame_rate",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": null,
                      "generatedName": "legacyVideoInfoVideoFrameRate",
                      "groupName": null,
                      "nameOverride": null,
                      "type": "optional",
                      "value": {
                        "availability": null,
                        "description": "Video stream's frame rate.",
                        "generatedName": "LegacyVideoInfoVideoFrameRate",
                        "groupName": null,
                        "nameOverride": null,
                        "schema": {
                          "default": null,
                          "exclusiveMaximum": null,
                          "exclusiveMinimum": null,
                          "maximum": null,
                          "minimum": null,
                          "multipleOf": null,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "legacyVideoInfoVideoBitrate",
                    "key": "bitrate",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": null,
                      "generatedName": "legacyVideoInfoVideoBitrate",
                      "groupName": null,
                      "nameOverride": null,
                      "type": "optional",
                      "value": {
                        "availability": null,
                        "description": "Video stream's bitrate.",
                        "generatedName": "LegacyVideoInfoVideoBitrate",
                        "groupName": null,
                        "nameOverride": null,
                        "schema": {
                          "default": null,
                          "exclusiveMaximum": null,
                          "exclusiveMinimum": null,
                          "maximum": null,
                          "minimum": null,
                          "multipleOf": null,
                          "type": "double",
                        },
                        "type": "primitive",
                      },
                    },
                  },
                  {
                    "audiences": [],
                    "availability": null,
                    "conflict": {},
                    "generatedName": "legacyVideoInfoVideoCodec",
                    "key": "codec",
                    "nameOverride": null,
                    "schema": {
                      "availability": null,
                      "description": null,
                      "generatedName": "legacyVideoInfoVideoCodec",
                      "groupName": null,
                      "nameOverride": null,
                      "type": "optional",
                      "value": {
                        "availability": null,
                        "description": "Video stream codec.",
                        "generatedName": "LegacyVideoInfoVideoCodec",
                        "groupName": null,
                        "nameOverride": null,
                        "schema": {
                          "default": null,
                          "format": null,
                          "maxLength": null,
                          "minLength": null,
                          "pattern": null,
                          "type": "string",
                        },
                        "type": "primitive",
                      },
                    },
                  },
                ],
                "type": "object",
              },
            },
          },
        ],
        "type": "object",
      },
    },
    "metadata": {
      "availability": null,
      "description": "Arbitrary metadata associated with a file.",
      "generatedName": "Metadata",
      "groupName": null,
      "nameOverride": null,
      "type": "nullable",
      "value": {
        "availability": null,
        "description": "Arbitrary metadata associated with a file.",
        "generatedName": "Metadata",
        "groupName": null,
        "key": {
          "availability": null,
          "description": null,
          "generatedName": "MetadataKey",
          "groupName": null,
          "nameOverride": null,
          "schema": {
            "default": null,
            "format": null,
            "maxLength": null,
            "minLength": null,
            "pattern": null,
            "type": "string",
          },
        },
        "nameOverride": null,
        "type": "map",
        "value": {
          "generatedName": "MetadataValue",
          "nameOverride": null,
          "type": "unknown",
        },
      },
    },
    "metadataValue": {
      "availability": null,
      "description": "Arbitrary metadata associated with the file.
See [docs](https://uploadcare.com/docs/file-metadata/) and [REST API v0.7](/api-refs/rest-api/v0.7.0/#tag/File-metadata) for more information.
",
      "generatedName": "MetadataValue",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": null,
        "format": null,
        "maxLength": 512,
        "minLength": 1,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartFileAlreadyUploadedError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartFileAlreadyUploadedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File is already uploaded.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartFileCompletionFailedError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartFileCompletionFailedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Can not complete upload. Wrong parts size?",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartFileIdRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartFileIdRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "uuid is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartFileSizeLimitExceededError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartFileSizeLimitExceededError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File size exceeds project limit.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartFileSizeTooSmallError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartFileSizeTooSmallError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File size can not be less than <SIZE> bytes. Please use direct upload instead of multipart.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartPartSizeInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartPartSizeInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Multipart Upload Part Size should be an integer.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartPartSizeTooBigError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartPartSizeTooBigError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Multipart Upload Part Size can not be more than <SIZE> bytes.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartPartSizeTooSmallError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartPartSizeTooSmallError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Multipart Upload Part Size can not be less than <SIZE> bytes.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartSizeInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartSizeInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "size should be integer.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartUploadSizeTooLargeError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartUploadSizeTooLargeError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Uploaded size is more than expected.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "multipartUploadSizeTooSmallError": {
      "availability": null,
      "description": null,
      "generatedName": "MultipartUploadSizeTooSmallError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "File size mismatch. Not all parts uploaded?",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "nullCharactersForbiddenError": {
      "availability": null,
      "description": null,
      "generatedName": "NullCharactersForbiddenError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Null characters are not allowed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "postRequestParserFailedError": {
      "availability": null,
      "description": null,
      "generatedName": "PostRequestParserFailedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "HTTP POST request parsing failed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "projectPublicKeyRemovedError": {
      "availability": null,
      "description": null,
      "generatedName": "ProjectPublicKeyRemovedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Project <PUB-KEY> is marked as removed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "projectPublicKeyType": {
      "availability": null,
      "description": "Public key identifying an Uploadcare project your uploads will go to.",
      "generatedName": "ProjectPublicKeyType",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": null,
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "publicKeyInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "PublicKeyInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "pub_key is invalid.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "publicKeyRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "PublicKeyRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "pub_key is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "requestFiledsNumberLimitExceededError": {
      "availability": null,
      "description": null,
      "generatedName": "RequestFiledsNumberLimitExceededError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "The request contains too many HTTP POST fields.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "requestParamRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "RequestParamRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "<PARAMETER-NAME> is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "schemas-imageInfo": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": "Image metadata.",
      "generatedName": "SchemasImageInfo",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoColorMode",
          "key": "color_mode",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "default": null,
            "description": "Image color mode.",
            "generatedName": "SchemasImageInfoColorMode",
            "groupName": null,
            "nameOverride": null,
            "type": "enum",
            "values": [
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "RGB",
                "nameOverride": null,
                "value": "RGB",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "RGBA",
                "nameOverride": null,
                "value": "RGBA",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "RGBa",
                "nameOverride": null,
                "value": "RGBa",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "RGBX",
                "nameOverride": null,
                "value": "RGBX",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "L",
                "nameOverride": null,
                "value": "L",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "LA",
                "nameOverride": null,
                "value": "LA",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "La",
                "nameOverride": null,
                "value": "La",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "P",
                "nameOverride": null,
                "value": "P",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "PA",
                "nameOverride": null,
                "value": "PA",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "CMYK",
                "nameOverride": null,
                "value": "CMYK",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "YCbCr",
                "nameOverride": null,
                "value": "YCbCr",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "HSV",
                "nameOverride": null,
                "value": "HSV",
              },
              {
                "availability": null,
                "casing": {
                  "camel": null,
                  "pascal": null,
                  "screamingSnake": null,
                  "snake": null,
                },
                "description": null,
                "generatedName": "LAB",
                "nameOverride": null,
                "value": "LAB",
              },
            ],
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoOrientation",
          "key": "orientation",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Image orientation from EXIF.",
            "generatedName": "SchemasImageInfoOrientation",
            "groupName": null,
            "nameOverride": null,
            "type": "nullable",
            "value": {
              "availability": null,
              "description": "Image orientation from EXIF.",
              "generatedName": "SchemasImageInfoOrientation",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": 8,
                "minimum": 0,
                "multipleOf": null,
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoFormat",
          "key": "format",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Image format.",
            "generatedName": "SchemasImageInfoFormat",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoSequence",
          "key": "sequence",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Set to true if a file contains a sequence of images (GIF for example).",
            "generatedName": "SchemasImageInfoSequence",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "type": "boolean",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoHeight",
          "key": "height",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Image height in pixels.",
            "generatedName": "SchemasImageInfoHeight",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "exclusiveMaximum": null,
              "exclusiveMinimum": null,
              "maximum": null,
              "minimum": null,
              "multipleOf": null,
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoWidth",
          "key": "width",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Image width in pixels.",
            "generatedName": "SchemasImageInfoWidth",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "exclusiveMaximum": null,
              "exclusiveMinimum": null,
              "maximum": null,
              "minimum": null,
              "multipleOf": null,
              "type": "int",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoGeoLocation",
          "key": "geo_location",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Geo-location of image from EXIF.",
            "generatedName": "SchemasImageInfoGeoLocation",
            "groupName": null,
            "nameOverride": null,
            "type": "nullable",
            "value": {
              "additionalProperties": false,
              "allOf": [],
              "allOfPropertyConflicts": [],
              "availability": null,
              "description": "Geo-location of image from EXIF.",
              "generatedName": "SchemasImageInfoGeoLocation",
              "groupName": null,
              "nameOverride": null,
              "properties": [
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "schemasImageInfoGeoLocationLatitude",
                  "key": "latitude",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Location latitude.",
                    "generatedName": "SchemasImageInfoGeoLocationLatitude",
                    "groupName": null,
                    "nameOverride": null,
                    "schema": {
                      "default": null,
                      "exclusiveMaximum": null,
                      "exclusiveMinimum": null,
                      "maximum": null,
                      "minimum": null,
                      "multipleOf": null,
                      "type": "double",
                    },
                    "type": "primitive",
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "schemasImageInfoGeoLocationLongitude",
                  "key": "longitude",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Location longitude.",
                    "generatedName": "SchemasImageInfoGeoLocationLongitude",
                    "groupName": null,
                    "nameOverride": null,
                    "schema": {
                      "default": null,
                      "exclusiveMaximum": null,
                      "exclusiveMinimum": null,
                      "maximum": null,
                      "minimum": null,
                      "multipleOf": null,
                      "type": "double",
                    },
                    "type": "primitive",
                  },
                },
              ],
              "type": "object",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoDatetimeOriginal",
          "key": "datetime_original",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
            "generatedName": "SchemasImageInfoDatetimeOriginal",
            "groupName": null,
            "nameOverride": null,
            "type": "nullable",
            "value": {
              "availability": null,
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
              "generatedName": "SchemasImageInfoDatetimeOriginal",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "type": "datetime",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "schemasImageInfoDpi",
          "key": "dpi",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Image DPI for two dimensions.",
            "generatedName": "SchemasImageInfoDpi",
            "groupName": null,
            "nameOverride": null,
            "type": "nullable",
            "value": {
              "availability": null,
              "description": "Image DPI for two dimensions.",
              "generatedName": "SchemasImageInfoDpi",
              "groupName": null,
              "nameOverride": null,
              "type": "array",
              "value": {
                "availability": null,
                "description": null,
                "generatedName": "SchemasImageInfoDpiItem",
                "groupName": null,
                "nameOverride": null,
                "schema": {
                  "default": null,
                  "exclusiveMaximum": null,
                  "exclusiveMinimum": null,
                  "maximum": null,
                  "minimum": null,
                  "multipleOf": null,
                  "type": "double",
                },
                "type": "primitive",
              },
            },
          },
        },
      ],
      "type": "object",
    },
    "signatureExpirationError": {
      "availability": null,
      "description": null,
      "generatedName": "SignatureExpirationError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Expired signature.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "signatureExpirationInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "SignatureExpirationInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "\`expire\` must be a UNIX timestamp.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "signatureExpirationRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "SignatureExpirationRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "\`expire\` is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "signatureInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "SignatureInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Invalid signature.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "signatureRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "SignatureRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "\`signature\` is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "signatureType": {
      "availability": null,
      "description": "\`signature\` must be sent along with your upload request if you would like to use signed uploads.
The signature should be generated on your backend.
**Note**: the process requires knowledge of your Uploadcare Project's Secret key.
See [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.
",
      "generatedName": "SignatureType",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": null,
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "sourceURLRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "SourceUrlRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "source_url is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "storeType": {
      "availability": null,
      "default": {
        "availability": null,
        "casing": {
          "camel": null,
          "pascal": null,
          "screamingSnake": null,
          "snake": null,
        },
        "description": null,
        "generatedName": "auto",
        "nameOverride": null,
        "value": "auto",
      },
      "description": "Determines if an uploaded file should be marked as temporary or permanent.

The parameter can have the following values:
- \`0\` - do not mark an uploaded file as stored and remove it after 24 hours
- \`1\` - mark the uploaded file as stored
- \`auto\` - delegate the choice of the file-storing behavior to a project-wide setting called
  [auto-store](https://app.uploadcare.com/projects/-/settings/#storage).

The default value depends on the user registration date.

For all users registered after February 12, 2024 (UTC 13:30), the default value is \`auto\`. 
File-storing behavior depends entirely on what is set in the 
[storage settings](https://app.uploadcare.com/projects/-/settings/#storage) in the Dashboard.

For users registered before February 12, 2024, the default value is \`0\`. 
To ensure that file storage in the project matches the settings in the Dashboard,
change the value to \`auto\`.
",
      "generatedName": "StoreType",
      "groupName": null,
      "nameOverride": null,
      "type": "enum",
      "values": [
        {
          "availability": null,
          "casing": {
            "camel": null,
            "pascal": null,
            "screamingSnake": null,
            "snake": null,
          },
          "description": null,
          "generatedName": "Zero",
          "nameOverride": null,
          "value": "0",
        },
        {
          "availability": null,
          "casing": {
            "camel": null,
            "pascal": null,
            "screamingSnake": null,
            "snake": null,
          },
          "description": null,
          "generatedName": "One",
          "nameOverride": null,
          "value": "1",
        },
        {
          "availability": null,
          "casing": {
            "camel": null,
            "pascal": null,
            "screamingSnake": null,
            "snake": null,
          },
          "description": null,
          "generatedName": "auto",
          "nameOverride": null,
          "value": "auto",
        },
      ],
    },
    "tokenRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "TokenRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "token is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "uploadFailedError": {
      "availability": null,
      "description": null,
      "generatedName": "UploadFailedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Upload failed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "uploadcarePublicKeyInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "UploadcarePublicKeyInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "UPLOADCARE_PUB_KEY is invalid.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "uploadcarePublicKeyRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "UploadcarePublicKeyRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "UPLOADCARE_PUB_KEY is required.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlBlacklistedError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlBlacklistedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Source is blacklisted.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlHostMalformedError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlHostMalformedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "URL host is malformed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlHostPrivateIPForbiddenError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlHostPrivateIpForbiddenError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Only public IPs are allowed.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlHostRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlHostRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "No URL host supplied.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlParsingFailedError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlParsingFailedError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Failed to parse URL.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlSchemeInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlSchemeInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "Invalid URL scheme.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "urlSchemeRequiredError": {
      "availability": null,
      "description": null,
      "generatedName": "UrlSchemeRequiredError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "No URL scheme supplied.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "uuidInvalidError": {
      "availability": null,
      "description": null,
      "generatedName": "UuidInvalidError",
      "groupName": null,
      "nameOverride": null,
      "schema": {
        "default": "uuid is invalid.",
        "format": null,
        "maxLength": null,
        "minLength": null,
        "pattern": null,
        "type": "string",
      },
      "type": "primitive",
    },
    "videoInfo": {
      "additionalProperties": false,
      "allOf": [],
      "allOfPropertyConflicts": [],
      "availability": null,
      "description": "Video metadata.",
      "generatedName": "VideoInfo",
      "groupName": null,
      "nameOverride": null,
      "properties": [
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "videoInfoDuration",
          "key": "duration",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Video file's duration in milliseconds.",
            "generatedName": "VideoInfoDuration",
            "groupName": null,
            "nameOverride": null,
            "type": "nullable",
            "value": {
              "availability": null,
              "description": "Video file's duration in milliseconds.",
              "generatedName": "VideoInfoDuration",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": null,
                "minimum": null,
                "multipleOf": null,
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "videoInfoFormat",
          "key": "format",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Video file's format.",
            "generatedName": "VideoInfoFormat",
            "groupName": null,
            "nameOverride": null,
            "schema": {
              "default": null,
              "format": null,
              "maxLength": null,
              "minLength": null,
              "pattern": null,
              "type": "string",
            },
            "type": "primitive",
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "videoInfoBitrate",
          "key": "bitrate",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": "Video file's bitrate.",
            "generatedName": "VideoInfoBitrate",
            "groupName": null,
            "nameOverride": null,
            "type": "nullable",
            "value": {
              "availability": null,
              "description": "Video file's bitrate.",
              "generatedName": "VideoInfoBitrate",
              "groupName": null,
              "nameOverride": null,
              "schema": {
                "default": null,
                "exclusiveMaximum": null,
                "exclusiveMinimum": null,
                "maximum": null,
                "minimum": null,
                "multipleOf": null,
                "type": "int",
              },
              "type": "primitive",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "videoInfoAudio",
          "key": "audio",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "VideoInfoAudio",
            "groupName": null,
            "nameOverride": null,
            "type": "array",
            "value": {
              "additionalProperties": false,
              "allOf": [],
              "allOfPropertyConflicts": [],
              "availability": null,
              "description": "Audio stream's metadata.",
              "generatedName": "VideoInfoAudioItem",
              "groupName": null,
              "nameOverride": null,
              "properties": [
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoAudioItemBitrate",
                  "key": "bitrate",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Audio stream's bitrate.",
                    "generatedName": "VideoInfoAudioItemBitrate",
                    "groupName": null,
                    "nameOverride": null,
                    "type": "nullable",
                    "value": {
                      "availability": null,
                      "description": "Audio stream's bitrate.",
                      "generatedName": "VideoInfoAudioItemBitrate",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "exclusiveMaximum": null,
                        "exclusiveMinimum": null,
                        "maximum": null,
                        "minimum": null,
                        "multipleOf": null,
                        "type": "int",
                      },
                      "type": "primitive",
                    },
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoAudioItemCodec",
                  "key": "codec",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Audio stream's codec.",
                    "generatedName": "VideoInfoAudioItemCodec",
                    "groupName": null,
                    "nameOverride": null,
                    "type": "nullable",
                    "value": {
                      "availability": null,
                      "description": "Audio stream's codec.",
                      "generatedName": "VideoInfoAudioItemCodec",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "format": null,
                        "maxLength": null,
                        "minLength": null,
                        "pattern": null,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoAudioItemSampleRate",
                  "key": "sample_rate",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Audio stream's sample rate.",
                    "generatedName": "VideoInfoAudioItemSampleRate",
                    "groupName": null,
                    "nameOverride": null,
                    "type": "nullable",
                    "value": {
                      "availability": null,
                      "description": "Audio stream's sample rate.",
                      "generatedName": "VideoInfoAudioItemSampleRate",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "exclusiveMaximum": null,
                        "exclusiveMinimum": null,
                        "maximum": null,
                        "minimum": null,
                        "multipleOf": null,
                        "type": "int",
                      },
                      "type": "primitive",
                    },
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoAudioItemChannels",
                  "key": "channels",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Audio stream's number of channels.",
                    "generatedName": "VideoInfoAudioItemChannels",
                    "groupName": null,
                    "nameOverride": null,
                    "type": "nullable",
                    "value": {
                      "availability": null,
                      "description": "Audio stream's number of channels.",
                      "generatedName": "VideoInfoAudioItemChannels",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "exclusiveMaximum": null,
                        "exclusiveMinimum": null,
                        "maximum": null,
                        "minimum": null,
                        "multipleOf": null,
                        "type": "int",
                      },
                      "type": "primitive",
                    },
                  },
                },
              ],
              "type": "object",
            },
          },
        },
        {
          "audiences": [],
          "availability": null,
          "conflict": {},
          "generatedName": "videoInfoVideo",
          "key": "video",
          "nameOverride": null,
          "schema": {
            "availability": null,
            "description": null,
            "generatedName": "VideoInfoVideo",
            "groupName": null,
            "nameOverride": null,
            "type": "array",
            "value": {
              "additionalProperties": false,
              "allOf": [],
              "allOfPropertyConflicts": [],
              "availability": null,
              "description": "Video stream's metadata.",
              "generatedName": "VideoInfoVideoItem",
              "groupName": null,
              "nameOverride": null,
              "properties": [
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoVideoItemHeight",
                  "key": "height",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Video stream's image height.",
                    "generatedName": "VideoInfoVideoItemHeight",
                    "groupName": null,
                    "nameOverride": null,
                    "schema": {
                      "default": null,
                      "exclusiveMaximum": null,
                      "exclusiveMinimum": null,
                      "maximum": null,
                      "minimum": null,
                      "multipleOf": null,
                      "type": "int",
                    },
                    "type": "primitive",
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoVideoItemWidth",
                  "key": "width",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Video stream's image width.",
                    "generatedName": "VideoInfoVideoItemWidth",
                    "groupName": null,
                    "nameOverride": null,
                    "schema": {
                      "default": null,
                      "exclusiveMaximum": null,
                      "exclusiveMinimum": null,
                      "maximum": null,
                      "minimum": null,
                      "multipleOf": null,
                      "type": "int",
                    },
                    "type": "primitive",
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoVideoItemFrameRate",
                  "key": "frame_rate",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Video stream's frame rate.",
                    "generatedName": "VideoInfoVideoItemFrameRate",
                    "groupName": null,
                    "nameOverride": null,
                    "schema": {
                      "default": null,
                      "exclusiveMaximum": null,
                      "exclusiveMinimum": null,
                      "maximum": null,
                      "minimum": null,
                      "multipleOf": null,
                      "type": "double",
                    },
                    "type": "primitive",
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoVideoItemBitrate",
                  "key": "bitrate",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Video stream's bitrate.",
                    "generatedName": "VideoInfoVideoItemBitrate",
                    "groupName": null,
                    "nameOverride": null,
                    "type": "nullable",
                    "value": {
                      "availability": null,
                      "description": "Video stream's bitrate.",
                      "generatedName": "VideoInfoVideoItemBitrate",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "exclusiveMaximum": null,
                        "exclusiveMinimum": null,
                        "maximum": null,
                        "minimum": null,
                        "multipleOf": null,
                        "type": "int",
                      },
                      "type": "primitive",
                    },
                  },
                },
                {
                  "audiences": [],
                  "availability": null,
                  "conflict": {},
                  "generatedName": "videoInfoVideoItemCodec",
                  "key": "codec",
                  "nameOverride": null,
                  "schema": {
                    "availability": null,
                    "description": "Video stream's codec.",
                    "generatedName": "VideoInfoVideoItemCodec",
                    "groupName": null,
                    "nameOverride": null,
                    "type": "nullable",
                    "value": {
                      "availability": null,
                      "description": "Video stream's codec.",
                      "generatedName": "VideoInfoVideoItemCodec",
                      "groupName": null,
                      "nameOverride": null,
                      "schema": {
                        "default": null,
                        "format": null,
                        "maxLength": null,
                        "minLength": null,
                        "pattern": null,
                        "type": "string",
                      },
                      "type": "primitive",
                    },
                  },
                },
              ],
              "type": "object",
            },
          },
        },
      ],
      "type": "object",
    },
  },
  "securitySchemes": {},
  "servers": [
    {
      "description": "Production server",
      "name": null,
      "url": "https://upload.uploadcare.com",
    },
  ],
  "tags": {
    "orderedTagIds": [
      "Integrations",
      "Upload",
      "Groups",
      "Errors",
      "Other APIs",
    ],
    "tagsById": {
      "Errors": {
        "description": "If the request fails, Upload API returns an error response.
Error responses are returned in the form of a JSON object with an error code, an HTTP status code and an error message.
The following errors are possible.
<table>
  <tr>
    <th>Error code</th>
    <th>HTTP status code</th>
    <th>Error message</th>
  </tr>

  <tr>
    <td colspan="3" style="font-weight: bold;">Base upload errors:</td>
  </tr>
  <tr>
    <td>AccountBlockedError</td>
    <td>403</td>
    <td>Account has been blocked.</td>
  </tr>
  <tr>
    <td>AccountLimitsExceededError</td>
    <td>403</td>
    <td>Account has reached its limits.</td>
  </tr>
  <tr>
    <td>AccountUnpaidError</td>
    <td>403</td>
    <td>Account has been blocked for non payment.</td>
  </tr>
  <tr>
    <td>AutostoreDisabledError</td>
    <td>403</td>
    <td>Autostore is disabled.</td>
  </tr>
  <tr>
    <td>BaseViewsError</td>
    <td>400</td>
    <td>Request processing failed.</td>
  </tr>
  <tr>
    <td>FileMetadataKeyDuplicatedError</td>
    <td>400</td>
    <td>File's metadata key \`%s\` has a duplicate.</td>
  </tr>
  <tr>
    <td>FileMetadataKeyEmptyError</td>
    <td>400</td>
    <td>File's metadata key can not be empty.</td>
  </tr>
  <tr>
    <td>FileMetadataKeyForbiddenError</td>
    <td>400</td>
    <td>File's metadata key \`%s\` contains symbols not allowed by the metadata key format.</td>
  </tr>
  <tr>
    <td>FileMetadataKeyLengthTooBigError</td>
    <td>400</td>
    <td>Length of file metadata key \`%s\` can not be more than %d symbols.</td>
  </tr>
  <tr>
    <td>FileMetadataKeysNumberTooBigError</td>
    <td>400</td>
    <td>A file can not have more than %d metadata keys.</td>
  </tr>
  <tr>
    <td>FileMetadataValueEmptyError</td>
    <td>400</td>
    <td>Value of the file metadata key \`%s\` can not be empty.</td>
  </tr>
  <tr>
    <td>FileMetadataValueForbiddenError</td>
    <td>400</td>
    <td>Value of file metadata key \`%s\` contains symbols not allowed by the metadata value format.</td>
  </tr>
  <tr>
    <td>FileMetadataValueLengthTooBigError</td>
    <td>400</td>
    <td>Value of file metadata's key \`%s\` can not be more than %d symbols in length.</td>
  </tr>
  <tr>
    <td>FileSizeLimitExceededError</td>
    <td>400</td>
    <td>File is too large.</td>
  </tr>
  <tr>
    <td>MethodNotAllowedError</td>
    <td>405</td>
    <td>HTTP method %s is not allowed for %s</td>
  </tr>
  <tr>
    <td>NullCharactersForbiddenError</td>
    <td>400</td>
    <td>Null characters are not allowed.</td>
  </tr>
  <tr>
    <td>PostRequestParserFailedError</td>
    <td>400</td>
    <td>HTTP POST request parsing failed.</td>
  </tr>
  <tr>
    <td>ProjectPublicKeyInvalidError</td>
    <td>403</td>
    <td>%s is invalid.</td>
  </tr>
  <tr>
    <td>ProjectPublicKeyRemovedError</td>
    <td>403</td>
    <td>Project %s is marked as removed.</td>
  </tr>
  <tr>
    <td>ProjectPublicKeyRequiredError</td>
    <td>403</td>
    <td>%s is required.</td>
  </tr>
  <tr>
    <td>RequestFileNumberLimitExceededError</td>
    <td>400</td>
    <td>The request contains too many files.</td>
  </tr>
  <tr>
    <td>RequestFiledsNumberLimitExceededError</td>
    <td>400</td>
    <td>The request contains too many HTTP POST fields.</td>
  </tr>
  <tr>
    <td>RequestSizeLimitExceededError</td>
    <td>413</td>
    <td>The size of the request is too large.</td>
  </tr>
  <tr>
    <td>RequestThrottledError</td>
    <td>429</td>
    <td>Request was throttled.</td>
  </tr>
  <tr>
    <td>SignatureExpirationError</td>
    <td>403</td>
    <td>Expired signature.</td>
  </tr>
  <tr>
    <td>SignatureExpirationInvalidError</td>
    <td>400</td>
    <td>\`expire\` must be a UNIX timestamp.</td>
  </tr>
  <tr>
    <td>SignatureExpirationRequiredError</td>
    <td>400</td>
    <td>\`expire\` is required.</td>
  </tr>
  <tr>
    <td>SignatureInvalidError</td>
    <td>403</td>
    <td>Invalid signature.</td>
  </tr>
  <tr>
    <td>SignatureRequiredError</td>
    <td>400</td>
    <td>\`signature\` is required.</td>
  </tr>
  <tr>
    <td>UploadAPIError</td>
    <td>500</td>
    <td>Internal error.</td>
  </tr>
  <tr>
    <td>UploadFailedError</td>
    <td>403</td>
    <td>Upload failed.</td>
  </tr>

  <tr>
    <td colspan="3" style="font-weight: bold;">FromURL upload errors:</td>
  </tr>
  <tr>
    <td>DownloadFileError</td>
    <td>500</td>
    <td>Failed to download the file.</td>
  </tr>
  <tr>
    <td>DownloadFileHTTPClientError</td>
    <td>500</td>
    <td>HTTP client error: %s.</td>
  </tr>
  <tr>
    <td>DownloadFileHTTPNetworkError</td>
    <td>500</td>
    <td>HTTP network error: %s.</td>
  </tr>
  <tr>
    <td>DownloadFileHTTPServerError</td>
    <td>500</td>
    <td>HTTP server error: %s.</td>
  </tr>
  <tr>
    <td>DownloadFileHTTPURLValidationError</td>
    <td>500</td>
    <td>HTTP URL validation error: %s.</td>
  </tr>
  <tr>
    <td>DownloadFileInternalServerError</td>
    <td>500</td>
    <td>Internal server error.</td>
  </tr>
  <tr>
    <td>DownloadFileNotFoundError</td>
    <td>500</td>
    <td>downloaded file not found.</td>
  </tr>
  <tr>
    <td>DownloadFileSizeLimitExceededError</td>
    <td>500</td>
    <td>Downloaded file is too big: %s > %s.</td>
  </tr>
  <tr>
    <td>DownloadFileTaskFailedError</td>
    <td>500</td>
    <td>download task failed.</td>
  </tr>
  <tr>
    <td>DownloadFileTimeLimitExceededError</td>
    <td>500</td>
    <td>Failed to download the file within the allotted time limit of %s seconds.</td>
  </tr>
  <tr>
    <td>DownloadFileValidationFailedError</td>
    <td>500</td>
    <td>File validation error: %s</td>
  </tr>

  <tr>
    <td colspan="3" style="font-weight: bold;">File upload errors:</td>
  </tr>
  <tr>
    <td>FileIdInvalidError</td>
    <td>400</td>
    <td>file_id is invalid.</td>
  </tr>
  <tr>
    <td>FileIdNotUniqueError</td>
    <td>400</td>
    <td>File id must be unique.</td>
  </tr>
  <tr>
    <td>FileIdRequiredError</td>
    <td>400</td>
    <td>file_id is required.</td>
  </tr>
  <tr>
    <td>FileNotFoundError</td>
    <td>404</td>
    <td>File is not found.</td>
  </tr>
  <tr>
    <td>FileRequiredError</td>
    <td>400</td>
    <td>There should be a file.</td>
  </tr>
  <tr>
    <td>FilesNumberLimitExceededError</td>
    <td>400</td>
    <td>There are too many files.</td>
  </tr>
  <tr>
    <td>FilesRequiredError</td>
    <td>400</td>
    <td>Request does not contain files.</td>
  </tr>
  <tr>
    <td>InternalRequestForbiddenError</td>
    <td>403</td>
    <td>Forbidden request.</td>
  </tr>
  <tr>
    <td>InternalRequestInvalidError</td>
    <td>400</td>
    <td>Incorrect request.</td>
  </tr>
  <tr>
    <td>MultipartFileAlreadyUploadedError</td>
    <td>400</td>
    <td>File is already uploaded.</td>
  </tr>
  <tr>
    <td>MultipartFileCompletionFailedError</td>
    <td>400</td>
    <td>Can not complete upload. Wrong parts size?</td>
  </tr>
  <tr>
    <td>MultipartFileIdRequiredError</td>
    <td>400</td>
    <td>uuid is required.</td>
  </tr>
  <tr>
    <td>MultipartFileNotFoundError</td>
    <td>404</td>
    <td>File is not found.</td>
  </tr>
  <tr>
    <td>MultipartFileSizeLimitExceededError</td>
    <td>400</td>
    <td>File size exceeds project limit.</td>
  </tr>
  <tr>
    <td>MultipartFileSizeTooSmallError</td>
    <td>400</td>
    <td>File size can not be less than %d bytes. Please use direct upload instead of multipart.</td>
  </tr>
  <tr>
    <td>MultipartPartSizeInvalidError</td>
    <td>400</td>
    <td>Multipart Upload Part Size should be an integer.</td>
  </tr>
  <tr>
    <td>MultipartPartSizeTooBigError</td>
    <td>400</td>
    <td>Multipart Upload Part Size can not be more than %d bytes.</td>
  </tr>
  <tr>
    <td>MultipartPartSizeTooSmallError</td>
    <td>400</td>
    <td>Multipart Upload Part Size can not be less than %d bytes.</td>
  </tr>
  <tr>
    <td>MultipartSizeInvalidError</td>
    <td>400</td>
    <td>size should be integer.</td>
  </tr>
  <tr>
    <td>MultipartUploadSizeTooLargeError</td>
    <td>400</td>
    <td>Uploaded size is more than expected.</td>
  </tr>
  <tr>
    <td>MultipartUploadSizeTooSmallError</td>
    <td>400</td>
    <td>File size mismatch. Not all parts uploaded?</td>
  </tr>
  <tr>
    <td>RequestParamRequiredError</td>
    <td>400</td>
    <td>%s is required.</td>
  </tr>
  <tr>
    <td>SourceURLRequiredError</td>
    <td>400</td>
    <td>source_url is required.</td>
  </tr>
  <tr>
    <td>TokenRequiredError</td>
    <td>400</td>
    <td>token is required.</td>
  </tr>
  <tr>
    <td>UUIDInvalidError</td>
    <td>400</td>
    <td>uuid is invalid.</td>
  </tr>
  <tr>
    <td>UploadViewsError</td>
    <td>400</td>
    <td>Upload request processing failed.</td>
  </tr>
  <tr>
    <td>UploadcareFileIdDuplicatedError</td>
    <td>400</td>
    <td>UPLOADCARE_FILE_ID is duplicated. You are probably a lottery winner.</td>
  </tr>
  <tr>
    <td>UploadcareFileIdInvalidError</td>
    <td>400</td>
    <td>UPLOADCARE_FILE_ID should be a valid UUID.</td>
  </tr>
  <tr>
    <td>UploadcareFileIdRequiredError</td>
    <td>400</td>
    <td>UPLOADCARE_FILE_ID is required.</td>
  </tr>

  <tr>
    <td colspan="3" style="font-weight: bold;">File group errors:</td>
  </tr>
  <tr>
    <td>GroupFileURLParsingFailedError</td>
    <td>400</td>
    <td>This is not valid file url: %s.</td>
  </tr>
  <tr>
    <td>GroupFilesInvalidError</td>
    <td>400</td>
    <td>No files[N] parameters found.</td>
  </tr>
  <tr>
    <td>GroupFilesNotFoundError</td>
    <td>400</td>
    <td>Some files not found.</td>
  </tr>
  <tr>
    <td>GroupIdRequiredError</td>
    <td>400</td>
    <td>group_id is required.</td>
  </tr>
  <tr>
    <td>GroupNotFoundError</td>
    <td>404</td>
    <td>group_id is invalid.</td>
  </tr>
  <tr>
    <td>GroupViewsError</td>
    <td>400</td>
    <td>Request to group processing failed.</td>
  </tr>

  <tr>
    <td colspan="3" style="font-weight: bold;">File content validation errors:</td>
  </tr>
  <tr>
    <td>FileInfectedError</td>
    <td>400</td>
    <td>The file is infected by %s virus.</td>
  </tr>
  <tr>
    <td>FileTypeForbiddenError</td>
    <td>400</td>
    <td>Uploading of these file types is not allowed.</td>
  </tr>

  <tr>
    <td colspan="3" style="font-weight: bold;">URL validation errors:</td>
  </tr>
  <tr>
    <td>HostnameNotFoundError</td>
    <td>400</td>
    <td>Host does not exist.</td>
  </tr>
  <tr>
    <td>URLBlacklistedError</td>
    <td>400</td>
    <td>Source is blacklisted.</td>
  </tr>
  <tr>
    <td>URLHostMalformedError</td>
    <td>400</td>
    <td>URL host is malformed.</td>
  </tr>
  <tr>
    <td>URLHostPrivateIPForbiddenError</td>
    <td>400</td>
    <td>Only public IPs are allowed.</td>
  </tr>
  <tr>
    <td>URLHostRequiredError</td>
    <td>400</td>
    <td>No URL host supplied.</td>
  </tr>
  <tr>
    <td>URLParsingFailedError</td>
    <td>400</td>
    <td>Failed to parse URL.</td>
  </tr>
  <tr>
    <td>URLRedirectsLimitExceededError</td>
    <td>400</td>
    <td>Too many redirects.</td>
  </tr>
  <tr>
    <td>URLSchemeInvalidError</td>
    <td>400</td>
    <td>Invalid URL scheme.</td>
  </tr>
  <tr>
    <td>URLSchemeRequiredError</td>
    <td>400</td>
    <td>No URL scheme supplied.</td>
  </tr>
  <tr>
    <td>URLValidationError</td>
    <td>400</td>
    <td>Failed to validate URL.</td>
  </tr>

</table>
",
        "id": "Errors",
      },
      "Groups": {
        "description": null,
        "id": "Groups",
      },
      "Integrations": {
        "description": "You don't have to code most of the low-level API interactions.
We have high-level [libraries](https://uploadcare.com/docs/integrations/) for all popular platforms:
* [JavaScript](https://uploadcare.com/docs/integrations/javascript/)
* [PHP](https://uploadcare.com/docs/integrations/php/)
* [Python](https://uploadcare.com/docs/integrations/python/) (including Django)
* [Ruby](https://uploadcare.com/docs/integrations/ruby/) and [Rails](https://uploadcare.com/docs/integrations/rails/)
* [Swift](https://uploadcare.com/docs/integrations/swift/) (iOS, iPadOS, macOS, tvOS, Linux)
* [Kotlin](https://uploadcare.com/docs/integrations/android/) (Android)
* [Java](https://uploadcare.com/docs/integrations/java/)
* [Golang](https://uploadcare.com/docs/integrations/golang/)
* [Rust](https://uploadcare.com/docs/integrations/rust/)

In this API reference, you will see request examples in different languages.
Keep in mind that running sample queries requires our libraries to be installed and initialized.
",
        "id": "Integrations",
      },
      "Other APIs": {
        "description": "You can find the complete reference documentation for the REST API [here](/api-refs/rest-api/) and URL API [here](/api-refs/url-api/).
",
        "id": "Other APIs",
      },
      "Upload": {
        "description": null,
        "id": "Upload",
      },
    },
  },
  "title": "Upload API Reference",
  "variables": {},
  "webhooks": [],
}
`;
