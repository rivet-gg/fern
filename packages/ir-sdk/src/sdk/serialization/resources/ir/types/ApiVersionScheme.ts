/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ApiVersionScheme: core.serialization.Schema<serializers.ApiVersionScheme.Raw, FernIr.ApiVersionScheme> =
    core.serialization
        .union("type", {
            header: core.serialization.lazyObject(async () => (await import("../../..")).HeaderApiVersionScheme),
        })
        .transform<FernIr.ApiVersionScheme>({
            transform: (value) => {
                switch (value.type) {
                    case "header":
                        return FernIr.ApiVersionScheme.header(value);
                    default:
                        return value as FernIr.ApiVersionScheme;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace ApiVersionScheme {
    type Raw = ApiVersionScheme.Header;

    interface Header extends serializers.HeaderApiVersionScheme.Raw {
        type: "header";
    }
}
