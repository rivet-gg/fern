/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ResolvedTypeReference: core.serialization.Schema<
    serializers.ResolvedTypeReference.Raw,
    FernIr.ResolvedTypeReference
> = core.serialization
    .union(core.serialization.discriminant("type", "_type"), {
        container: core.serialization.object({
            container: core.serialization.lazy(async () => (await import("../../..")).ContainerType),
        }),
        named: core.serialization.lazyObject(async () => (await import("../../..")).ResolvedNamedType),
        primitive: core.serialization.object({
            primitive: core.serialization.lazyObject(async () => (await import("../../..")).PrimitiveType),
        }),
        unknown: core.serialization.object({}),
    })
    .transform<FernIr.ResolvedTypeReference>({
        transform: (value) => {
            switch (value.type) {
                case "container":
                    return FernIr.ResolvedTypeReference.container(value.container);
                case "named":
                    return FernIr.ResolvedTypeReference.named(value);
                case "primitive":
                    return FernIr.ResolvedTypeReference.primitive(value.primitive);
                case "unknown":
                    return FernIr.ResolvedTypeReference.unknown();
                default:
                    return value as FernIr.ResolvedTypeReference;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ResolvedTypeReference {
    type Raw =
        | ResolvedTypeReference.Container
        | ResolvedTypeReference.Named
        | ResolvedTypeReference.Primitive
        | ResolvedTypeReference.Unknown;

    interface Container {
        _type: "container";
        container: serializers.ContainerType.Raw;
    }

    interface Named extends serializers.ResolvedNamedType.Raw {
        _type: "named";
    }

    interface Primitive {
        _type: "primitive";
        primitive: serializers.PrimitiveType.Raw;
    }

    interface Unknown {
        _type: "unknown";
    }
}
