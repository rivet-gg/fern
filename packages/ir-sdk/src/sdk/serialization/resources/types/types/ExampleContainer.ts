/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ExampleContainer: core.serialization.Schema<serializers.ExampleContainer.Raw, FernIr.ExampleContainer> =
    core.serialization
        .union("type", {
            list: core.serialization.lazyObject(async () => (await import("../../..")).ExampleListContainer),
            set: core.serialization.lazyObject(async () => (await import("../../..")).ExampleSetContainer),
            optional: core.serialization.lazyObject(async () => (await import("../../..")).ExampleOptionalContainer),
            map: core.serialization.lazyObject(async () => (await import("../../..")).ExampleMapContainer),
            literal: core.serialization.lazyObject(async () => (await import("../../..")).ExampleLiteralContainer),
        })
        .transform<FernIr.ExampleContainer>({
            transform: (value) => {
                switch (value.type) {
                    case "list":
                        return FernIr.ExampleContainer.list(value);
                    case "set":
                        return FernIr.ExampleContainer.set(value);
                    case "optional":
                        return FernIr.ExampleContainer.optional(value);
                    case "map":
                        return FernIr.ExampleContainer.map(value);
                    case "literal":
                        return FernIr.ExampleContainer.literal(value);
                    default:
                        return value as FernIr.ExampleContainer;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace ExampleContainer {
    type Raw =
        | ExampleContainer.List
        | ExampleContainer.Set
        | ExampleContainer.Optional
        | ExampleContainer.Map
        | ExampleContainer.Literal;

    interface List extends serializers.ExampleListContainer.Raw {
        type: "list";
    }

    interface Set extends serializers.ExampleSetContainer.Raw {
        type: "set";
    }

    interface Optional extends serializers.ExampleOptionalContainer.Raw {
        type: "optional";
    }

    interface Map extends serializers.ExampleMapContainer.Raw {
        type: "map";
    }

    interface Literal extends serializers.ExampleLiteralContainer.Raw {
        type: "literal";
    }
}
