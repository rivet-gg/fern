/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const TypeReference: core.serialization.Schema<serializers.TypeReference.Raw, FernIr.TypeReference> =
    core.serialization
        .union(core.serialization.discriminant("type", "_type"), {
            container: core.serialization.object({
                container: core.serialization.lazy(async () => (await import("../../..")).ContainerType),
            }),
            named: core.serialization.lazyObject(async () => (await import("../../..")).NamedType),
            primitive: core.serialization.object({
                primitive: core.serialization.lazyObject(async () => (await import("../../..")).PrimitiveType),
            }),
            unknown: core.serialization.object({}),
        })
        .transform<FernIr.TypeReference>({
            transform: (value) => {
                switch (value.type) {
                    case "container":
                        return FernIr.TypeReference.container(value.container);
                    case "named":
                        return FernIr.TypeReference.named(value);
                    case "primitive":
                        return FernIr.TypeReference.primitive(value.primitive);
                    case "unknown":
                        return FernIr.TypeReference.unknown();
                    default:
                        return value as FernIr.TypeReference;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace TypeReference {
    type Raw = TypeReference.Container | TypeReference.Named | TypeReference.Primitive | TypeReference.Unknown;

    interface Container {
        _type: "container";
        container: serializers.ContainerType.Raw;
    }

    interface Named extends serializers.NamedType.Raw {
        _type: "named";
    }

    interface Primitive {
        _type: "primitive";
        primitive: serializers.PrimitiveType.Raw;
    }

    interface Unknown {
        _type: "unknown";
    }
}
