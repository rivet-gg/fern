/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ErrorDeclaration: core.serialization.ObjectSchema<
    serializers.ErrorDeclaration.Raw,
    FernIr.ErrorDeclaration
> = core.serialization
    .objectWithoutOptionalProperties({
        name: core.serialization.lazyObject(async () => (await import("../../..")).DeclaredErrorName),
        discriminantValue: core.serialization.lazyObject(async () => (await import("../../..")).NameAndWireValue),
        type: core.serialization.lazy(async () => (await import("../../..")).TypeReference).optional(),
        statusCode: core.serialization.number(),
        examples: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../..")).ExampleError)
        ),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithDocs));

export declare namespace ErrorDeclaration {
    interface Raw extends serializers.WithDocs.Raw {
        name: serializers.DeclaredErrorName.Raw;
        discriminantValue: serializers.NameAndWireValue.Raw;
        type?: serializers.TypeReference.Raw | null;
        statusCode: number;
        examples: serializers.ExampleError.Raw[];
    }
}
