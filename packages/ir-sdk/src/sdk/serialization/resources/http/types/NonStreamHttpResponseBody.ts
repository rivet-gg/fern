/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const NonStreamHttpResponseBody: core.serialization.Schema<
    serializers.NonStreamHttpResponseBody.Raw,
    FernIr.NonStreamHttpResponseBody
> = core.serialization
    .union("type", {
        json: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).JsonResponse),
        }),
        fileDownload: core.serialization.lazyObject(async () => (await import("../../..")).FileDownloadResponse),
        text: core.serialization.lazyObject(async () => (await import("../../..")).TextResponse),
    })
    .transform<FernIr.NonStreamHttpResponseBody>({
        transform: (value) => {
            switch (value.type) {
                case "json":
                    return FernIr.NonStreamHttpResponseBody.json(value.value);
                case "fileDownload":
                    return FernIr.NonStreamHttpResponseBody.fileDownload(value);
                case "text":
                    return FernIr.NonStreamHttpResponseBody.text(value);
                default:
                    return value as FernIr.NonStreamHttpResponseBody;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace NonStreamHttpResponseBody {
    type Raw = NonStreamHttpResponseBody.Json | NonStreamHttpResponseBody.FileDownload | NonStreamHttpResponseBody.Text;

    interface Json {
        type: "json";
        value: serializers.JsonResponse.Raw;
    }

    interface FileDownload extends serializers.FileDownloadResponse.Raw {
        type: "fileDownload";
    }

    interface Text extends serializers.TextResponse.Raw {
        type: "text";
    }
}
