/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedTrace from "../../../../api/index";
import * as core from "../../../../core";
import { RunningSubmissionState } from "./RunningSubmissionState";
import { ErrorInfo } from "./ErrorInfo";
import { GradedTestCaseUpdate } from "./GradedTestCaseUpdate";
import { RecordedTestCaseUpdate } from "./RecordedTestCaseUpdate";

export const TestSubmissionUpdateInfo: core.serialization.Schema<serializers.TestSubmissionUpdateInfo.Raw, SeedTrace.TestSubmissionUpdateInfo> = core.serialization.union("type", {
        "running": core.serialization.object({
            "value": RunningSubmissionState
        }),
        "stopped": core.serialization.object({}),
        "errored": core.serialization.object({
            "value": ErrorInfo
        }),
        "gradedTestCase": GradedTestCaseUpdate,
        "recordedTestCase": RecordedTestCaseUpdate,
        "finished": core.serialization.object({})
    }).transform<SeedTrace.TestSubmissionUpdateInfo>({
        transform: value => {
            switch (value.type) {
                case "running": return SeedTrace.TestSubmissionUpdateInfo.running(value.value);
                case "stopped": return SeedTrace.TestSubmissionUpdateInfo.stopped();
                case "errored": return SeedTrace.TestSubmissionUpdateInfo.errored(value.value);
                case "gradedTestCase": return SeedTrace.TestSubmissionUpdateInfo.gradedTestCase(value);
                case "recordedTestCase": return SeedTrace.TestSubmissionUpdateInfo.recordedTestCase(value);
                case "finished": return SeedTrace.TestSubmissionUpdateInfo.finished();
                default: return SeedTrace.TestSubmissionUpdateInfo._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any
    });

export declare namespace TestSubmissionUpdateInfo {
    type Raw = TestSubmissionUpdateInfo.Running | TestSubmissionUpdateInfo.Stopped | TestSubmissionUpdateInfo.Errored | TestSubmissionUpdateInfo.GradedTestCase | TestSubmissionUpdateInfo.RecordedTestCase | TestSubmissionUpdateInfo.Finished;

    interface Running {
        "type": "running";
        "value": RunningSubmissionState.Raw;
    }

    interface Stopped {
        "type": "stopped";
    }

    interface Errored {
        "type": "errored";
        "value": ErrorInfo.Raw;
    }

    interface GradedTestCase extends GradedTestCaseUpdate.Raw {
        "type": "gradedTestCase";
    }

    interface RecordedTestCase extends RecordedTestCaseUpdate.Raw {
        "type": "recordedTestCase";
    }

    interface Finished {
        "type": "finished";
    }
}
