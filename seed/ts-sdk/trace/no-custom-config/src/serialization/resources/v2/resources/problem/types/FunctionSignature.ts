/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as SeedTrace from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { VoidFunctionSignature } from "./VoidFunctionSignature";
import { NonVoidFunctionSignature } from "./NonVoidFunctionSignature";
import { VoidFunctionSignatureThatTakesActualResult } from "./VoidFunctionSignatureThatTakesActualResult";

export const FunctionSignature: core.serialization.Schema<serializers.v2.FunctionSignature.Raw, SeedTrace.v2.FunctionSignature> = core.serialization.union("type", {
        "void": VoidFunctionSignature,
        "nonVoid": NonVoidFunctionSignature,
        "voidThatTakesActualResult": VoidFunctionSignatureThatTakesActualResult
    }).transform<SeedTrace.v2.FunctionSignature>({
        transform: value => value,
        untransform: value => value
    });

export declare namespace FunctionSignature {
    type Raw = FunctionSignature.Void | FunctionSignature.NonVoid | FunctionSignature.VoidThatTakesActualResult;

    interface Void extends VoidFunctionSignature.Raw {
        "type": "void";
    }

    interface NonVoid extends NonVoidFunctionSignature.Raw {
        "type": "nonVoid";
    }

    interface VoidThatTakesActualResult extends VoidFunctionSignatureThatTakesActualResult.Raw {
        "type": "voidThatTakesActualResult";
    }
}
