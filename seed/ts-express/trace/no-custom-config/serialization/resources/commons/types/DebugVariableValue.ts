/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedTrace from "../../../../api/index";
import * as core from "../../../../core";

export const DebugVariableValue: core.serialization.Schema<
    serializers.DebugVariableValue.Raw,
    SeedTrace.DebugVariableValue
> = core.serialization
    .union("type", {
        integerValue: core.serialization.object({
            value: core.serialization.number(),
        }),
        booleanValue: core.serialization.object({
            value: core.serialization.boolean(),
        }),
        doubleValue: core.serialization.object({
            value: core.serialization.number(),
        }),
        stringValue: core.serialization.object({
            value: core.serialization.string(),
        }),
        charValue: core.serialization.object({
            value: core.serialization.string(),
        }),
        mapValue: core.serialization.lazyObject(() => serializers.DebugMapValue),
        listValue: core.serialization.object({
            value: core.serialization.list(core.serialization.lazy(() => serializers.DebugVariableValue)),
        }),
        binaryTreeNodeValue: core.serialization.lazyObject(() => serializers.BinaryTreeNodeAndTreeValue),
        singlyLinkedListNodeValue: core.serialization.lazyObject(() => serializers.SinglyLinkedListNodeAndListValue),
        doublyLinkedListNodeValue: core.serialization.lazyObject(() => serializers.DoublyLinkedListNodeAndListValue),
        undefinedValue: core.serialization.object({}),
        nullValue: core.serialization.object({}),
        genericValue: core.serialization.lazyObject(() => serializers.GenericValue),
    })
    .transform<SeedTrace.DebugVariableValue>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace DebugVariableValue {
    type Raw =
        | DebugVariableValue.IntegerValue
        | DebugVariableValue.BooleanValue
        | DebugVariableValue.DoubleValue
        | DebugVariableValue.StringValue
        | DebugVariableValue.CharValue
        | DebugVariableValue.MapValue
        | DebugVariableValue.ListValue
        | DebugVariableValue.BinaryTreeNodeValue
        | DebugVariableValue.SinglyLinkedListNodeValue
        | DebugVariableValue.DoublyLinkedListNodeValue
        | DebugVariableValue.UndefinedValue
        | DebugVariableValue.NullValue
        | DebugVariableValue.GenericValue;

    interface IntegerValue {
        type: "integerValue";
        value: number;
    }

    interface BooleanValue {
        type: "booleanValue";
        value: boolean;
    }

    interface DoubleValue {
        type: "doubleValue";
        value: number;
    }

    interface StringValue {
        type: "stringValue";
        value: string;
    }

    interface CharValue {
        type: "charValue";
        value: string;
    }

    interface MapValue extends serializers.DebugMapValue.Raw {
        type: "mapValue";
    }

    interface ListValue {
        type: "listValue";
        value: serializers.DebugVariableValue.Raw[];
    }

    interface BinaryTreeNodeValue extends serializers.BinaryTreeNodeAndTreeValue.Raw {
        type: "binaryTreeNodeValue";
    }

    interface SinglyLinkedListNodeValue extends serializers.SinglyLinkedListNodeAndListValue.Raw {
        type: "singlyLinkedListNodeValue";
    }

    interface DoublyLinkedListNodeValue extends serializers.DoublyLinkedListNodeAndListValue.Raw {
        type: "doublyLinkedListNodeValue";
    }

    interface UndefinedValue {
        type: "undefinedValue";
    }

    interface NullValue {
        type: "nullValue";
    }

    interface GenericValue extends serializers.GenericValue.Raw {
        type: "genericValue";
    }
}
