/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.mixedCase.model.service;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.mixedCase.core.ObjectMappers;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NestedUser.Builder.class)
public final class NestedUser {
    private final String name;

    private final User nestedUser;

    private NestedUser(String name, User nestedUser) {
        this.name = name;
        this.nestedUser = nestedUser;
    }

    @JsonProperty("Name")
    public String getName() {
        return name;
    }

    @JsonProperty("NestedUser")
    public User getNestedUser() {
        return nestedUser;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NestedUser && equalTo((NestedUser) other);
    }

    private boolean equalTo(NestedUser other) {
        return name.equals(other.name) && nestedUser.equals(other.nestedUser);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.nestedUser);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        NestedUserStage name(String name);

        Builder from(NestedUser other);
    }

    public interface NestedUserStage {
        _FinalStage nestedUser(User nestedUser);
    }

    public interface _FinalStage {
        NestedUser build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, NestedUserStage, _FinalStage {
        private String name;

        private User nestedUser;

        private Builder() {}

        @java.lang.Override
        public Builder from(NestedUser other) {
            name(other.getName());
            nestedUser(other.getNestedUser());
            return this;
        }

        @java.lang.Override
        @JsonSetter("Name")
        public NestedUserStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("NestedUser")
        public _FinalStage nestedUser(User nestedUser) {
            this.nestedUser = nestedUser;
            return this;
        }

        @java.lang.Override
        public NestedUser build() {
            return new NestedUser(name, nestedUser);
        }
    }
}
