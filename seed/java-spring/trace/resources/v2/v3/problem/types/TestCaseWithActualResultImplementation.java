/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.v2.v3.problem.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TestCaseWithActualResultImplementation.Builder.class
)
public final class TestCaseWithActualResultImplementation {
  private final NonVoidFunctionDefinition getActualResult;

  private final AssertCorrectnessCheck assertCorrectnessCheck;

  private TestCaseWithActualResultImplementation(NonVoidFunctionDefinition getActualResult,
      AssertCorrectnessCheck assertCorrectnessCheck) {
    this.getActualResult = getActualResult;
    this.assertCorrectnessCheck = assertCorrectnessCheck;
  }

  @JsonProperty("getActualResult")
  public NonVoidFunctionDefinition getGetActualResult() {
    return getActualResult;
  }

  @JsonProperty("assertCorrectnessCheck")
  public AssertCorrectnessCheck getAssertCorrectnessCheck() {
    return assertCorrectnessCheck;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TestCaseWithActualResultImplementation && equalTo((TestCaseWithActualResultImplementation) other);
  }

  private boolean equalTo(TestCaseWithActualResultImplementation other) {
    return getActualResult.equals(other.getActualResult) && assertCorrectnessCheck.equals(other.assertCorrectnessCheck);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.getActualResult, this.assertCorrectnessCheck);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static GetActualResultStage builder() {
    return new Builder();
  }

  public interface GetActualResultStage {
    AssertCorrectnessCheckStage getActualResult(NonVoidFunctionDefinition getActualResult);

    Builder from(TestCaseWithActualResultImplementation other);
  }

  public interface AssertCorrectnessCheckStage {
    _FinalStage assertCorrectnessCheck(AssertCorrectnessCheck assertCorrectnessCheck);
  }

  public interface _FinalStage {
    TestCaseWithActualResultImplementation build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements GetActualResultStage, AssertCorrectnessCheckStage, _FinalStage {
    private NonVoidFunctionDefinition getActualResult;

    private AssertCorrectnessCheck assertCorrectnessCheck;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(TestCaseWithActualResultImplementation other) {
      getActualResult(other.getGetActualResult());
      assertCorrectnessCheck(other.getAssertCorrectnessCheck());
      return this;
    }

    @java.lang.Override
    @JsonSetter("getActualResult")
    public AssertCorrectnessCheckStage getActualResult(NonVoidFunctionDefinition getActualResult) {
      this.getActualResult = getActualResult;
      return this;
    }

    @java.lang.Override
    @JsonSetter("assertCorrectnessCheck")
    public _FinalStage assertCorrectnessCheck(AssertCorrectnessCheck assertCorrectnessCheck) {
      this.assertCorrectnessCheck = assertCorrectnessCheck;
      return this;
    }

    @java.lang.Override
    public TestCaseWithActualResultImplementation build() {
      return new TestCaseWithActualResultImplementation(getActualResult, assertCorrectnessCheck);
    }
  }
}
