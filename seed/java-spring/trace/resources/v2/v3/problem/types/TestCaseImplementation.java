/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.v2.v3.problem.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TestCaseImplementation.Builder.class
)
public final class TestCaseImplementation {
  private final TestCaseImplementationDescription description;

  private final TestCaseFunction function;

  private TestCaseImplementation(TestCaseImplementationDescription description,
      TestCaseFunction function) {
    this.description = description;
    this.function = function;
  }

  @JsonProperty("description")
  public TestCaseImplementationDescription getDescription() {
    return description;
  }

  @JsonProperty("function")
  public TestCaseFunction getFunction() {
    return function;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TestCaseImplementation && equalTo((TestCaseImplementation) other);
  }

  private boolean equalTo(TestCaseImplementation other) {
    return description.equals(other.description) && function.equals(other.function);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.description, this.function);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DescriptionStage builder() {
    return new Builder();
  }

  public interface DescriptionStage {
    FunctionStage description(TestCaseImplementationDescription description);

    Builder from(TestCaseImplementation other);
  }

  public interface FunctionStage {
    _FinalStage function(TestCaseFunction function);
  }

  public interface _FinalStage {
    TestCaseImplementation build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DescriptionStage, FunctionStage, _FinalStage {
    private TestCaseImplementationDescription description;

    private TestCaseFunction function;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(TestCaseImplementation other) {
      description(other.getDescription());
      function(other.getFunction());
      return this;
    }

    @java.lang.Override
    @JsonSetter("description")
    public FunctionStage description(TestCaseImplementationDescription description) {
      this.description = description;
      return this;
    }

    @java.lang.Override
    @JsonSetter("function")
    public _FinalStage function(TestCaseFunction function) {
      this.function = function;
      return this;
    }

    @java.lang.Override
    public TestCaseImplementation build() {
      return new TestCaseImplementation(description, function);
    }
  }
}
