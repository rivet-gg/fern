// This file was auto-generated by Fern from our API Definition.

package extends

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/extends/fern/core"
)

type Inlined struct {
	Docs   string `json:"docs" url:"-"`
	Name   string `json:"name" url:"-"`
	Unique string `json:"unique" url:"-"`
}

type Docs struct {
	Docs string `json:"docs" url:"docs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *Docs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Docs) UnmarshalJSON(data []byte) error {
	type unmarshaler Docs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Docs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Docs) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ExampleType struct {
	Docs string `json:"docs" url:"docs"`
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExampleType) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleType) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleType(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExampleType) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Json struct {
	Docs string `json:"docs" url:"docs"`
	Raw  string `json:"raw" url:"raw"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *Json) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *Json) UnmarshalJSON(data []byte) error {
	type unmarshaler Json
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = Json(value)

	extraProperties, err := core.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *Json) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type NestedType struct {
	Docs string `json:"docs" url:"docs"`
	Raw  string `json:"raw" url:"raw"`
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NestedType) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedType) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedType(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NestedType) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}
