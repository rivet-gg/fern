// This file was auto-generated by Fern from our API Definition.

package object

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "github.com/object/fern/core"
	time "time"
)

type Name struct {
	Id    string `json:"id" url:"id"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *Name) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *Name) UnmarshalJSON(data []byte) error {
	type unmarshaler Name
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Name(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *Name) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Exercises all of the built-in types.
type Type struct {
	One         int              `json:"one" url:"one"`
	Two         float64          `json:"two" url:"two"`
	Three       string           `json:"three" url:"three"`
	Four        bool             `json:"four" url:"four"`
	Five        int64            `json:"five" url:"five"`
	Six         time.Time        `json:"six" url:"six"`
	Seven       time.Time        `json:"seven" url:"seven" format:"date"`
	Eight       uuid.UUID        `json:"eight" url:"eight"`
	Nine        []byte           `json:"nine" url:"nine"`
	Ten         []int            `json:"ten,omitempty" url:"ten,omitempty"`
	Eleven      []float64        `json:"eleven,omitempty" url:"eleven,omitempty"`
	Twelve      map[string]bool  `json:"twelve,omitempty" url:"twelve,omitempty"`
	Thirteen    *int64           `json:"thirteen,omitempty" url:"thirteen,omitempty"`
	Fourteen    interface{}      `json:"fourteen,omitempty" url:"fourteen,omitempty"`
	Fifteen     [][]int          `json:"fifteen,omitempty" url:"fifteen,omitempty"`
	Sixteen     []map[string]int `json:"sixteen,omitempty" url:"sixteen,omitempty"`
	Seventeen   []*uuid.UUID     `json:"seventeen,omitempty" url:"seventeen,omitempty"`
	Nineteen    *Name            `json:"nineteen,omitempty" url:"nineteen,omitempty"`
	Twenty      int              `json:"twenty" url:"twenty"`
	Twentyone   int64            `json:"twentyone" url:"twentyone"`
	Twentytwo   float64          `json:"twentytwo" url:"twentytwo"`
	Twentythree string           `json:"twentythree" url:"twentythree"`
	eighteen    string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *Type) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Type) Eighteen() string {
	return t.eighteen
}

func (t *Type) UnmarshalJSON(data []byte) error {
	type embed Type
	var unmarshaler = struct {
		embed
		Six   *core.DateTime `json:"six"`
		Seven *core.Date     `json:"seven"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Type(unmarshaler.embed)
	t.Six = unmarshaler.Six.Time()
	t.Seven = unmarshaler.Seven.Time()
	t.eighteen = "eighteen"

	extraProperties, err := core.ExtractExtraProperties(data, *t, "eighteen")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Type) MarshalJSON() ([]byte, error) {
	type embed Type
	var marshaler = struct {
		embed
		Six      *core.DateTime `json:"six"`
		Seven    *core.Date     `json:"seven"`
		Eighteen string         `json:"eighteen"`
	}{
		embed:    embed(*t),
		Six:      core.NewDateTime(t.Six),
		Seven:    core.NewDate(t.Seven),
		Eighteen: "eighteen",
	}
	return json.Marshal(marshaler)
}

func (t *Type) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
