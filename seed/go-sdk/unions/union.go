// This file was auto-generated by Fern from our API Definition.

package unions

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/fern-api/unions-go/core"
)

type Shape struct {
	Type   string
	Id     string
	Circle *Circle
	Square *Square
}

func (s *Shape) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
		Id   string `json:"id"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	s.Id = unmarshaler.Id
	switch unmarshaler.Type {
	case "circle":
		value := new(Circle)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Circle = value
	case "square":
		value := new(Square)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Square = value
	}
	return nil
}

func (s Shape) MarshalJSON() ([]byte, error) {
	if s.Circle != nil {
		return core.MarshalJSONWithExtraProperty(s.Circle, "type", "circle")
	}
	if s.Square != nil {
		return core.MarshalJSONWithExtraProperty(s.Square, "type", "square")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type ShapeVisitor interface {
	VisitCircle(*Circle) error
	VisitSquare(*Square) error
}

func (s *Shape) Accept(visitor ShapeVisitor) error {
	if s.Circle != nil {
		return visitor.VisitCircle(s.Circle)
	}
	if s.Square != nil {
		return visitor.VisitSquare(s.Square)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}
