# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....commons.types.language import Language
from ....commons.types.problem_id import ProblemId
from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import pydantic_v1
from ....problem.types.problem_description import ProblemDescription
from .custom_files import CustomFiles
from .generated_files import GeneratedFiles
from .test_case_template import TestCaseTemplate
from .test_case_v_2 import TestCaseV2


class ProblemInfoV2(pydantic_v1.BaseModel):
    problem_id: ProblemId = pydantic_v1.Field(alias="problemId")
    problem_description: ProblemDescription = pydantic_v1.Field(alias="problemDescription")
    problem_name: str = pydantic_v1.Field(alias="problemName")
    problem_version: int = pydantic_v1.Field(alias="problemVersion")
    supported_languages: typing.Set[Language] = pydantic_v1.Field(alias="supportedLanguages")
    custom_files: CustomFiles = pydantic_v1.Field(alias="customFiles")
    generated_files: GeneratedFiles = pydantic_v1.Field(alias="generatedFiles")
    custom_test_case_templates: typing.List[TestCaseTemplate] = pydantic_v1.Field(alias="customTestCaseTemplates")
    testcases: typing.List[TestCaseV2]
    is_public: bool = pydantic_v1.Field(alias="isPublic")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
