# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from ..submission.types.submission_id import SubmissionId
from ..submission.types.test_case_result_with_stdout import TestCaseResultWithStdout
from ..submission.types.test_submission_status import TestSubmissionStatus
from ..submission.types.test_submission_update import TestSubmissionUpdate
from ..submission.types.trace_response import TraceResponse
from ..submission.types.trace_response_v_2 import TraceResponseV2
from ..submission.types.workspace_run_details import WorkspaceRunDetails
from ..submission.types.workspace_submission_status import WorkspaceSubmissionStatus
from ..submission.types.workspace_submission_update import WorkspaceSubmissionUpdate
from ..v_2.problem.types.test_case_id import TestCaseId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def update_test_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionStatus.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import TestSubmissionStatus
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.update_test_submission_status(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=TestSubmissionStatus(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-submission-status/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_test_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionUpdate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionUpdate.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import datetime
        import uuid

        from seed import TestSubmissionUpdate, TestSubmissionUpdateInfo_Running
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.send_test_submission_update(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=TestSubmissionUpdate(
                update_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                update_info=TestSubmissionUpdateInfo_Running(
                    value="QUEUEING_SUBMISSION"
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-submission-status-v2/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_workspace_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionStatus.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import WorkspaceSubmissionStatus
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.update_workspace_submission_status(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=WorkspaceSubmissionStatus(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-submission-status/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_workspace_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionUpdate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionUpdate.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import datetime
        import uuid

        from seed import (
            WorkspaceSubmissionUpdate,
            WorkspaceSubmissionUpdateInfo_Running,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.send_workspace_submission_update(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=WorkspaceSubmissionUpdate(
                update_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                update_info=WorkspaceSubmissionUpdateInfo_Running(
                    value="QUEUEING_SUBMISSION"
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-submission-status-v2/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: str.

            - result: TestCaseResultWithStdout.

            - trace_responses: typing.Sequence[TraceResponse].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExpressionLocation,
            StackInformation,
            TestCaseResult,
            TestCaseResultWithStdout,
            TraceResponse,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_test_case(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            test_case_id="string",
            result=TestCaseResultWithStdout(
                result=TestCaseResult(),
                stdout="string",
            ),
            trace_responses=[
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"result": result, "traceResponses": trace_responses})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"result": result, "traceResponses": trace_responses}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_test_case_v_2(
        self,
        submission_id: SubmissionId,
        test_case_id: TestCaseId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: TestCaseId.

            - request: typing.Sequence[TraceResponseV2].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExpressionLocation,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_test_case_v_2(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            test_case_id="string",
            request=[
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace-v2/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - workspace_run_details: WorkspaceRunDetails.

            - trace_responses: typing.Sequence[TraceResponse].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExceptionInfo,
            ExceptionV2_Generic,
            ExpressionLocation,
            StackInformation,
            TraceResponse,
            WorkspaceRunDetails,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_workspace(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            workspace_run_details=WorkspaceRunDetails(
                exception_v_2=ExceptionV2_Generic(),
                exception=ExceptionInfo(),
                stdout="string",
            ),
            trace_responses=[
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-trace/submission/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"workspaceRunDetails": workspace_run_details, "traceResponses": trace_responses})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"workspaceRunDetails": workspace_run_details, "traceResponses": trace_responses}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def store_traced_workspace_v_2(
        self,
        submission_id: SubmissionId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: typing.Sequence[TraceResponseV2].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExpressionLocation,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_workspace_v_2(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=[
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-trace-v2/submission/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def update_test_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionStatus.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import TestSubmissionStatus
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.update_test_submission_status(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=TestSubmissionStatus(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-submission-status/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_test_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionUpdate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: TestSubmissionUpdate.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import datetime
        import uuid

        from seed import TestSubmissionUpdate, TestSubmissionUpdateInfo_Running
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.send_test_submission_update(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=TestSubmissionUpdate(
                update_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                update_info=TestSubmissionUpdateInfo_Running(
                    value="QUEUEING_SUBMISSION"
                ),
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-submission-status-v2/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_workspace_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionStatus.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import WorkspaceSubmissionStatus
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.update_workspace_submission_status(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=WorkspaceSubmissionStatus(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-submission-status/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_workspace_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionUpdate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: WorkspaceSubmissionUpdate.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import datetime
        import uuid

        from seed import (
            WorkspaceSubmissionUpdate,
            WorkspaceSubmissionUpdateInfo_Running,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.send_workspace_submission_update(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=WorkspaceSubmissionUpdate(
                update_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                update_info=WorkspaceSubmissionUpdateInfo_Running(
                    value="QUEUEING_SUBMISSION"
                ),
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-submission-status-v2/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: str.

            - result: TestCaseResultWithStdout.

            - trace_responses: typing.Sequence[TraceResponse].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExpressionLocation,
            StackInformation,
            TestCaseResult,
            TestCaseResultWithStdout,
            TraceResponse,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.store_traced_test_case(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            test_case_id="string",
            result=TestCaseResultWithStdout(
                result=TestCaseResult(),
                stdout="string",
            ),
            trace_responses=[
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"result": result, "traceResponses": trace_responses})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"result": result, "traceResponses": trace_responses}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_test_case_v_2(
        self,
        submission_id: SubmissionId,
        test_case_id: TestCaseId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - test_case_id: TestCaseId.

            - request: typing.Sequence[TraceResponseV2].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExpressionLocation,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.store_traced_test_case_v_2(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            test_case_id="string",
            request=[
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-test-trace-v2/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - workspace_run_details: WorkspaceRunDetails.

            - trace_responses: typing.Sequence[TraceResponse].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExceptionInfo,
            ExceptionV2_Generic,
            ExpressionLocation,
            StackInformation,
            TraceResponse,
            WorkspaceRunDetails,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.store_traced_workspace(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            workspace_run_details=WorkspaceRunDetails(
                exception_v_2=ExceptionV2_Generic(),
                exception=ExceptionInfo(),
                stdout="string",
            ),
            trace_responses=[
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-trace/submission/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"workspaceRunDetails": workspace_run_details, "traceResponses": trace_responses})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"workspaceRunDetails": workspace_run_details, "traceResponses": trace_responses}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def store_traced_workspace_v_2(
        self,
        submission_id: SubmissionId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - submission_id: SubmissionId.

            - request: typing.Sequence[TraceResponseV2].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        import uuid

        from seed import (
            DebugVariableValue_IntegerValue,
            ExpressionLocation,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.admin.store_traced_workspace_v_2(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=[
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(),
                    stack=StackInformation(),
                    stdout="string",
                )
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"admin/store-workspace-trace-v2/submission/{jsonable_encoder(submission_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
