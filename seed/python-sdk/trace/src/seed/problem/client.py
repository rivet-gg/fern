# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..commons.types.problem_id import ProblemId
from ..commons.types.variable_type import VariableType
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from .types.create_problem_request import CreateProblemRequest
from .types.create_problem_response import CreateProblemResponse
from .types.get_default_starter_files_response import GetDefaultStarterFilesResponse
from .types.update_problem_response import UpdateProblemResponse
from .types.variable_type_and_name import VariableTypeAndName

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProblemClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_problem(
        self, *, request: CreateProblemRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateProblemResponse:
        """
        Creates a problem

        Parameters:
            - request: CreateProblemRequest.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import (
            CreateProblemRequest,
            FileInfo,
            ProblemDescription,
            ProblemDescriptionBoard_Html,
            ProblemFiles,
            TestCase,
            TestCaseWithExpectedResult,
            VariableType,
            VariableTypeAndName,
            VariableValue_IntegerValue,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.problem.create_problem(
            request=CreateProblemRequest(
                problem_name="string",
                problem_description=ProblemDescription(
                    boards=[ProblemDescriptionBoard_Html(value="string")],
                ),
                files={
                    "JAVA": ProblemFiles(
                        solution_file=FileInfo(
                            filename="string",
                            contents="string",
                        ),
                        read_only_files=[
                            FileInfo(
                                filename="string",
                                contents="string",
                            )
                        ],
                    )
                },
                input_params=[
                    VariableTypeAndName(
                        variable_type=VariableType(),
                        name="string",
                    )
                ],
                output_type=VariableType(),
                testcases=[
                    TestCaseWithExpectedResult(
                        test_case=TestCase(
                            id="string",
                            params=[VariableValue_IntegerValue(value=1)],
                        ),
                        expected_result=VariableValue_IntegerValue(value=1),
                    )
                ],
                method_name="string",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "problem-crud/create"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateProblemResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_problem(
        self,
        problem_id: ProblemId,
        *,
        request: CreateProblemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateProblemResponse:
        """
        Updates a problem

        Parameters:
            - problem_id: ProblemId.

            - request: CreateProblemRequest.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import (
            CreateProblemRequest,
            FileInfo,
            ProblemDescription,
            ProblemDescriptionBoard_Html,
            ProblemFiles,
            TestCase,
            TestCaseWithExpectedResult,
            VariableType,
            VariableTypeAndName,
            VariableValue_IntegerValue,
        )
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.problem.update_problem(
            problem_id="string",
            request=CreateProblemRequest(
                problem_name="string",
                problem_description=ProblemDescription(
                    boards=[ProblemDescriptionBoard_Html(value="string")],
                ),
                files={
                    "JAVA": ProblemFiles(
                        solution_file=FileInfo(
                            filename="string",
                            contents="string",
                        ),
                        read_only_files=[
                            FileInfo(
                                filename="string",
                                contents="string",
                            )
                        ],
                    )
                },
                input_params=[
                    VariableTypeAndName(
                        variable_type=VariableType(),
                        name="string",
                    )
                ],
                output_type=VariableType(),
                testcases=[
                    TestCaseWithExpectedResult(
                        test_case=TestCase(
                            id="string",
                            params=[VariableValue_IntegerValue(value=1)],
                        ),
                        expected_result=VariableValue_IntegerValue(value=1),
                    )
                ],
                method_name="string",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"problem-crud/update/{jsonable_encoder(problem_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UpdateProblemResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_problem(self, problem_id: ProblemId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Soft deletes a problem

        Parameters:
            - problem_id: ProblemId.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.problem.delete_problem(
            problem_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"problem-crud/delete/{jsonable_encoder(problem_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_default_starter_files(
        self,
        *,
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDefaultStarterFilesResponse:
        """
        Returns default starter files for problem

        Parameters:
            - input_params: typing.Sequence[VariableTypeAndName].

            - output_type: VariableType.

            - method_name: str. The name of the `method` that the student has to complete.
                                The method name cannot include the following characters:
                                  - Greater Than `>`
                                  - Less Than `<``
                                  - Equals `=`
                                  - Period `.`

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import VariableType, VariableTypeAndName
        from seed.client import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.problem.get_default_starter_files(
            input_params=[
                VariableTypeAndName(
                    variable_type=VariableType(),
                    name="string",
                )
            ],
            output_type=VariableType(),
            method_name="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "problem-crud/default-starter-files"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"inputParams": input_params, "outputType": output_type, "methodName": method_name})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"inputParams": input_params, "outputType": output_type, "methodName": method_name}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(GetDefaultStarterFilesResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProblemClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_problem(
        self, *, request: CreateProblemRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateProblemResponse:
        """
        Creates a problem

        Parameters:
            - request: CreateProblemRequest.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import (
            CreateProblemRequest,
            FileInfo,
            ProblemDescription,
            ProblemDescriptionBoard_Html,
            ProblemFiles,
            TestCase,
            TestCaseWithExpectedResult,
            VariableType,
            VariableTypeAndName,
            VariableValue_IntegerValue,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.problem.create_problem(
            request=CreateProblemRequest(
                problem_name="string",
                problem_description=ProblemDescription(
                    boards=[ProblemDescriptionBoard_Html(value="string")],
                ),
                files={
                    "JAVA": ProblemFiles(
                        solution_file=FileInfo(
                            filename="string",
                            contents="string",
                        ),
                        read_only_files=[
                            FileInfo(
                                filename="string",
                                contents="string",
                            )
                        ],
                    )
                },
                input_params=[
                    VariableTypeAndName(
                        variable_type=VariableType(),
                        name="string",
                    )
                ],
                output_type=VariableType(),
                testcases=[
                    TestCaseWithExpectedResult(
                        test_case=TestCase(
                            id="string",
                            params=[VariableValue_IntegerValue(value=1)],
                        ),
                        expected_result=VariableValue_IntegerValue(value=1),
                    )
                ],
                method_name="string",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "problem-crud/create"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateProblemResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_problem(
        self,
        problem_id: ProblemId,
        *,
        request: CreateProblemRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateProblemResponse:
        """
        Updates a problem

        Parameters:
            - problem_id: ProblemId.

            - request: CreateProblemRequest.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import (
            CreateProblemRequest,
            FileInfo,
            ProblemDescription,
            ProblemDescriptionBoard_Html,
            ProblemFiles,
            TestCase,
            TestCaseWithExpectedResult,
            VariableType,
            VariableTypeAndName,
            VariableValue_IntegerValue,
        )
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.problem.update_problem(
            problem_id="string",
            request=CreateProblemRequest(
                problem_name="string",
                problem_description=ProblemDescription(
                    boards=[ProblemDescriptionBoard_Html(value="string")],
                ),
                files={
                    "JAVA": ProblemFiles(
                        solution_file=FileInfo(
                            filename="string",
                            contents="string",
                        ),
                        read_only_files=[
                            FileInfo(
                                filename="string",
                                contents="string",
                            )
                        ],
                    )
                },
                input_params=[
                    VariableTypeAndName(
                        variable_type=VariableType(),
                        name="string",
                    )
                ],
                output_type=VariableType(),
                testcases=[
                    TestCaseWithExpectedResult(
                        test_case=TestCase(
                            id="string",
                            params=[VariableValue_IntegerValue(value=1)],
                        ),
                        expected_result=VariableValue_IntegerValue(value=1),
                    )
                ],
                method_name="string",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"problem-crud/update/{jsonable_encoder(problem_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UpdateProblemResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_problem(
        self, problem_id: ProblemId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Soft deletes a problem

        Parameters:
            - problem_id: ProblemId.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.problem.delete_problem(
            problem_id="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"problem-crud/delete/{jsonable_encoder(problem_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_default_starter_files(
        self,
        *,
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDefaultStarterFilesResponse:
        """
        Returns default starter files for problem

        Parameters:
            - input_params: typing.Sequence[VariableTypeAndName].

            - output_type: VariableType.

            - method_name: str. The name of the `method` that the student has to complete.
                                The method name cannot include the following characters:
                                  - Greater Than `>`
                                  - Less Than `<``
                                  - Equals `=`
                                  - Period `.`

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import VariableType, VariableTypeAndName
        from seed.client import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        await client.problem.get_default_starter_files(
            input_params=[
                VariableTypeAndName(
                    variable_type=VariableType(),
                    name="string",
                )
            ],
            output_type=VariableType(),
            method_name="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "problem-crud/default-starter-files"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder({"inputParams": input_params, "outputType": output_type, "methodName": method_name})
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder({"inputParams": input_params, "outputType": output_type, "methodName": method_name}),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(GetDefaultStarterFilesResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)
