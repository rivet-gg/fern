# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .circle import Circle as union_types_circle_Circle
from .square import Square as union_types_square_Square

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def circle(self, value: union_types_circle_Circle) -> Shape:
        if IS_PYDANTIC_V2:
            return Shape(root=_Shape.Circle(**value.dict(exclude_unset=True), type="circle"))
        else:
            return Shape(__root__=_Shape.Circle(**value.dict(exclude_unset=True), type="circle"))

    def square(self, value: union_types_square_Square) -> Shape:
        if IS_PYDANTIC_V2:
            return Shape(root=_Shape.Square(**value.dict(exclude_unset=True), type="square"))
        else:
            return Shape(__root__=_Shape.Square(**value.dict(exclude_unset=True), type="square"))


class Shape(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Shape.Circle, _Shape.Square], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Shape.Circle, _Shape.Square]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Shape.Circle, _Shape.Square], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Shape.Circle, _Shape.Square]:
            return self.__root__

    def visit(
        self,
        circle: typing.Callable[[union_types_circle_Circle], T_Result],
        square: typing.Callable[[union_types_square_Square], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "circle":
            return circle(union_types_circle_Circle(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "square":
            return square(union_types_square_Square(**unioned_value.dict(exclude_unset=True, exclude={"type"})))


class _Shape:
    class Circle(union_types_circle_Circle):
        type: typing.Literal["circle"] = "circle"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Square(union_types_square_Square):
        type: typing.Literal["square"] = "square"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(Shape)
