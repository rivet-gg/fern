irVersion: v53
docker: fernapi/fern-python-sdk:latest
dockerCommand: docker build -f ./generators/python/sdk/Dockerfile -t fernapi/fern-python-sdk:latest ./generators/python
language: python
generatorType: sdk
defaultOutputMode: github
local:
  workingDirectory: generators/python
  buildCommand:
    - chmod +x setup-python.sh && ./setup-python.sh
    - poetry config virtualenvs.in-project true
    - poetry install
  # The envvar is needed to trick the generator to look in the right place for the core_utils files
  runCommand: poetry run python -m src.fern_python.generators.sdk.cli
  env: 
    PYTEST_CURRENT_TEST: "some value"
customFixtureConfig:
  customConfig: 
    use_typeddict_requests: true
  outputFolder: client-filename
fixtures:
  examples: 
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig: 
        client: 
          filename: base_client.py
          class_name: BaseSeedExhaustive
          exported_filename: client.py
          exported_class_name: SeedExhaustive
      outputFolder: client-filename
    - customConfig: null
      readmeConfig:
        bannerLink: https://www.fernapi.com
        apiReferenceLink: https://www.docs.fernapi.com
        defaultEndpoint: POST /movie
        features:
          asyncClient:
            - GET /movie/{movieId}
            - method: POST
              path: /movie
      outputFolder: readme
  enum:
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig:
        pydantic_config:
          use_str_enums: true
      outputFolder: strenum
  exhaustive:
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig:
        timeout_in_seconds: infinity
      outputFolder: infinite-timeout
    - customConfig:
        timeout_in_seconds: 5
      outputFolder: five-second-timeout
    - customConfig:
        pydantic_config:
          include_union_utils: true
      outputFolder: union-utils
    - customConfig:
        pydantic_config:
          version: v1
      outputFolder: pydantic-v1
    - customConfig:
        pydantic_config:
          extra_fields: "allow"
      outputFolder: pydantic-extra-fields
    - customConfig:
        pyproject_python_version: "^3.8.1"
        extra_dependencies:
          boto3: 1.28.57
          langchain: 
            version: "^0.1.20"
            optional: true
        extras: 
          telemetry: ["langchain", "boto3"]
      outputFolder: extra_dependencies
    - customConfig:
        pyproject_python_version: "^3.8.1"
        extra_dev_dependencies:
          langchain: "^0.1.3"
          openai: "^1.9.0"
          langchain-openai: "^0.0.3"
        extra_dependencies:
          boto3: 1.28.57
      outputFolder: deps_with_min_python_version
    - customConfig:
        extra_dev_dependencies:
          requests_mock: 1.12.1
        extra_dependencies:
          boto3: 1.28.57
      outputFolder: extra_dev_dependencies
    - customConfig:
        additional_init_exports:
          - from: client_additions
            imports:
              - myCustomFunction
              - AnotherCustomClient
      outputFolder: additional_init_exports
    - customConfig:
        improved_imports: true
      outputFolder: improved_imports
    - customConfig:
        pydantic_config:
          skip_validation: true
      outputFolder: skip-pydantic-validation
    - customConfig:
        follow_redirects_by_default: true
      outputFolder: follow_redirects_by_default
    - customConfig:
        inline_request_params: true
      outputFolder: inline_request_params
  unions:
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig:
        pydantic_config:
          include_union_utils: true
      outputFolder: union-utils 
  validation:
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig:
        pydantic_config:
          use_provided_defaults: true
      outputFolder: with-defaults
  literal:
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig:
        use_typeddict_requests: true
      outputFolder: use_typeddict_requests
  streaming:
    - customConfig: null
      outputFolder: no-custom-config
    - customConfig:
        pydantic_config:
          skip_validation: true
      outputFolder: skip-pydantic-validation
scripts:
  # Test Pydantic V2
  - docker: fernapi/python-seed
    commands:
      # The global python version is 3.8
      # Tests now run a mock server, you can always run seed with --skip-scripts to save time
      - export NPM_CONFIG_CACHE="$(pwd)/.cache"
      - export HOME="$(pwd)/"
      - poetry config virtualenvs.path .
      - poetry add pydantic=^2.8
      - poetry lock
      - poetry install
      - poetry run mypy ./src ./tests
      - fern test --command "poetry run pytest -rP ."
  # Test Pydantic V1
  - docker: fernapi/python-seed
    commands:
      - export NPM_CONFIG_CACHE="$(pwd)/.cache"
      - export HOME="$(pwd)/"
      - poetry config virtualenvs.path .
      - poetry add pydantic=^1.10
      - poetry lock
      - poetry install
      - poetry run mypy ./src ./tests
      - fern test --command "poetry run pytest -rP ."
allowedFailures: 
  # This is the only one that should always fail
  - exhaustive:additional_init_exports
  # TODO(FER-1837): Address this list
  - response-property
  - websocket
  - exhaustive:union-utils
  - extra-properties
  - trace
  - circular-references-advanced
  # Remove the following fixtures soon as a CLI is released with
  # default enum value support and the latest primitive types.
  # This causes a 'fern check' issue when 'fern test' is run.
  - object
  - validation:no-custom-config
  - validation:with-defaults
  # === Allowed failures due to unit testing ===
  - pagination
  # ===========================================
  # We are not currently generating the examples correctly,
  # so the mock server and the expectations in the unit
  # tests are not correct (`status` on `Resource_User`).
  - mixed-case
  # We are not generating the correct snippets for union-utils
  # types (e.g. we generate `Shape_Square` instead of Shape.factory.square())
  - unions:union-utils
  - alias-extends