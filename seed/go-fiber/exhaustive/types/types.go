// This file was auto-generated by Fern from our API Definition.

package types

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/exhaustive/fern/core"
	uuid "github.com/google/uuid"
	time "time"
)

type WeatherReport string

const (
	WeatherReportSunny   WeatherReport = "SUNNY"
	WeatherReportCloudy  WeatherReport = "CLOUDY"
	WeatherReportRaining WeatherReport = "RAINING"
	WeatherReportSnowing WeatherReport = "SNOWING"
)

func NewWeatherReportFromString(s string) (WeatherReport, error) {
	switch s {
	case "SUNNY":
		return WeatherReportSunny, nil
	case "CLOUDY":
		return WeatherReportCloudy, nil
	case "RAINING":
		return WeatherReportRaining, nil
	case "SNOWING":
		return WeatherReportSnowing, nil
	}
	var t WeatherReport
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WeatherReport) Ptr() *WeatherReport {
	return &w
}

type DoubleOptional struct {
	OptionalAlias *OptionalAlias `json:"optionalAlias,omitempty" url:"optionalAlias,omitempty"`

	extraProperties map[string]interface{}
}

func (d *DoubleOptional) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DoubleOptional) UnmarshalJSON(data []byte) error {
	type unmarshaler DoubleOptional
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DoubleOptional(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	return nil
}

func (d *DoubleOptional) String() string {
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type NestedObjectWithOptionalField struct {
	String       *string                  `json:"string,omitempty" url:"string,omitempty"`
	NestedObject *ObjectWithOptionalField `json:"NestedObject,omitempty" url:"NestedObject,omitempty"`

	extraProperties map[string]interface{}
}

func (n *NestedObjectWithOptionalField) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedObjectWithOptionalField) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedObjectWithOptionalField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedObjectWithOptionalField(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	return nil
}

func (n *NestedObjectWithOptionalField) String() string {
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NestedObjectWithRequiredField struct {
	String       string                   `json:"string" url:"string"`
	NestedObject *ObjectWithOptionalField `json:"NestedObject,omitempty" url:"NestedObject,omitempty"`

	extraProperties map[string]interface{}
}

func (n *NestedObjectWithRequiredField) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedObjectWithRequiredField) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedObjectWithRequiredField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedObjectWithRequiredField(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	return nil
}

func (n *NestedObjectWithRequiredField) String() string {
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type ObjectWithMapOfMap struct {
	Map map[string]map[string]string `json:"map,omitempty" url:"map,omitempty"`

	extraProperties map[string]interface{}
}

func (o *ObjectWithMapOfMap) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObjectWithMapOfMap) UnmarshalJSON(data []byte) error {
	type unmarshaler ObjectWithMapOfMap
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObjectWithMapOfMap(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	return nil
}

func (o *ObjectWithMapOfMap) String() string {
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type ObjectWithOptionalField struct {
	// This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.
	String   *string        `json:"string,omitempty" url:"string,omitempty"`
	Integer  *int           `json:"integer,omitempty" url:"integer,omitempty"`
	Long     *int64         `json:"long,omitempty" url:"long,omitempty"`
	Double   *float64       `json:"double,omitempty" url:"double,omitempty"`
	Bool     *bool          `json:"bool,omitempty" url:"bool,omitempty"`
	Datetime *time.Time     `json:"datetime,omitempty" url:"datetime,omitempty"`
	Date     *time.Time     `json:"date,omitempty" url:"date,omitempty" format:"date"`
	Uuid     *uuid.UUID     `json:"uuid,omitempty" url:"uuid,omitempty"`
	Base64   *[]byte        `json:"base64,omitempty" url:"base64,omitempty"`
	List     []string       `json:"list,omitempty" url:"list,omitempty"`
	Set      []string       `json:"set,omitempty" url:"set,omitempty"`
	Map      map[int]string `json:"map,omitempty" url:"map,omitempty"`
	Bigint   *string        `json:"bigint,omitempty" url:"bigint,omitempty"`

	extraProperties map[string]interface{}
}

func (o *ObjectWithOptionalField) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObjectWithOptionalField) UnmarshalJSON(data []byte) error {
	type embed ObjectWithOptionalField
	var unmarshaler = struct {
		embed
		Datetime *core.DateTime `json:"datetime,omitempty"`
		Date     *core.Date     `json:"date,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = ObjectWithOptionalField(unmarshaler.embed)
	o.Datetime = unmarshaler.Datetime.TimePtr()
	o.Date = unmarshaler.Date.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	return nil
}

func (o *ObjectWithOptionalField) MarshalJSON() ([]byte, error) {
	type embed ObjectWithOptionalField
	var marshaler = struct {
		embed
		Datetime *core.DateTime `json:"datetime,omitempty"`
		Date     *core.Date     `json:"date,omitempty"`
	}{
		embed:    embed(*o),
		Datetime: core.NewOptionalDateTime(o.Datetime),
		Date:     core.NewOptionalDate(o.Date),
	}
	return json.Marshal(marshaler)
}

func (o *ObjectWithOptionalField) String() string {
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type ObjectWithRequiredField struct {
	String string `json:"string" url:"string"`

	extraProperties map[string]interface{}
}

func (o *ObjectWithRequiredField) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObjectWithRequiredField) UnmarshalJSON(data []byte) error {
	type unmarshaler ObjectWithRequiredField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObjectWithRequiredField(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	return nil
}

func (o *ObjectWithRequiredField) String() string {
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OptionalAlias = *string

type Animal struct {
	Animal string
	Dog    *Dog
	Cat    *Cat
}

func NewAnimalFromDog(value *Dog) *Animal {
	return &Animal{Animal: "dog", Dog: value}
}

func NewAnimalFromCat(value *Cat) *Animal {
	return &Animal{Animal: "cat", Cat: value}
}

func (a *Animal) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Animal string `json:"animal"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Animal = unmarshaler.Animal
	switch unmarshaler.Animal {
	case "dog":
		value := new(Dog)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Dog = value
	case "cat":
		value := new(Cat)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Cat = value
	}
	return nil
}

func (a Animal) MarshalJSON() ([]byte, error) {
	switch a.Animal {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.Animal, a)
	case "dog":
		return core.MarshalJSONWithExtraProperty(a.Dog, "animal", "dog")
	case "cat":
		return core.MarshalJSONWithExtraProperty(a.Cat, "animal", "cat")
	}
}

type AnimalVisitor interface {
	VisitDog(*Dog) error
	VisitCat(*Cat) error
}

func (a *Animal) Accept(visitor AnimalVisitor) error {
	switch a.Animal {
	default:
		return fmt.Errorf("invalid type %s in %T", a.Animal, a)
	case "dog":
		return visitor.VisitDog(a.Dog)
	case "cat":
		return visitor.VisitCat(a.Cat)
	}
}

type Cat struct {
	Name        string `json:"name" url:"name"`
	LikesToMeow bool   `json:"likesToMeow" url:"likesToMeow"`

	extraProperties map[string]interface{}
}

func (c *Cat) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Cat) UnmarshalJSON(data []byte) error {
	type unmarshaler Cat
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Cat(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	return nil
}

func (c *Cat) String() string {
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Dog struct {
	Name        string `json:"name" url:"name"`
	LikesToWoof bool   `json:"likesToWoof" url:"likesToWoof"`

	extraProperties map[string]interface{}
}

func (d *Dog) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Dog) UnmarshalJSON(data []byte) error {
	type unmarshaler Dog
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Dog(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	return nil
}

func (d *Dog) String() string {
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
