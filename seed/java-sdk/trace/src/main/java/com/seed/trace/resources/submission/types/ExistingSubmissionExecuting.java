/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.trace.resources.submission.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.trace.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExistingSubmissionExecuting.Builder.class)
public final class ExistingSubmissionExecuting {
    private final UUID submissionId;

    private final Map<String, Object> additionalProperties;

    private ExistingSubmissionExecuting(UUID submissionId, Map<String, Object> additionalProperties) {
        this.submissionId = submissionId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("submissionId")
    public UUID getSubmissionId() {
        return submissionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExistingSubmissionExecuting && equalTo((ExistingSubmissionExecuting) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExistingSubmissionExecuting other) {
        return submissionId.equals(other.submissionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.submissionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SubmissionIdStage builder() {
        return new Builder();
    }

    public interface SubmissionIdStage {
        _FinalStage submissionId(UUID submissionId);

        Builder from(ExistingSubmissionExecuting other);
    }

    public interface _FinalStage {
        ExistingSubmissionExecuting build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SubmissionIdStage, _FinalStage {
        private UUID submissionId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ExistingSubmissionExecuting other) {
            submissionId(other.getSubmissionId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("submissionId")
        public _FinalStage submissionId(UUID submissionId) {
            this.submissionId = submissionId;
            return this;
        }

        @java.lang.Override
        public ExistingSubmissionExecuting build() {
            return new ExistingSubmissionExecuting(submissionId, additionalProperties);
        }
    }
}
