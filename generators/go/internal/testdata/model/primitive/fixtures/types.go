// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
	time "time"
)

type Type struct {
	One   int       `json:"one" url:"one"`
	Two   float64   `json:"two" url:"two"`
	Three string    `json:"three" url:"three"`
	Four  bool      `json:"four" url:"four"`
	Five  int64     `json:"five" url:"five"`
	Six   time.Time `json:"six" url:"six"`
	Seven time.Time `json:"seven" url:"seven" format:"date"`
	Eight uuid.UUID `json:"eight" url:"eight"`
	Nine  []byte    `json:"nine" url:"nine"`

	extraProperties map[string]interface{}
}

func (t *Type) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Type) UnmarshalJSON(data []byte) error {
	type embed Type
	var unmarshaler = struct {
		embed
		Six   *core.DateTime `json:"six"`
		Seven *core.Date     `json:"seven"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Type(unmarshaler.embed)
	t.Six = unmarshaler.Six.Time()
	t.Seven = unmarshaler.Seven.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	return nil
}

func (t *Type) MarshalJSON() ([]byte, error) {
	type embed Type
	var marshaler = struct {
		embed
		Six   *core.DateTime `json:"six"`
		Seven *core.Date     `json:"seven"`
	}{
		embed: embed(*t),
		Six:   core.NewDateTime(t.Six),
		Seven: core.NewDate(t.Seven),
	}
	return json.Marshal(marshaler)
}

func (t *Type) String() string {
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
