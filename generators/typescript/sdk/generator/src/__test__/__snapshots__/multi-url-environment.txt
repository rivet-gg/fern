// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SdkGenerator should generate for multi-url-environment 1`] = `
"/// File: /jest.config.js
/** @type {import('jest').Config} */
module.exports = { preset: "ts-jest", testEnvironment: "node" };


/// File: /src/api/index.ts
export * from "./resources";


/// File: /src/api/resources/ec2/client/Client.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TestSdk from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Ec2 {
    interface Options {
        environment?: core.Supplier<environments.TestSdkEnvironment | environments.TestSdkEnvironmentUrls>;
        token: core.Supplier<core.BearerToken>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Ec2 {
    constructor(protected readonly _options: Ec2.Options) {
    }

    /**
     * @param {TestSdk.BootInstanceRequest} request
     * @param {Ec2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await testSdk.ec2.bootInstance({
     *         size: "string"
     *     })
     */
    public async bootInstance(request: TestSdk.BootInstanceRequest, requestOptions?: Ec2.RequestOptions): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin((await core.Supplier.get(this._options.environment) ?? environments.TestSdkEnvironment.Production).ec2, "/ec2/boot"),
            method: "POST",
            headers: {
                "Authorization": await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@test/sdk",
                "X-Fern-SDK-Version": "1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: await serializers.BootInstanceRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? (requestOptions.timeoutInSeconds * 1000) : 60000,
            maxRetries: requestOptions?.maxRetries
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TestSdkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body
            });
        }

        switch (_response.error.reason) {
            case "non-json": throw new errors.TestSdkError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
            });
            case "timeout": throw new errors.TestSdkTimeoutError;
            case "unknown": throw new errors.TestSdkError({
                message: _response.error.errorMessage
            });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return \`Bearer \${await core.Supplier.get(this._options.token)}\`;
    }
}


/// File: /src/api/resources/ec2/client/index.ts
export * from "./requests";


/// File: /src/api/resources/ec2/client/requests/BootInstanceRequest.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         size: "string"
 *     }
 */
export interface BootInstanceRequest {
    "size": string;
}


/// File: /src/api/resources/ec2/client/requests/index.ts
export { type BootInstanceRequest } from "./BootInstanceRequest";


/// File: /src/api/resources/ec2/index.ts
export * from "./client";


/// File: /src/api/resources/index.ts
export * as ec2 from "./ec2";
export * as s3 from "./s3";
export * from "./ec2/client/requests";
export * from "./s3/client/requests";


/// File: /src/api/resources/s3/client/Client.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TestSdk from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace S3 {
    interface Options {
        environment?: core.Supplier<environments.TestSdkEnvironment | environments.TestSdkEnvironmentUrls>;
        token: core.Supplier<core.BearerToken>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class S3 {
    constructor(protected readonly _options: S3.Options) {
    }

    /**
     * @param {TestSdk.GetPresignedUrlRequest} request
     * @param {S3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await testSdk.s3.getPresignedUrl({
     *         s3Key: "string"
     *     })
     */
    public async getPresignedUrl(request: TestSdk.GetPresignedUrlRequest, requestOptions?: S3.RequestOptions): Promise<string> {
        const _response = await core.fetcher({
            url: urlJoin((await core.Supplier.get(this._options.environment) ?? environments.TestSdkEnvironment.Production).s3, "/s3/presigned-url"),
            method: "POST",
            headers: {
                "Authorization": await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@test/sdk",
                "X-Fern-SDK-Version": "1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: await serializers.GetPresignedUrlRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? (requestOptions.timeoutInSeconds * 1000) : 60000,
            maxRetries: requestOptions?.maxRetries
        });
        if (_response.ok) {
            return await serializers.s3.getPresignedUrl.Response.parseOrThrow(_response.body, { unrecognizedObjectKeys: "passthrough", allowUnrecognizedUnionMembers: true, allowUnrecognizedEnumValues: true, breadcrumbsPrefix: ["response"] });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TestSdkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body
            });
        }

        switch (_response.error.reason) {
            case "non-json": throw new errors.TestSdkError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
            });
            case "timeout": throw new errors.TestSdkTimeoutError;
            case "unknown": throw new errors.TestSdkError({
                message: _response.error.errorMessage
            });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return \`Bearer \${await core.Supplier.get(this._options.token)}\`;
    }
}


/// File: /src/api/resources/s3/client/index.ts
export * from "./requests";


/// File: /src/api/resources/s3/client/requests/GetPresignedUrlRequest.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         s3Key: "string"
 *     }
 */
export interface GetPresignedUrlRequest {
    "s3Key": string;
}


/// File: /src/api/resources/s3/client/requests/index.ts
export { type GetPresignedUrlRequest } from "./GetPresignedUrlRequest";


/// File: /src/api/resources/s3/index.ts
export * from "./client";


/// File: /src/Client.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Ec2 } from "./api/resources/ec2/client/Client";
import { S3 } from "./api/resources/s3/client/Client";

export declare namespace TestSdkClient {
    interface Options {
        environment?: core.Supplier<environments.TestSdkEnvironment | environments.TestSdkEnvironmentUrls>;
        token: core.Supplier<core.BearerToken>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class TestSdkClient {
    constructor(protected readonly _options: TestSdkClient.Options) {
    }

    protected _ec2: Ec2 | undefined;

    public get ec2(): Ec2 {
        return (this._ec2 ??= new Ec2(this._options));
    }

    protected _s3: S3 | undefined;

    public get s3(): S3 {
        return (this._s3 ??= new S3(this._options));
    }
}


/// File: /src/core/index.ts
export * from "./fetcher";
export * from "./auth";
export * from "./runtime";
export * as serialization from "./schemas";


/// File: /src/environments.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface TestSdkEnvironmentUrls {
    ec2: string;
    s3: string;
}

export const TestSdkEnvironment = {
        Production: {
            ec2: "https://ec2.aws.com",
            s3: "https://s3.aws.com"
        },
        Staging: {
            ec2: "https://staging.ec2.aws.com",
            s3: "https://staging.s3.aws.com"
        },
    } as const;

export type TestSdkEnvironment = typeof TestSdkEnvironment.Production | typeof TestSdkEnvironment.Staging;


/// File: /src/errors/index.ts
export { TestSdkError } from "./TestSdkError";
export { TestSdkTimeoutError } from "./TestSdkTimeoutError";


/// File: /src/errors/TestSdkError.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

export class TestSdkError extends Error {
    readonly statusCode?: number;
    readonly body?: unknown;

    constructor({ message, statusCode, body }: {
            message?: string;
            statusCode?: number;
            body?: unknown;
        }) {
        super(buildMessage({ message, statusCode, body }));
        Object.setPrototypeOf(this, TestSdkError.prototype);
        if (statusCode != null) {
            this.statusCode = statusCode;
        }

        if (body !== undefined) {
            this.body = body;
        }
    }
}

function buildMessage({ message, statusCode, body }: {
        message: string | undefined;
        statusCode: number | undefined;
        body: unknown | undefined;
    }): string {
    let lines: string[] = [];
    if (message != null) {
        lines.push(message);
    }

    if (statusCode != null) {
        lines.push(\`Status code: \${statusCode.toString()}\`);
    }

    if (body != null) {
        lines.push(\`Body: \${JSON.stringify(body, undefined, 2)}\`);
    }

    return lines.join("\\n");
}


/// File: /src/errors/TestSdkTimeoutError.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

export class TestSdkTimeoutError extends Error {
    constructor() {
        super("Timeout");
        Object.setPrototypeOf(this, TestSdkTimeoutError.prototype);
    }
}


/// File: /src/index.ts
export { TestSdkClient } from "./Client";
export * as TestSdk from "./api";
export { TestSdkEnvironment, TestSdkEnvironmentUrls } from "./environments";
export { TestSdkError, TestSdkTimeoutError } from "./errors";


/// File: /src/serialization/index.ts
export * from "./resources";


/// File: /src/serialization/resources/ec2/client/index.ts
export * from "./requests";


/// File: /src/serialization/resources/ec2/client/requests/BootInstanceRequest.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as TestSdk from "../../../../../api/index";
import * as core from "../../../../../core";

export const BootInstanceRequest: core.serialization.Schema<serializers.BootInstanceRequest.Raw, TestSdk.BootInstanceRequest> = core.serialization.object({
        "size": core.serialization.string()
    });

export declare namespace BootInstanceRequest {
    interface Raw {
        "size": string;
    }
}


/// File: /src/serialization/resources/ec2/client/requests/index.ts
export { BootInstanceRequest } from "./BootInstanceRequest";


/// File: /src/serialization/resources/ec2/index.ts
export * from "./client";


/// File: /src/serialization/resources/index.ts
export * as s3 from "./s3";
export * as ec2 from "./ec2";
export * from "./ec2/client/requests";
export * from "./s3/client/requests";


/// File: /src/serialization/resources/s3/client/getPresignedUrl.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as core from "../../../../core";

export const Response: core.serialization.Schema<serializers.s3.getPresignedUrl.Response.Raw, string> = core.serialization.string();

export declare namespace Response {
    type Raw = string;
}




/// File: /src/serialization/resources/s3/client/index.ts
export * as getPresignedUrl from "./getPresignedUrl";
export * from "./requests";


/// File: /src/serialization/resources/s3/client/requests/GetPresignedUrlRequest.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as TestSdk from "../../../../../api/index";
import * as core from "../../../../../core";

export const GetPresignedUrlRequest: core.serialization.Schema<serializers.GetPresignedUrlRequest.Raw, TestSdk.GetPresignedUrlRequest> = core.serialization.object({
        "s3Key": core.serialization.string()
    });

export declare namespace GetPresignedUrlRequest {
    interface Raw {
        "s3Key": string;
    }
}


/// File: /src/serialization/resources/s3/client/requests/index.ts
export { GetPresignedUrlRequest } from "./GetPresignedUrlRequest";


/// File: /src/serialization/resources/s3/index.ts
export * from "./client";


/// File: /tests/ec2.test.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TestSdkClient } from "../src/Client";

const client = new TestSdkClient({
    "environment": { "ec2": process.env.TESTS_BASE_URL || "test", "s3": process.env.TESTS_BASE_URL || "test" },
    "token": process.env.TESTS_AUTH || "test",
});

describe("Ec2", () => {
    test("bootInstance", async () => {
        const response = await client.ec2.bootInstance({ size: "string" });
        expect(response).toEqual(undefined);
    });
});


/// File: /tests/s3.test.ts
/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TestSdkClient } from "../src/Client";

const client = new TestSdkClient({
    "environment": { "ec2": process.env.TESTS_BASE_URL || "test", "s3": process.env.TESTS_BASE_URL || "test" },
    "token": process.env.TESTS_AUTH || "test",
});

describe("S3", () => {
    test("getPresignedUrl", async () => {
        const response = await client.s3.getPresignedUrl({ s3Key: "string" });
        expect(response).toEqual("string");
    });
});


/// File: tests/custom.test.ts

/**
* This is a custom test file, if you wish to add more tests
* to your SDK.
* Be sure to mark this file in \`.fernignore\`.
*
* If you include example requests/responses in your fern definition,
* you will have tests automatically generated for you.
*/
describe("test", () => {
    it("default", () => {
        expect(true).toBe(true);
    });
});"
`;
